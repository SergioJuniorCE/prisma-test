// @bun
var __create = Object.create;
var __getProtoOf = Object.getPrototypeOf;
var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};

// node_modules/@prisma/client/runtime/library.js
var require_library = __commonJS((exports, module) => {
  function ao(e3) {
    return typeof e3 == "function" ? e3 : (t) => t.$extends(e3);
  }
  function lo(e3) {
    return e3;
  }
  function uo(...e3) {
    return (t) => t;
  }
  function M(e3, t) {
    let r = new RegExp(`\\x1b\\[${t}m`, "g"), n = `\x1B[${e3}m`, i3 = `\x1B[${t}m`;
    return function(o) {
      return !go.enabled || o == null ? o : n + (~("" + o).indexOf(i3) ? o.replace(r, i3 + n) : o) + i3;
    };
  }
  function cu(e3) {
    let t = { color: ho[uu++ % ho.length], enabled: Bt.enabled(e3), namespace: e3, log: Bt.log, extend: () => {
    } }, r = (...n) => {
      let { enabled: i3, namespace: o, color: s3, log: a } = t;
      if (n.length !== 0 && Vt.push([o, ...n]), Vt.length > lu && Vt.shift(), Bt.enabled(o) || i3) {
        let l3 = n.map((c3) => typeof c3 == "string" ? c3 : pu(c3)), u = `+${Date.now() - yo}ms`;
        yo = Date.now(), globalThis.DEBUG_COLORS ? a(_r[s3](W(o)), ...l3, _r[s3](u)) : a(o, ...l3, u);
      }
    };
    return new Proxy(r, { get: (n, i3) => t[i3], set: (n, i3, o) => t[i3] = o });
  }
  function pu(e3, t = 2) {
    let r = new Set;
    return JSON.stringify(e3, (n, i3) => {
      if (typeof i3 == "object" && i3 !== null) {
        if (r.has(i3))
          return "[Circular *]";
        r.add(i3);
      } else if (typeof i3 == "bigint")
        return i3.toString();
      return i3;
    }, t);
  }
  function bo(e3 = 7500) {
    let t = Vt.map(([r, ...n]) => `${r} ${n.map((i3) => typeof i3 == "string" ? i3 : JSON.stringify(i3)).join(" ")}`).join(`
`);
    return t.length < e3 ? t : t.slice(-e3);
  }
  function Eo() {
    Vt.length = 0;
  }
  function jn() {
    let e3 = process.env.PRISMA_QUERY_ENGINE_LIBRARY;
    if (!(e3 && wo.default.existsSync(e3)) && process.arch === "ia32")
      throw new Error('The default query engine type (Node-API, "library") is currently not supported for 32bit Node. Please set `engineType = "binary"` in the "generator" block of your "schema.prisma" file (or use the environment variables "PRISMA_CLIENT_ENGINE_TYPE=binary" and/or "PRISMA_CLI_QUERY_ENGINE_TYPE=binary".)');
  }
  function Fr(e3, t) {
    let r = t === "url";
    return e3.includes("windows") ? r ? "query_engine.dll.node" : `query_engine-${e3}.dll.node` : e3.includes("darwin") ? r ? `${Lr}.dylib.node` : `${Lr}-${e3}.dylib.node` : r ? `${Lr}.so.node` : `${Lr}-${e3}.so.node`;
  }
  function pe(e3) {
    return Object.assign(e3, { optional: () => mu(e3), and: (t) => j(e3, t), or: (t) => fu(e3, t), select: (t) => t === undefined ? xo(e3) : xo(t, e3) });
  }
  function mu(e3) {
    return pe({ [ke]: () => ({ match: (t) => {
      let r = {}, n = (i3, o) => {
        r[i3] = o;
      };
      return t === undefined ? (Be(e3).forEach((i3) => n(i3, undefined)), { matched: true, selections: r }) : { matched: Ee(e3, t, n), selections: r };
    }, getSelectionKeys: () => Be(e3), matcherType: "optional" }) });
  }
  function j(...e3) {
    return pe({ [ke]: () => ({ match: (t) => {
      let r = {}, n = (i3, o) => {
        r[i3] = o;
      };
      return { matched: e3.every((i3) => Ee(i3, t, n)), selections: r };
    }, getSelectionKeys: () => Ut(e3, Be), matcherType: "and" }) });
  }
  function fu(...e3) {
    return pe({ [ke]: () => ({ match: (t) => {
      let r = {}, n = (i3, o) => {
        r[i3] = o;
      };
      return Ut(e3, Be).forEach((i3) => n(i3, undefined)), { matched: e3.some((i3) => Ee(i3, t, n)), selections: r };
    }, getSelectionKeys: () => Ut(e3, Be), matcherType: "or" }) });
  }
  function I(e3) {
    return { [ke]: () => ({ match: (t) => ({ matched: !!e3(t) }) }) };
  }
  function xo(...e3) {
    let t = typeof e3[0] == "string" ? e3[0] : undefined, r = e3.length === 2 ? e3[1] : typeof e3[0] == "string" ? undefined : e3[0];
    return pe({ [ke]: () => ({ match: (n) => {
      let i3 = { [t ?? Mr]: n };
      return { matched: r === undefined || Ee(r, n, (o, s3) => {
        i3[o] = s3;
      }), selections: i3 };
    }, getSelectionKeys: () => [t ?? Mr].concat(r === undefined ? [] : Be(r)) }) });
  }
  function ye(e3) {
    return typeof e3 == "number";
  }
  function $e(e3) {
    return typeof e3 == "string";
  }
  function qe(e3) {
    return typeof e3 == "bigint";
  }
  function dt(e3) {
    return new Gn(e3, Un);
  }
  function $r(e3, ...t) {
    hu.warn() && console.warn(`${gu.warn} ${e3}`, ...t);
  }
  async function Co() {
    let e3 = jr.default.platform(), t = process.arch;
    if (e3 === "freebsd") {
      let s3 = await Vr("freebsd-version");
      if (s3 && s3.trim().length > 0) {
        let l3 = /^(\d+)\.?/.exec(s3);
        if (l3)
          return { platform: "freebsd", targetDistro: `freebsd${l3[1]}`, arch: t };
      }
    }
    if (e3 !== "linux")
      return { platform: e3, arch: t };
    let r = await wu(), n = await Au(), i3 = Pu({ arch: t, archFromUname: n, familyDistro: r.familyDistro }), { libssl: o } = await vu(i3);
    return { platform: "linux", libssl: o, arch: t, archFromUname: n, ...r };
  }
  function Eu(e3) {
    let t = /^ID="?([^"\n]*)"?$/im, r = /^ID_LIKE="?([^"\n]*)"?$/im, n = t.exec(e3), i3 = n && n[1] && n[1].toLowerCase() || "", o = r.exec(e3), s3 = o && o[1] && o[1].toLowerCase() || "", a = dt({ id: i3, idLike: s3 }).with({ id: "alpine" }, ({ id: l3 }) => ({ targetDistro: "musl", familyDistro: l3, originalDistro: l3 })).with({ id: "raspbian" }, ({ id: l3 }) => ({ targetDistro: "arm", familyDistro: "debian", originalDistro: l3 })).with({ id: "nixos" }, ({ id: l3 }) => ({ targetDistro: "nixos", originalDistro: l3, familyDistro: "nixos" })).with({ id: "debian" }, { id: "ubuntu" }, ({ id: l3 }) => ({ targetDistro: "debian", familyDistro: "debian", originalDistro: l3 })).with({ id: "rhel" }, { id: "centos" }, { id: "fedora" }, ({ id: l3 }) => ({ targetDistro: "rhel", familyDistro: "rhel", originalDistro: l3 })).when(({ idLike: l3 }) => l3.includes("debian") || l3.includes("ubuntu"), ({ id: l3 }) => ({ targetDistro: "debian", familyDistro: "debian", originalDistro: l3 })).when(({ idLike: l3 }) => i3 === "arch" || l3.includes("arch"), ({ id: l3 }) => ({ targetDistro: "debian", familyDistro: "arch", originalDistro: l3 })).when(({ idLike: l3 }) => l3.includes("centos") || l3.includes("fedora") || l3.includes("rhel") || l3.includes("suse"), ({ id: l3 }) => ({ targetDistro: "rhel", familyDistro: "rhel", originalDistro: l3 })).otherwise(({ id: l3 }) => ({ targetDistro: undefined, familyDistro: undefined, originalDistro: l3 }));
    return te(`Found distro info:
${JSON.stringify(a, null, 2)}`), a;
  }
  async function wu() {
    let e3 = "/etc/os-release";
    try {
      let t = await Qn.default.readFile(e3, { encoding: "utf-8" });
      return Eu(t);
    } catch {
      return { targetDistro: undefined, familyDistro: undefined, originalDistro: undefined };
    }
  }
  function xu(e3) {
    let t = /^OpenSSL\s(\d+\.\d+)\.\d+/.exec(e3);
    if (t) {
      let r = `${t[1]}.x`;
      return So(r);
    }
  }
  function Po(e3) {
    let t = /libssl\.so\.(\d)(\.\d)?/.exec(e3);
    if (t) {
      let r = `${t[1]}${t[2] ?? ".0"}.x`;
      return So(r);
    }
  }
  function So(e3) {
    let t = (() => {
      if (Io(e3))
        return e3;
      let r = e3.split(".");
      return r[1] = "0", r.join(".");
    })();
    if (bu.includes(t))
      return t;
  }
  function Pu(e3) {
    return dt(e3).with({ familyDistro: "musl" }, () => (te('Trying platform-specific paths for "alpine"'), ["/lib"])).with({ familyDistro: "debian" }, ({ archFromUname: t }) => (te('Trying platform-specific paths for "debian" (and "ubuntu")'), [`/usr/lib/${t}-linux-gnu`, `/lib/${t}-linux-gnu`])).with({ familyDistro: "rhel" }, () => (te('Trying platform-specific paths for "rhel"'), ["/lib64", "/usr/lib64"])).otherwise(({ familyDistro: t, arch: r, archFromUname: n }) => (te(`Don't know any platform-specific paths for "${t}" on ${r} (${n})`), []));
  }
  async function vu(e3) {
    let t = 'grep -v "libssl.so.0"', r = await vo(e3);
    if (r) {
      te(`Found libssl.so file using platform-specific paths: ${r}`);
      let o = Po(r);
      if (te(`The parsed libssl version is: ${o}`), o)
        return { libssl: o, strategy: "libssl-specific-path" };
    }
    te('Falling back to "ldconfig" and other generic paths');
    let n = await Vr(`ldconfig -p | sed "s/.*=>s*//" | sed "s|.*/||" | grep libssl | sort | ${t}`);
    if (n || (n = await vo(["/lib64", "/usr/lib64", "/lib"])), n) {
      te(`Found libssl.so file using "ldconfig" or other generic paths: ${n}`);
      let o = Po(n);
      if (te(`The parsed libssl version is: ${o}`), o)
        return { libssl: o, strategy: "ldconfig" };
    }
    let i3 = await Vr("openssl version -v");
    if (i3) {
      te(`Found openssl binary with version: ${i3}`);
      let o = xu(i3);
      if (te(`The parsed openssl version is: ${o}`), o)
        return { libssl: o, strategy: "openssl-binary" };
    }
    return te("Couldn't find any version of libssl or OpenSSL in the system"), {};
  }
  async function vo(e3) {
    for (let t of e3) {
      let r = await Tu(t);
      if (r)
        return r;
    }
  }
  async function Tu(e3) {
    try {
      return (await Qn.default.readdir(e3)).find((r) => r.startsWith("libssl.so.") && !r.startsWith("libssl.so.0"));
    } catch (t) {
      if (t.code === "ENOENT")
        return;
      throw t;
    }
  }
  async function tt() {
    let { binaryTarget: e3 } = await Ao();
    return e3;
  }
  function Ru(e3) {
    return e3.binaryTarget !== undefined;
  }
  async function Jn() {
    let { memoized: e3, ...t } = await Ao();
    return t;
  }
  async function Ao() {
    if (Ru(qr))
      return Promise.resolve({ ...qr, memoized: true });
    let e3 = await Co(), t = Cu(e3);
    return qr = { ...e3, binaryTarget: t }, { ...qr, memoized: false };
  }
  function Cu(e3) {
    let { platform: t, arch: r, archFromUname: n, libssl: i3, targetDistro: o, familyDistro: s3, originalDistro: a } = e3;
    t === "linux" && !["x64", "arm64"].includes(r) && $r(`Prisma only officially supports Linux on amd64 (x86_64) and arm64 (aarch64) system architectures (detected "${r}" instead). If you are using your own custom Prisma engines, you can ignore this warning, as long as you've compiled the engines for your system architecture "${n}".`);
    let l3 = "1.1.x";
    if (t === "linux" && i3 === undefined) {
      let c3 = dt({ familyDistro: s3 }).with({ familyDistro: "debian" }, () => "Please manually install OpenSSL via `apt-get update -y && apt-get install -y openssl` and try installing Prisma again. If you're running Prisma on Docker, add this command to your Dockerfile, or switch to an image that already has OpenSSL installed.").otherwise(() => "Please manually install OpenSSL and try installing Prisma again.");
      $r(`Prisma failed to detect the libssl/openssl version to use, and may not work as expected. Defaulting to "openssl-${l3}".
${c3}`);
    }
    let u = "debian";
    if (t === "linux" && o === undefined && te(`Distro is "${a}". Falling back to Prisma engines built for "${u}".`), t === "darwin" && r === "arm64")
      return "darwin-arm64";
    if (t === "darwin")
      return "darwin";
    if (t === "win32")
      return "windows";
    if (t === "freebsd")
      return o;
    if (t === "openbsd")
      return "openbsd";
    if (t === "netbsd")
      return "netbsd";
    if (t === "linux" && o === "nixos")
      return "linux-nixos";
    if (t === "linux" && r === "arm64")
      return `${o === "musl" ? "linux-musl-arm64" : "linux-arm64"}-openssl-${i3 || l3}`;
    if (t === "linux" && r === "arm")
      return `linux-arm-openssl-${i3 || l3}`;
    if (t === "linux" && o === "musl") {
      let c3 = "linux-musl";
      return !i3 || Io(i3) ? c3 : `${c3}-openssl-${i3}`;
    }
    return t === "linux" && o && i3 ? `${o}-openssl-${i3}` : (t !== "linux" && $r(`Prisma detected unknown OS "${t}" and may not work as expected. Defaulting to "linux".`), i3 ? `${u}-openssl-${i3}` : o ? `${o}-openssl-${l3}` : `${u}-openssl-${l3}`);
  }
  async function Su(e3) {
    try {
      return await e3();
    } catch {
      return;
    }
  }
  function Vr(e3) {
    return Su(async () => {
      let t = await yu(e3);
      return te(`Command "${e3}" successfully returned "${t.stdout}"`), t.stdout;
    });
  }
  async function Au() {
    return typeof jr.default.machine == "function" ? jr.default.machine() : (await Vr("uname -m"))?.trim();
  }
  function Io(e3) {
    return e3.startsWith("1.");
  }
  function Xn(e3) {
    return (0, Vo.default)(e3, e3, { fallback: X });
  }
  function Bo() {
    return $.default.join(__dirname, "../");
  }
  function ni(e3) {
    if (process.platform === "win32")
      return;
    let t = ri.default.statSync(e3), r = t.mode | 64 | 8 | 1;
    if (t.mode === r) {
      Uo(`Execution permissions of ${e3} are fine`);
      return;
    }
    let n = r.toString(8).slice(-3);
    Uo(`Have to call chmodPlusX on ${e3}`), ri.default.chmodSync(e3, n);
  }
  function ii(e3) {
    let t = e3.e, r = (a) => `Prisma cannot find the required \`${a}\` system library in your system`, n = t.message.includes("cannot open shared object file"), i3 = `Please refer to the documentation about Prisma's system requirements: ${Xn("https://pris.ly/d/system-requirements")}`, o = `Unable to require(\`${Ae(e3.id)}\`).`, s3 = dt({ message: t.message, code: t.code }).with({ code: "ENOENT" }, () => "File does not exist.").when(({ message: a }) => n && a.includes("libz"), () => `${r("libz")}. Please install it and try again.`).when(({ message: a }) => n && a.includes("libgcc_s"), () => `${r("libgcc_s")}. Please install it and try again.`).when(({ message: a }) => n && a.includes("libssl"), () => {
      let a = e3.platformInfo.libssl ? `openssl-${e3.platformInfo.libssl}` : "openssl";
      return `${r("libssl")}. Please install ${a} and try again.`;
    }).when(({ message: a }) => a.includes("GLIBC"), () => `Prisma has detected an incompatible version of the \`glibc\` C standard library installed in your system. This probably means your system may be too old to run Prisma. ${i3}`).when(({ message: a }) => e3.platformInfo.platform === "linux" && a.includes("symbol not found"), () => `The Prisma engines are not compatible with your system ${e3.platformInfo.originalDistro} on (${e3.platformInfo.archFromUname}) which uses the \`${e3.platformInfo.binaryTarget}\` binaryTarget by default. ${i3}`).otherwise(() => `The Prisma engines do not seem to be compatible with your system. ${i3}`);
    return `${o}
${s3}

Details: ${t.message}`;
  }
  function Wo(e3) {
    let t = e3.ignoreProcessEnv ? {} : process.env, r = (n) => n.match(/(.?\${(?:[a-zA-Z0-9_]+)?})/g)?.reduce(function(o, s3) {
      let a = /(.?)\${([a-zA-Z0-9_]+)?}/g.exec(s3);
      if (!a)
        return o;
      let l3 = a[1], u, c3;
      if (l3 === "\\")
        c3 = a[0], u = c3.replace("\\$", "$");
      else {
        let p3 = a[2];
        c3 = a[0].substring(l3.length), u = Object.hasOwnProperty.call(t, p3) ? t[p3] : e3.parsed[p3] || "", u = r(u);
      }
      return o.replace(c3, u);
    }, n) ?? n;
    for (let n in e3.parsed) {
      let i3 = Object.hasOwnProperty.call(t, n) ? t[n] : e3.parsed[n];
      e3.parsed[n] = r(i3);
    }
    for (let n in e3.parsed)
      t[n] = e3.parsed[n];
    return e3;
  }
  function Jt({ rootEnvPath: e3, schemaEnvPath: t }, r = { conflictCheck: "none" }) {
    let n = Ho(e3);
    r.conflictCheck !== "none" && Qu(n, t, r.conflictCheck);
    let i3 = null;
    return Ko(n?.path, t) || (i3 = Ho(t)), !n && !i3 && si("No Environment variables loaded"), i3?.dotenvResult.error ? console.error(ce(W("Schema Env Error: ")) + i3.dotenvResult.error) : { message: [n?.message, i3?.message].filter(Boolean).join(`
`), parsed: { ...n?.dotenvResult?.parsed, ...i3?.dotenvResult?.parsed } };
  }
  function Qu(e3, t, r) {
    let n = e3?.dotenvResult.parsed, i3 = !Ko(e3?.path, t);
    if (n && t && i3 && Jr.default.existsSync(t)) {
      let o = ai.default.parse(Jr.default.readFileSync(t)), s3 = [];
      for (let a in o)
        n[a] === o[a] && s3.push(a);
      if (s3.length > 0) {
        let a = gt.default.relative(process.cwd(), e3.path), l3 = gt.default.relative(process.cwd(), t);
        if (r === "error") {
          let u = `There is a conflict between env var${s3.length > 1 ? "s" : ""} in ${X(a)} and ${X(l3)}
Conflicting env vars:
${s3.map((c3) => `  ${W(c3)}`).join(`
`)}

We suggest to move the contents of ${X(l3)} to ${X(a)} to consolidate your env vars.
`;
          throw new Error(u);
        } else if (r === "warn") {
          let u = `Conflict for env var${s3.length > 1 ? "s" : ""} ${s3.map((c3) => W(c3)).join(", ")} in ${X(a)} and ${X(l3)}
Env vars from ${X(l3)} overwrite the ones from ${X(a)}
      `;
          console.warn(`${Ie("warn(prisma)")} ${u}`);
        }
      }
    }
  }
  function Ho(e3) {
    if (Ju(e3)) {
      si(`Environment variables loaded from ${e3}`);
      let t = ai.default.config({ path: e3, debug: process.env.DOTENV_CONFIG_DEBUG ? true : undefined });
      return { dotenvResult: Wo(t), message: Ae(`Environment variables loaded from ${gt.default.relative(process.cwd(), e3)}`), path: e3 };
    } else
      si(`Environment variables not found at ${e3}`);
    return null;
  }
  function Ko(e3, t) {
    return e3 && t && gt.default.resolve(e3) === gt.default.resolve(t);
  }
  function Ju(e3) {
    return !!(e3 && Jr.default.existsSync(e3));
  }
  function Wt(e3) {
    let t = Wu();
    return t || (e3?.config.engineType === "library" ? "library" : e3?.config.engineType === "binary" ? "binary" : zo);
  }
  function Wu() {
    let e3 = process.env.PRISMA_CLIENT_ENGINE_TYPE;
    return e3 === "library" ? "library" : e3 === "binary" ? "binary" : undefined;
  }
  function li(e3) {
    return Ht.default.sep === Ht.default.posix.sep ? e3 : e3.split(Ht.default.sep).join(Ht.default.posix.sep);
  }
  function pi(e3) {
    return String(new ci(e3));
  }
  function Ku(e3) {
    let t;
    if (e3.length > 0) {
      let r = e3.find((n) => n.fromEnvVar !== null);
      r ? t = `env("${r.fromEnvVar}")` : t = e3.map((n) => n.native ? "native" : n.value);
    } else
      t = undefined;
    return t;
  }
  function zu(e3) {
    let t = Object.keys(e3).reduce((r, n) => Math.max(r, n.length), 0);
    return Object.entries(e3).map(([r, n]) => `${r.padEnd(t)} = ${Yu(n)}`).join(`
`);
  }
  function Yu(e3) {
    return JSON.parse(JSON.stringify(e3, (t, r) => Array.isArray(r) ? `[${r.map((n) => JSON.stringify(n)).join(", ")}]` : JSON.stringify(r)));
  }
  function Zu(...e3) {
    console.log(...e3);
  }
  function di(e3, ...t) {
    ns.warn() && console.warn(`${Kt.warn} ${e3}`, ...t);
  }
  function Xu(e3, ...t) {
    console.info(`${Kt.info} ${e3}`, ...t);
  }
  function ec(e3, ...t) {
    console.error(`${Kt.error} ${e3}`, ...t);
  }
  function tc(e3, ...t) {
    console.log(`${Kt.query} ${e3}`, ...t);
  }
  function Wr(e3, t) {
    if (!e3)
      throw new Error(`${t}. This should never happen. If you see this error, please, open an issue at https://pris.ly/prisma-prisma-bug-report`);
  }
  function De(e3, t) {
    throw new Error(t);
  }
  function fi(e3, t) {
    return Object.prototype.hasOwnProperty.call(e3, t);
  }
  function ht(e3, t) {
    let r = {};
    for (let n of Object.keys(e3))
      r[n] = t(e3[n], n);
    return r;
  }
  function hi(e3, t) {
    if (e3.length === 0)
      return;
    let r = e3[0];
    for (let n = 1;n < e3.length; n++)
      t(r, e3[n]) < 0 && (r = e3[n]);
    return r;
  }
  function w(e3, t) {
    Object.defineProperty(e3, "name", { value: t, configurable: true });
  }
  function Zt(e3) {
    let t;
    return { get() {
      return t || (t = { value: e3() }), t.value;
    } };
  }
  function us(e3, t) {
    let r = Zt(() => nc(t));
    Object.defineProperty(e3, "dmmf", { get: () => r.get() });
  }
  function nc(e3) {
    return { datamodel: { models: yi(e3.models), enums: yi(e3.enums), types: yi(e3.types) } };
  }
  function yi(e3) {
    return Object.entries(e3).map(([t, r]) => ({ name: t, ...r }));
  }
  function Ei(e3, t) {
    Object.defineProperty(e3, "name", { value: t, configurable: true });
  }
  function nr(e3) {
    return { ok: false, error: e3, map() {
      return nr(e3);
    }, flatMap() {
      return nr(e3);
    } };
  }
  function rt(e3, t) {
    return async (...r) => {
      try {
        return await t(...r);
      } catch (n) {
        let i3 = e3.registerNewError(n);
        return nr({ kind: "GenericJs", id: i3 });
      }
    };
  }
  function oc(e3, t) {
    return (...r) => {
      try {
        return t(...r);
      } catch (n) {
        let i3 = e3.registerNewError(n);
        return nr({ kind: "GenericJs", id: i3 });
      }
    };
  }
  function cs(e3, t = ",", r = "", n = "") {
    if (e3.length === 0)
      throw new TypeError("Expected `join([])` to be called with an array of multiple elements, but got an empty array");
    return new ie([r, ...Array(e3.length - 1).fill(t), n], e3);
  }
  function Pi(e3) {
    return new ie([e3], []);
  }
  function vi(e3, ...t) {
    return new ie(e3, t);
  }
  function ir(e3) {
    return { getKeys() {
      return Object.keys(e3);
    }, getPropertyValue(t) {
      return e3[t];
    } };
  }
  function re(e3, t) {
    return { getKeys() {
      return [e3];
    }, getPropertyValue() {
      return t();
    } };
  }
  function nt(e3) {
    let t = new we;
    return { getKeys() {
      return e3.getKeys();
    }, getPropertyValue(r) {
      return t.getOrCreate(r, () => e3.getPropertyValue(r));
    }, getPropertyDescriptor(r) {
      return e3.getPropertyDescriptor?.(r);
    } };
  }
  function Xr(e3) {
    let t = new Set(e3);
    return { getOwnPropertyDescriptor: () => Zr, has: (r, n) => t.has(n), set: (r, n, i3) => t.add(n) && Reflect.set(r, n, i3), ownKeys: () => [...t] };
  }
  function xe(e3, t) {
    let r = sc(t), n = new Set, i3 = new Proxy(e3, { get(o, s3) {
      if (n.has(s3))
        return o[s3];
      let a = r.get(s3);
      return a ? a.getPropertyValue(s3) : o[s3];
    }, has(o, s3) {
      if (n.has(s3))
        return true;
      let a = r.get(s3);
      return a ? a.has?.(s3) ?? true : Reflect.has(o, s3);
    }, ownKeys(o) {
      let s3 = ms(Reflect.ownKeys(o), r), a = ms(Array.from(r.keys()), r);
      return [...new Set([...s3, ...a, ...n])];
    }, set(o, s3, a) {
      return r.get(s3)?.getPropertyDescriptor?.(s3)?.writable === false ? false : (n.add(s3), Reflect.set(o, s3, a));
    }, getOwnPropertyDescriptor(o, s3) {
      let a = Reflect.getOwnPropertyDescriptor(o, s3);
      if (a && !a.configurable)
        return a;
      let l3 = r.get(s3);
      return l3 ? l3.getPropertyDescriptor ? { ...Zr, ...l3?.getPropertyDescriptor(s3) } : Zr : a;
    }, defineProperty(o, s3, a) {
      return n.add(s3), Reflect.defineProperty(o, s3, a);
    } });
    return i3[ds] = function() {
      let o = { ...this };
      return delete o[ds], o;
    }, i3;
  }
  function sc(e3) {
    let t = new Map;
    for (let r of e3) {
      let n = r.getKeys();
      for (let i3 of n)
        t.set(i3, r);
    }
    return t;
  }
  function ms(e3, t) {
    return e3.filter((r) => t.get(r)?.has?.(r) ?? true);
  }
  function bt(e3) {
    return { getKeys() {
      return e3;
    }, has() {
      return false;
    }, getPropertyValue() {
    } };
  }
  function Et(e3, t) {
    return { batch: e3, transaction: t?.kind === "batch" ? { isolationLevel: t.options.isolationLevel } : undefined };
  }
  function fs(e3) {
    return e3.substring(0, 1).toLowerCase() + e3.substring(1);
  }
  function xt(e3) {
    return e3 instanceof Date || Object.prototype.toString.call(e3) === "[object Date]";
  }
  function en(e3) {
    return e3.toString() !== "Invalid Date";
  }
  function K(e3) {
    var t, r, n, i3 = e3.length - 1, o = "", s3 = e3[0];
    if (i3 > 0) {
      for (o += s3, t = 1;t < i3; t++)
        n = e3[t] + "", r = b - n.length, r && (o += Qe(r)), o += n;
      s3 = e3[t], n = s3 + "", r = b - n.length, r && (o += Qe(r));
    } else if (s3 === 0)
      return "0";
    for (;s3 % 10 === 0; )
      s3 /= 10;
    return o + s3;
  }
  function oe(e3, t, r) {
    if (e3 !== ~~e3 || e3 < t || e3 > r)
      throw Error(We + e3);
  }
  function or(e3, t, r, n) {
    var i3, o, s3, a;
    for (o = e3[0];o >= 10; o /= 10)
      --t;
    return --t < 0 ? (t += b, i3 = 0) : (i3 = Math.ceil((t + 1) / b), t %= b), o = G(10, b - t), a = e3[i3] % o | 0, n == null ? t < 3 ? (t == 0 ? a = a / 100 | 0 : t == 1 && (a = a / 10 | 0), s3 = r < 4 && a == 99999 || r > 3 && a == 49999 || a == 50000 || a == 0) : s3 = (r < 4 && a + 1 == o || r > 3 && a + 1 == o / 2) && (e3[i3 + 1] / o / 100 | 0) == G(10, t - 2) - 1 || (a == o / 2 || a == 0) && (e3[i3 + 1] / o / 100 | 0) == 0 : t < 4 ? (t == 0 ? a = a / 1000 | 0 : t == 1 ? a = a / 100 | 0 : t == 2 && (a = a / 10 | 0), s3 = (n || r < 4) && a == 9999 || !n && r > 3 && a == 4999) : s3 = ((n || r < 4) && a + 1 == o || !n && r > 3 && a + 1 == o / 2) && (e3[i3 + 1] / o / 1000 | 0) == G(10, t - 3) - 1, s3;
  }
  function tn(e3, t, r) {
    for (var n, i3 = [0], o, s3 = 0, a = e3.length;s3 < a; ) {
      for (o = i3.length;o--; )
        i3[o] *= t;
      for (i3[0] += Ti.indexOf(e3.charAt(s3++)), n = 0;n < i3.length; n++)
        i3[n] > r - 1 && (i3[n + 1] === undefined && (i3[n + 1] = 0), i3[n + 1] += i3[n] / r | 0, i3[n] %= r);
    }
    return i3.reverse();
  }
  function dc(e3, t) {
    var r, n, i3;
    if (t.isZero())
      return t;
    n = t.d.length, n < 32 ? (r = Math.ceil(n / 3), i3 = (1 / ln(4, r)).toString()) : (r = 16, i3 = "2.3283064365386962890625e-10"), e3.precision += r, t = vt(e3, 1, t.times(i3), new e3(1));
    for (var o = r;o--; ) {
      var s3 = t.times(t);
      t = s3.times(s3).minus(s3).times(8).plus(1);
    }
    return e3.precision -= r, t;
  }
  function y3(e3, t, r, n) {
    var i3, o, s3, a, l3, u, c3, p3, d3, f3 = e3.constructor;
    e:
      if (t != null) {
        if (p3 = e3.d, !p3)
          return e3;
        for (i3 = 1, a = p3[0];a >= 10; a /= 10)
          i3++;
        if (o = t - i3, o < 0)
          o += b, s3 = t, c3 = p3[d3 = 0], l3 = c3 / G(10, i3 - s3 - 1) % 10 | 0;
        else if (d3 = Math.ceil((o + 1) / b), a = p3.length, d3 >= a)
          if (n) {
            for (;a++ <= d3; )
              p3.push(0);
            c3 = l3 = 0, i3 = 1, o %= b, s3 = o - b + 1;
          } else
            break e;
        else {
          for (c3 = a = p3[d3], i3 = 1;a >= 10; a /= 10)
            i3++;
          o %= b, s3 = o - b + i3, l3 = s3 < 0 ? 0 : c3 / G(10, i3 - s3 - 1) % 10 | 0;
        }
        if (n = n || t < 0 || p3[d3 + 1] !== undefined || (s3 < 0 ? c3 : c3 % G(10, i3 - s3 - 1)), u = r < 4 ? (l3 || n) && (r == 0 || r == (e3.s < 0 ? 3 : 2)) : l3 > 5 || l3 == 5 && (r == 4 || n || r == 6 && (o > 0 ? s3 > 0 ? c3 / G(10, i3 - s3) : 0 : p3[d3 - 1]) % 10 & 1 || r == (e3.s < 0 ? 8 : 7)), t < 1 || !p3[0])
          return p3.length = 0, u ? (t -= e3.e + 1, p3[0] = G(10, (b - t % b) % b), e3.e = -t || 0) : p3[0] = e3.e = 0, e3;
        if (o == 0 ? (p3.length = d3, a = 1, d3--) : (p3.length = d3 + 1, a = G(10, b - o), p3[d3] = s3 > 0 ? (c3 / G(10, i3 - s3) % G(10, s3) | 0) * a : 0), u)
          for (;; )
            if (d3 == 0) {
              for (o = 1, s3 = p3[0];s3 >= 10; s3 /= 10)
                o++;
              for (s3 = p3[0] += a, a = 1;s3 >= 10; s3 /= 10)
                a++;
              o != a && (e3.e++, p3[0] == ge && (p3[0] = 1));
              break;
            } else {
              if (p3[d3] += a, p3[d3] != ge)
                break;
              p3[d3--] = 0, a = 1;
            }
        for (o = p3.length;p3[--o] === 0; )
          p3.pop();
      }
    return x3 && (e3.e > f3.maxE ? (e3.d = null, e3.e = NaN) : e3.e < f3.minE && (e3.e = 0, e3.d = [0])), e3;
  }
  function Pe(e3, t, r) {
    if (!e3.isFinite())
      return Cs(e3);
    var n, i3 = e3.e, o = K(e3.d), s3 = o.length;
    return t ? (r && (n = r - s3) > 0 ? o = o.charAt(0) + "." + o.slice(1) + Qe(n) : s3 > 1 && (o = o.charAt(0) + "." + o.slice(1)), o = o + (e3.e < 0 ? "e" : "e+") + e3.e) : i3 < 0 ? (o = "0." + Qe(-i3 - 1) + o, r && (n = r - s3) > 0 && (o += Qe(n))) : i3 >= s3 ? (o += Qe(i3 + 1 - s3), r && (n = r - i3 - 1) > 0 && (o = o + "." + Qe(n))) : ((n = i3 + 1) < s3 && (o = o.slice(0, n) + "." + o.slice(n)), r && (n = r - s3) > 0 && (i3 + 1 === s3 && (o += "."), o += Qe(n))), o;
  }
  function an(e3, t) {
    var r = e3[0];
    for (t *= b;r >= 10; r /= 10)
      t++;
    return t;
  }
  function on(e3, t, r) {
    if (t > pc)
      throw x3 = true, r && (e3.precision = r), Error(Es);
    return y3(new e3(rn), t, 1, true);
  }
  function fe(e3, t, r) {
    if (t > Ci)
      throw Error(Es);
    return y3(new e3(nn), t, r, true);
  }
  function vs(e3) {
    var t = e3.length - 1, r = t * b + 1;
    if (t = e3[t], t) {
      for (;t % 10 == 0; t /= 10)
        r--;
      for (t = e3[0];t >= 10; t /= 10)
        r++;
    }
    return r;
  }
  function Qe(e3) {
    for (var t = "";e3--; )
      t += "0";
    return t;
  }
  function Ts(e3, t, r, n) {
    var i3, o = new e3(1), s3 = Math.ceil(n / b + 4);
    for (x3 = false;; ) {
      if (r % 2 && (o = o.times(t), hs(o.d, s3) && (i3 = true)), r = ee(r / 2), r === 0) {
        r = o.d.length - 1, i3 && o.d[r] === 0 && ++o.d[r];
        break;
      }
      t = t.times(t), hs(t.d, s3);
    }
    return x3 = true, o;
  }
  function gs(e3) {
    return e3.d[e3.d.length - 1] & 1;
  }
  function Rs(e3, t, r) {
    for (var n, i3 = new e3(t[0]), o = 0;++o < t.length; )
      if (n = new e3(t[o]), n.s)
        i3[r](n) && (i3 = n);
      else {
        i3 = n;
        break;
      }
    return i3;
  }
  function Si(e3, t) {
    var r, n, i3, o, s3, a, l3, u = 0, c3 = 0, p3 = 0, d3 = e3.constructor, f3 = d3.rounding, g3 = d3.precision;
    if (!e3.d || !e3.d[0] || e3.e > 17)
      return new d3(e3.d ? e3.d[0] ? e3.s < 0 ? 0 : 1 / 0 : 1 : e3.s ? e3.s < 0 ? 0 : e3 : NaN);
    for (t == null ? (x3 = false, l3 = g3) : l3 = t, a = new d3(0.03125);e3.e > -2; )
      e3 = e3.times(a), p3 += 5;
    for (n = Math.log(G(2, p3)) / Math.LN10 * 2 + 5 | 0, l3 += n, r = o = s3 = new d3(1), d3.precision = l3;; ) {
      if (o = y3(o.times(e3), l3, 1), r = r.times(++c3), a = s3.plus(N(o, r, l3, 1)), K(a.d).slice(0, l3) === K(s3.d).slice(0, l3)) {
        for (i3 = p3;i3--; )
          s3 = y3(s3.times(s3), l3, 1);
        if (t == null)
          if (u < 3 && or(s3.d, l3 - n, f3, u))
            d3.precision = l3 += 10, r = o = a = new d3(1), c3 = 0, u++;
          else
            return y3(s3, d3.precision = g3, f3, x3 = true);
        else
          return d3.precision = g3, s3;
      }
      s3 = a;
    }
  }
  function Je(e3, t) {
    var r, n, i3, o, s3, a, l3, u, c3, p3, d3, f3 = 1, g3 = 10, h3 = e3, O = h3.d, T = h3.constructor, S = T.rounding, C = T.precision;
    if (h3.s < 0 || !O || !O[0] || !h3.e && O[0] == 1 && O.length == 1)
      return new T(O && !O[0] ? -1 / 0 : h3.s != 1 ? NaN : O ? 0 : h3);
    if (t == null ? (x3 = false, c3 = C) : c3 = t, T.precision = c3 += g3, r = K(O), n = r.charAt(0), Math.abs(o = h3.e) < 1500000000000000) {
      for (;n < 7 && n != 1 || n == 1 && r.charAt(1) > 3; )
        h3 = h3.times(e3), r = K(h3.d), n = r.charAt(0), f3++;
      o = h3.e, n > 1 ? (h3 = new T("0." + r), o++) : h3 = new T(n + "." + r.slice(1));
    } else
      return u = on(T, c3 + 2, C).times(o + ""), h3 = Je(new T(n + "." + r.slice(1)), c3 - g3).plus(u), T.precision = C, t == null ? y3(h3, C, S, x3 = true) : h3;
    for (p3 = h3, l3 = s3 = h3 = N(h3.minus(1), h3.plus(1), c3, 1), d3 = y3(h3.times(h3), c3, 1), i3 = 3;; ) {
      if (s3 = y3(s3.times(d3), c3, 1), u = l3.plus(N(s3, new T(i3), c3, 1)), K(u.d).slice(0, c3) === K(l3.d).slice(0, c3))
        if (l3 = l3.times(2), o !== 0 && (l3 = l3.plus(on(T, c3 + 2, C).times(o + ""))), l3 = N(l3, new T(f3), c3, 1), t == null)
          if (or(l3.d, c3 - g3, S, a))
            T.precision = c3 += g3, u = s3 = h3 = N(p3.minus(1), p3.plus(1), c3, 1), d3 = y3(h3.times(h3), c3, 1), i3 = a = 1;
          else
            return y3(l3, T.precision = C, S, x3 = true);
        else
          return T.precision = C, l3;
      l3 = u, i3 += 2;
    }
  }
  function Cs(e3) {
    return String(e3.s * e3.s / 0);
  }
  function Ai(e3, t) {
    var r, n, i3;
    for ((r = t.indexOf(".")) > -1 && (t = t.replace(".", "")), (n = t.search(/e/i)) > 0 ? (r < 0 && (r = n), r += +t.slice(n + 1), t = t.substring(0, n)) : r < 0 && (r = t.length), n = 0;t.charCodeAt(n) === 48; n++)
      ;
    for (i3 = t.length;t.charCodeAt(i3 - 1) === 48; --i3)
      ;
    if (t = t.slice(n, i3), t) {
      if (i3 -= n, e3.e = r = r - n - 1, e3.d = [], n = (r + 1) % b, r < 0 && (n += b), n < i3) {
        for (n && e3.d.push(+t.slice(0, n)), i3 -= b;n < i3; )
          e3.d.push(+t.slice(n, n += b));
        t = t.slice(n), n = b - t.length;
      } else
        n -= i3;
      for (;n--; )
        t += "0";
      e3.d.push(+t), x3 && (e3.e > e3.constructor.maxE ? (e3.d = null, e3.e = NaN) : e3.e < e3.constructor.minE && (e3.e = 0, e3.d = [0]));
    } else
      e3.e = 0, e3.d = [0];
    return e3;
  }
  function mc(e3, t) {
    var r, n, i3, o, s3, a, l3, u, c3;
    if (t.indexOf("_") > -1) {
      if (t = t.replace(/(\d)_(?=\d)/g, "$1"), Ps.test(t))
        return Ai(e3, t);
    } else if (t === "Infinity" || t === "NaN")
      return +t || (e3.s = NaN), e3.e = NaN, e3.d = null, e3;
    if (lc.test(t))
      r = 16, t = t.toLowerCase();
    else if (ac.test(t))
      r = 2;
    else if (uc.test(t))
      r = 8;
    else
      throw Error(We + t);
    for (o = t.search(/p/i), o > 0 ? (l3 = +t.slice(o + 1), t = t.substring(2, o)) : t = t.slice(2), o = t.indexOf("."), s3 = o >= 0, n = e3.constructor, s3 && (t = t.replace(".", ""), a = t.length, o = a - o, i3 = Ts(n, new n(r), o, o * 2)), u = tn(t, r, ge), c3 = u.length - 1, o = c3;u[o] === 0; --o)
      u.pop();
    return o < 0 ? new n(e3.s * 0) : (e3.e = an(u, c3), e3.d = u, x3 = false, s3 && (e3 = N(e3, i3, a * 4)), l3 && (e3 = e3.times(Math.abs(l3) < 54 ? G(2, l3) : it.pow(2, l3))), x3 = true, e3);
  }
  function fc(e3, t) {
    var r, n = t.d.length;
    if (n < 3)
      return t.isZero() ? t : vt(e3, 2, t, t);
    r = 1.4 * Math.sqrt(n), r = r > 16 ? 16 : r | 0, t = t.times(1 / ln(5, r)), t = vt(e3, 2, t, t);
    for (var i3, o = new e3(5), s3 = new e3(16), a = new e3(20);r--; )
      i3 = t.times(t), t = t.times(o.plus(i3.times(s3.times(i3).minus(a))));
    return t;
  }
  function vt(e3, t, r, n, i3) {
    var o, s3, a, l3, u = 1, c3 = e3.precision, p3 = Math.ceil(c3 / b);
    for (x3 = false, l3 = r.times(r), a = new e3(n);; ) {
      if (s3 = N(a.times(l3), new e3(t++ * t++), c3, 1), a = i3 ? n.plus(s3) : n.minus(s3), n = N(s3.times(l3), new e3(t++ * t++), c3, 1), s3 = a.plus(n), s3.d[p3] !== undefined) {
        for (o = p3;s3.d[o] === a.d[o] && o--; )
          ;
        if (o == -1)
          break;
      }
      o = a, a = n, n = s3, s3 = o, u++;
    }
    return x3 = true, s3.d.length = p3 + 1, s3;
  }
  function ln(e3, t) {
    for (var r = e3;--t; )
      r *= e3;
    return r;
  }
  function Ss(e3, t) {
    var r, n = t.s < 0, i3 = fe(e3, e3.precision, 1), o = i3.times(0.5);
    if (t = t.abs(), t.lte(o))
      return Fe = n ? 4 : 1, t;
    if (r = t.divToInt(i3), r.isZero())
      Fe = n ? 3 : 2;
    else {
      if (t = t.minus(r.times(i3)), t.lte(o))
        return Fe = gs(r) ? n ? 2 : 3 : n ? 4 : 1, t;
      Fe = gs(r) ? n ? 1 : 4 : n ? 3 : 2;
    }
    return t.minus(i3).abs();
  }
  function Ii(e3, t, r, n) {
    var i3, o, s3, a, l3, u, c3, p3, d3, f3 = e3.constructor, g3 = r !== undefined;
    if (g3 ? (oe(r, 1, He), n === undefined ? n = f3.rounding : oe(n, 0, 8)) : (r = f3.precision, n = f3.rounding), !e3.isFinite())
      c3 = Cs(e3);
    else {
      for (c3 = Pe(e3), s3 = c3.indexOf("."), g3 ? (i3 = 2, t == 16 ? r = r * 4 - 3 : t == 8 && (r = r * 3 - 2)) : i3 = t, s3 >= 0 && (c3 = c3.replace(".", ""), d3 = new f3(1), d3.e = c3.length - s3, d3.d = tn(Pe(d3), 10, i3), d3.e = d3.d.length), p3 = tn(c3, 10, i3), o = l3 = p3.length;p3[--l3] == 0; )
        p3.pop();
      if (!p3[0])
        c3 = g3 ? "0p+0" : "0";
      else {
        if (s3 < 0 ? o-- : (e3 = new f3(e3), e3.d = p3, e3.e = o, e3 = N(e3, d3, r, n, 0, i3), p3 = e3.d, o = e3.e, u = bs), s3 = p3[r], a = i3 / 2, u = u || p3[r + 1] !== undefined, u = n < 4 ? (s3 !== undefined || u) && (n === 0 || n === (e3.s < 0 ? 3 : 2)) : s3 > a || s3 === a && (n === 4 || u || n === 6 && p3[r - 1] & 1 || n === (e3.s < 0 ? 8 : 7)), p3.length = r, u)
          for (;++p3[--r] > i3 - 1; )
            p3[r] = 0, r || (++o, p3.unshift(1));
        for (l3 = p3.length;!p3[l3 - 1]; --l3)
          ;
        for (s3 = 0, c3 = "";s3 < l3; s3++)
          c3 += Ti.charAt(p3[s3]);
        if (g3) {
          if (l3 > 1)
            if (t == 16 || t == 8) {
              for (s3 = t == 16 ? 4 : 3, --l3;l3 % s3; l3++)
                c3 += "0";
              for (p3 = tn(c3, i3, t), l3 = p3.length;!p3[l3 - 1]; --l3)
                ;
              for (s3 = 1, c3 = "1.";s3 < l3; s3++)
                c3 += Ti.charAt(p3[s3]);
            } else
              c3 = c3.charAt(0) + "." + c3.slice(1);
          c3 = c3 + (o < 0 ? "p" : "p+") + o;
        } else if (o < 0) {
          for (;++o; )
            c3 = "0" + c3;
          c3 = "0." + c3;
        } else if (++o > l3)
          for (o -= l3;o--; )
            c3 += "0";
        else
          o < l3 && (c3 = c3.slice(0, o) + "." + c3.slice(o));
      }
      c3 = (t == 16 ? "0x" : t == 2 ? "0b" : t == 8 ? "0o" : "") + c3;
    }
    return e3.s < 0 ? "-" + c3 : c3;
  }
  function hs(e3, t) {
    if (e3.length > t)
      return e3.length = t, true;
  }
  function gc(e3) {
    return new this(e3).abs();
  }
  function hc(e3) {
    return new this(e3).acos();
  }
  function yc(e3) {
    return new this(e3).acosh();
  }
  function bc(e3, t) {
    return new this(e3).plus(t);
  }
  function Ec(e3) {
    return new this(e3).asin();
  }
  function wc(e3) {
    return new this(e3).asinh();
  }
  function xc(e3) {
    return new this(e3).atan();
  }
  function Pc(e3) {
    return new this(e3).atanh();
  }
  function vc(e3, t) {
    e3 = new this(e3), t = new this(t);
    var r, n = this.precision, i3 = this.rounding, o = n + 4;
    return !e3.s || !t.s ? r = new this(NaN) : !e3.d && !t.d ? (r = fe(this, o, 1).times(t.s > 0 ? 0.25 : 0.75), r.s = e3.s) : !t.d || e3.isZero() ? (r = t.s < 0 ? fe(this, n, i3) : new this(0), r.s = e3.s) : !e3.d || t.isZero() ? (r = fe(this, o, 1).times(0.5), r.s = e3.s) : t.s < 0 ? (this.precision = o, this.rounding = 1, r = this.atan(N(e3, t, o, 1)), t = fe(this, o, 1), this.precision = n, this.rounding = i3, r = e3.s < 0 ? r.minus(t) : r.plus(t)) : r = this.atan(N(e3, t, o, 1)), r;
  }
  function Tc(e3) {
    return new this(e3).cbrt();
  }
  function Rc(e3) {
    return y3(e3 = new this(e3), e3.e + 1, 2);
  }
  function Cc(e3, t, r) {
    return new this(e3).clamp(t, r);
  }
  function Sc(e3) {
    if (!e3 || typeof e3 != "object")
      throw Error(sn + "Object expected");
    var t, r, n, i3 = e3.defaults === true, o = ["precision", 1, He, "rounding", 0, 8, "toExpNeg", -Pt, 0, "toExpPos", 0, Pt, "maxE", 0, Pt, "minE", -Pt, 0, "modulo", 0, 9];
    for (t = 0;t < o.length; t += 3)
      if (r = o[t], i3 && (this[r] = Ri[r]), (n = e3[r]) !== undefined)
        if (ee(n) === n && n >= o[t + 1] && n <= o[t + 2])
          this[r] = n;
        else
          throw Error(We + r + ": " + n);
    if (r = "crypto", i3 && (this[r] = Ri[r]), (n = e3[r]) !== undefined)
      if (n === true || n === false || n === 0 || n === 1)
        if (n)
          if (typeof crypto < "u" && crypto && (crypto.getRandomValues || crypto.randomBytes))
            this[r] = true;
          else
            throw Error(ws);
        else
          this[r] = false;
      else
        throw Error(We + r + ": " + n);
    return this;
  }
  function Ac(e3) {
    return new this(e3).cos();
  }
  function Ic(e3) {
    return new this(e3).cosh();
  }
  function As(e3) {
    var t, r, n;
    function i3(o) {
      var s3, a, l3, u = this;
      if (!(u instanceof i3))
        return new i3(o);
      if (u.constructor = i3, ys(o)) {
        u.s = o.s, x3 ? !o.d || o.e > i3.maxE ? (u.e = NaN, u.d = null) : o.e < i3.minE ? (u.e = 0, u.d = [0]) : (u.e = o.e, u.d = o.d.slice()) : (u.e = o.e, u.d = o.d ? o.d.slice() : o.d);
        return;
      }
      if (l3 = typeof o, l3 === "number") {
        if (o === 0) {
          u.s = 1 / o < 0 ? -1 : 1, u.e = 0, u.d = [0];
          return;
        }
        if (o < 0 ? (o = -o, u.s = -1) : u.s = 1, o === ~~o && o < 1e7) {
          for (s3 = 0, a = o;a >= 10; a /= 10)
            s3++;
          x3 ? s3 > i3.maxE ? (u.e = NaN, u.d = null) : s3 < i3.minE ? (u.e = 0, u.d = [0]) : (u.e = s3, u.d = [o]) : (u.e = s3, u.d = [o]);
          return;
        } else if (o * 0 !== 0) {
          o || (u.s = NaN), u.e = NaN, u.d = null;
          return;
        }
        return Ai(u, o.toString());
      } else if (l3 !== "string")
        throw Error(We + o);
      return (a = o.charCodeAt(0)) === 45 ? (o = o.slice(1), u.s = -1) : (a === 43 && (o = o.slice(1)), u.s = 1), Ps.test(o) ? Ai(u, o) : mc(u, o);
    }
    if (i3.prototype = m3, i3.ROUND_UP = 0, i3.ROUND_DOWN = 1, i3.ROUND_CEIL = 2, i3.ROUND_FLOOR = 3, i3.ROUND_HALF_UP = 4, i3.ROUND_HALF_DOWN = 5, i3.ROUND_HALF_EVEN = 6, i3.ROUND_HALF_CEIL = 7, i3.ROUND_HALF_FLOOR = 8, i3.EUCLID = 9, i3.config = i3.set = Sc, i3.clone = As, i3.isDecimal = ys, i3.abs = gc, i3.acos = hc, i3.acosh = yc, i3.add = bc, i3.asin = Ec, i3.asinh = wc, i3.atan = xc, i3.atanh = Pc, i3.atan2 = vc, i3.cbrt = Tc, i3.ceil = Rc, i3.clamp = Cc, i3.cos = Ac, i3.cosh = Ic, i3.div = Oc, i3.exp = kc, i3.floor = Dc, i3.hypot = _c, i3.ln = Lc, i3.log = Fc, i3.log10 = Mc, i3.log2 = Nc, i3.max = $c, i3.min = qc, i3.mod = jc, i3.mul = Vc, i3.pow = Bc, i3.random = Uc, i3.round = Gc, i3.sign = Qc, i3.sin = Jc, i3.sinh = Wc, i3.sqrt = Hc, i3.sub = Kc, i3.sum = zc, i3.tan = Yc, i3.tanh = Zc, i3.trunc = Xc, e3 === undefined && (e3 = {}), e3 && e3.defaults !== true)
      for (n = ["precision", "rounding", "toExpNeg", "toExpPos", "maxE", "minE", "modulo", "crypto"], t = 0;t < n.length; )
        e3.hasOwnProperty(r = n[t++]) || (e3[r] = this[r]);
    return i3.config(e3), i3;
  }
  function Oc(e3, t) {
    return new this(e3).div(t);
  }
  function kc(e3) {
    return new this(e3).exp();
  }
  function Dc(e3) {
    return y3(e3 = new this(e3), e3.e + 1, 3);
  }
  function _c() {
    var e3, t, r = new this(0);
    for (x3 = false, e3 = 0;e3 < arguments.length; )
      if (t = new this(arguments[e3++]), t.d)
        r.d && (r = r.plus(t.times(t)));
      else {
        if (t.s)
          return x3 = true, new this(1 / 0);
        r = t;
      }
    return x3 = true, r.sqrt();
  }
  function ys(e3) {
    return e3 instanceof it || e3 && e3.toStringTag === xs || false;
  }
  function Lc(e3) {
    return new this(e3).ln();
  }
  function Fc(e3, t) {
    return new this(e3).log(t);
  }
  function Nc(e3) {
    return new this(e3).log(2);
  }
  function Mc(e3) {
    return new this(e3).log(10);
  }
  function $c() {
    return Rs(this, arguments, "lt");
  }
  function qc() {
    return Rs(this, arguments, "gt");
  }
  function jc(e3, t) {
    return new this(e3).mod(t);
  }
  function Vc(e3, t) {
    return new this(e3).mul(t);
  }
  function Bc(e3, t) {
    return new this(e3).pow(t);
  }
  function Uc(e3) {
    var t, r, n, i3, o = 0, s3 = new this(1), a = [];
    if (e3 === undefined ? e3 = this.precision : oe(e3, 1, He), n = Math.ceil(e3 / b), this.crypto)
      if (crypto.getRandomValues)
        for (t = crypto.getRandomValues(new Uint32Array(n));o < n; )
          i3 = t[o], i3 >= 4290000000 ? t[o] = crypto.getRandomValues(new Uint32Array(1))[0] : a[o++] = i3 % 1e7;
      else if (crypto.randomBytes) {
        for (t = crypto.randomBytes(n *= 4);o < n; )
          i3 = t[o] + (t[o + 1] << 8) + (t[o + 2] << 16) + ((t[o + 3] & 127) << 24), i3 >= 2140000000 ? crypto.randomBytes(4).copy(t, o) : (a.push(i3 % 1e7), o += 4);
        o = n / 4;
      } else
        throw Error(ws);
    else
      for (;o < n; )
        a[o++] = Math.random() * 1e7 | 0;
    for (n = a[--o], e3 %= b, n && e3 && (i3 = G(10, b - e3), a[o] = (n / i3 | 0) * i3);a[o] === 0; o--)
      a.pop();
    if (o < 0)
      r = 0, a = [0];
    else {
      for (r = -1;a[0] === 0; r -= b)
        a.shift();
      for (n = 1, i3 = a[0];i3 >= 10; i3 /= 10)
        n++;
      n < b && (r -= b - n);
    }
    return s3.e = r, s3.d = a, s3;
  }
  function Gc(e3) {
    return y3(e3 = new this(e3), e3.e + 1, this.rounding);
  }
  function Qc(e3) {
    return e3 = new this(e3), e3.d ? e3.d[0] ? e3.s : 0 * e3.s : e3.s || NaN;
  }
  function Jc(e3) {
    return new this(e3).sin();
  }
  function Wc(e3) {
    return new this(e3).sinh();
  }
  function Hc(e3) {
    return new this(e3).sqrt();
  }
  function Kc(e3, t) {
    return new this(e3).sub(t);
  }
  function zc() {
    var e3 = 0, t = arguments, r = new this(t[e3]);
    for (x3 = false;r.s && ++e3 < t.length; )
      r = r.plus(t[e3]);
    return x3 = true, y3(r, this.precision, this.rounding);
  }
  function Yc(e3) {
    return new this(e3).tan();
  }
  function Zc(e3) {
    return new this(e3).tanh();
  }
  function Xc(e3) {
    return y3(e3 = new this(e3), e3.e + 1, 1);
  }
  function Tt(e3) {
    return it.isDecimal(e3) ? true : e3 !== null && typeof e3 == "object" && typeof e3.s == "number" && typeof e3.e == "number" && typeof e3.toFixed == "function" && Array.isArray(e3.d);
  }
  function Rt(e3) {
    return e3 instanceof sr;
  }
  function It(e3) {
    return new Oi(ks(e3));
  }
  function ks(e3) {
    let t = new At;
    for (let [r, n] of Object.entries(e3)) {
      let i3 = new dn(r, Ds(n));
      t.addField(i3);
    }
    return t;
  }
  function Ds(e3) {
    if (typeof e3 == "string")
      return new J(JSON.stringify(e3));
    if (typeof e3 == "number" || typeof e3 == "boolean")
      return new J(String(e3));
    if (typeof e3 == "bigint")
      return new J(`${e3}n`);
    if (e3 === null)
      return new J("null");
    if (e3 === undefined)
      return new J("undefined");
    if (Tt(e3))
      return new J(`new Prisma.Decimal("${e3.toFixed()}")`);
    if (e3 instanceof Uint8Array)
      return Buffer.isBuffer(e3) ? new J(`Buffer.alloc(${e3.byteLength})`) : new J(`new Uint8Array(${e3.byteLength})`);
    if (e3 instanceof Date) {
      let t = en(e3) ? e3.toISOString() : "Invalid Date";
      return new J(`new Date("${t}")`);
    }
    return e3 instanceof Le ? new J(`Prisma.${e3._getName()}`) : Rt(e3) ? new J(`prisma.${fs(e3.modelName)}.\$fields.${e3.name}`) : Array.isArray(e3) ? tp(e3) : typeof e3 == "object" ? ks(e3) : new J(Object.prototype.toString.call(e3));
  }
  function tp(e3) {
    let t = new St;
    for (let r of e3)
      t.addItem(Ds(r));
    return t;
  }
  function mn(e3, t) {
    let r = t === "pretty" ? Is : pn, n = e3.renderAllMessages(r), i3 = new wt(0, { colors: r }).write(e3).toString();
    return { message: n, args: i3 };
  }
  function _s(e3) {
    if (e3 === undefined)
      return "";
    let t = It(e3);
    return new wt(0, { colors: pn }).write(t).toString();
  }
  function ot({ error: e3, user_facing_error: t }, r, n) {
    return t.error_code ? new V(np(t, n), { code: t.error_code, clientVersion: r, meta: t.meta, batchRequestIdx: t.batch_request_idx }) : new B(e3, { clientVersion: r, batchRequestIdx: t.batch_request_idx });
  }
  function np(e3, t) {
    let r = e3.message;
    return (t === "postgresql" || t === "postgres" || t === "mysql") && e3.error_code === rp && (r += `
Prisma Accelerate has built-in connection pooling to prevent such errors: https://pris.ly/client/error-accelerate`), r;
  }
  function Ls(e3) {
    var t = e3.split(`
`);
    return t.reduce(function(r, n) {
      var i3 = sp(n) || lp(n) || pp(n) || gp(n) || mp(n);
      return i3 && r.push(i3), r;
    }, []);
  }
  function sp(e3) {
    var t = ip.exec(e3);
    if (!t)
      return null;
    var r = t[2] && t[2].indexOf("native") === 0, n = t[2] && t[2].indexOf("eval") === 0, i3 = op.exec(t[2]);
    return n && i3 != null && (t[2] = i3[1], t[3] = i3[2], t[4] = i3[3]), { file: r ? null : t[2], methodName: t[1] || ar, arguments: r ? [t[2]] : [], lineNumber: t[3] ? +t[3] : null, column: t[4] ? +t[4] : null };
  }
  function lp(e3) {
    var t = ap.exec(e3);
    return t ? { file: t[2], methodName: t[1] || ar, arguments: [], lineNumber: +t[3], column: t[4] ? +t[4] : null } : null;
  }
  function pp(e3) {
    var t = up.exec(e3);
    if (!t)
      return null;
    var r = t[3] && t[3].indexOf(" > eval") > -1, n = cp.exec(t[3]);
    return r && n != null && (t[3] = n[1], t[4] = n[2], t[5] = null), { file: t[3], methodName: t[1] || ar, arguments: t[2] ? t[2].split(",") : [], lineNumber: t[4] ? +t[4] : null, column: t[5] ? +t[5] : null };
  }
  function mp(e3) {
    var t = dp.exec(e3);
    return t ? { file: t[3], methodName: t[1] || ar, arguments: [], lineNumber: +t[4], column: t[5] ? +t[5] : null } : null;
  }
  function gp(e3) {
    var t = fp.exec(e3);
    return t ? { file: t[2], methodName: t[1] || ar, arguments: [], lineNumber: +t[3], column: t[4] ? +t[4] : null } : null;
  }
  function ze(e3) {
    return e3 === "minimal" ? typeof $EnabledCallSite == "function" && e3 !== "minimal" ? new $EnabledCallSite : new ki : new Di;
  }
  function Ot(e3 = {}) {
    let t = yp(e3);
    return Object.entries(t).reduce((n, [i3, o]) => (Fs[i3] !== undefined ? n.select[i3] = { select: o } : n[i3] = o, n), { select: {} });
  }
  function yp(e3 = {}) {
    return typeof e3._count == "boolean" ? { ...e3, _count: { _all: e3._count } } : e3;
  }
  function fn(e3 = {}) {
    return (t) => (typeof e3._count == "boolean" && (t._count = t._count._all), t);
  }
  function Ns(e3, t) {
    let r = fn(e3);
    return t({ action: "aggregate", unpacker: r, argsMapper: Ot })(e3);
  }
  function bp(e3 = {}) {
    let { select: t, ...r } = e3;
    return typeof t == "object" ? Ot({ ...r, _count: t }) : Ot({ ...r, _count: { _all: true } });
  }
  function Ep(e3 = {}) {
    return typeof e3.select == "object" ? (t) => fn(e3)(t)._count : (t) => fn(e3)(t)._count._all;
  }
  function Ms(e3, t) {
    return t({ action: "count", unpacker: Ep(e3), argsMapper: bp })(e3);
  }
  function wp(e3 = {}) {
    let t = Ot(e3);
    if (Array.isArray(t.by))
      for (let r of t.by)
        typeof r == "string" && (t.select[r] = true);
    else
      typeof t.by == "string" && (t.select[t.by] = true);
    return t;
  }
  function xp(e3 = {}) {
    return (t) => (typeof e3?._count == "boolean" && t.forEach((r) => {
      r._count = r._count._all;
    }), t);
  }
  function $s(e3, t) {
    return t({ action: "groupBy", unpacker: xp(e3), argsMapper: wp })(e3);
  }
  function qs(e3, t, r) {
    if (t === "aggregate")
      return (n) => Ns(n, r);
    if (t === "count")
      return (n) => Ms(n, r);
    if (t === "groupBy")
      return (n) => $s(n, r);
  }
  function js(e3, t) {
    let r = t.fields.filter((i3) => !i3.relationName), n = gi(r, (i3) => i3.name);
    return new Proxy({}, { get(i3, o) {
      if (o in i3 || typeof o == "symbol")
        return i3[o];
      let s3 = n[o];
      if (s3)
        return new sr(e3, o, s3.type, s3.isList, s3.kind === "enum");
    }, ...Xr(Object.keys(n)) });
  }
  function Pp(e3, t) {
    return e3 === undefined || t === undefined ? [] : [...t, "select", e3];
  }
  function vp(e3, t, r) {
    return t === undefined ? e3 ?? {} : Bs(t, r, e3 || true);
  }
  function Li(e3, t, r, n, i3, o) {
    let a = e3._runtimeDataModel.models[t].fields.reduce((l3, u) => ({ ...l3, [u.name]: u }), {});
    return (l3) => {
      let u = ze(e3._errorFormat), c3 = Pp(n, i3), p3 = vp(l3, o, c3), d3 = r({ dataPath: c3, callsite: u })(p3), f3 = Tp(e3, t);
      return new Proxy(d3, { get(g3, h3) {
        if (!f3.includes(h3))
          return g3[h3];
        let T = [a[h3].type, r, h3], S = [c3, p3];
        return Li(e3, ...T, ...S);
      }, ...Xr([...f3, ...Object.getOwnPropertyNames(d3)]) });
    };
  }
  function Tp(e3, t) {
    return e3._runtimeDataModel.models[t].fields.filter((r) => r.kind === "object").map((r) => r.name);
  }
  function he(e3, t, r, n, i3) {
    this.type = e3, this.content = t, this.alias = r, this.length = (n || "").length | 0, this.greedy = !!i3;
  }
  function Sp(e3) {
    return Us[e3] || Rp;
  }
  function Gs(e3) {
    return Ap(e3, P.languages.javascript);
  }
  function Ap(e3, t) {
    return P.tokenize(e3, t).map((n) => he.stringify(n)).join("");
  }
  function Js(e3) {
    return (0, Qs.default)(e3);
  }
  function kp({ message: e3, originalMethod: t, isPanic: r, callArguments: n }) {
    return { functionName: `prisma.${t}()`, message: e3, isPanic: r ?? false, callArguments: n };
  }
  function Dp({ callsite: e3, message: t, originalMethod: r, isPanic: n, callArguments: i3 }, o) {
    let s3 = kp({ message: t, originalMethod: r, isPanic: n, callArguments: i3 });
    if (!e3 || typeof window < "u" || false)
      return s3;
    let a = e3.getLocation();
    if (!a || !a.lineNumber || !a.columnNumber)
      return s3;
    let l3 = Math.max(1, a.lineNumber - 3), u = hn.read(a.fileName)?.slice(l3, a.lineNumber), c3 = u?.lineAt(a.lineNumber);
    if (u && c3) {
      let p3 = Lp(c3), d3 = _p(c3);
      if (!d3)
        return s3;
      s3.functionName = `${d3.code})`, s3.location = a, n || (u = u.mapLineAt(a.lineNumber, (g3) => g3.slice(0, d3.openingBraceIndex))), u = o.highlightSource(u);
      let f3 = String(u.lastLineNumber).length;
      if (s3.contextLines = u.mapLines((g3, h3) => o.gray(String(h3).padStart(f3)) + " " + g3).mapLines((g3) => o.dim(g3)).prependSymbolAt(a.lineNumber, o.bold(o.red("\u2192"))), i3) {
        let g3 = p3 + f3 + 1;
        g3 += 2, s3.callArguments = (0, Hs.default)(i3, g3).slice(g3);
      }
    }
    return s3;
  }
  function _p(e3) {
    let t = Object.keys(Ge.ModelAction).join("|"), n = new RegExp(String.raw`\.(${t})\(`).exec(e3);
    if (n) {
      let i3 = n.index + n[0].length, o = e3.lastIndexOf(" ", n.index) + 1;
      return { code: e3.slice(o, i3), openingBraceIndex: i3 };
    }
    return null;
  }
  function Lp(e3) {
    let t = 0;
    for (let r = 0;r < e3.length; r++) {
      if (e3.charAt(r) !== " ")
        return t;
      t++;
    }
    return t;
  }
  function Fp({ functionName: e3, location: t, message: r, isPanic: n, contextLines: i3, callArguments: o }, s3) {
    let a = [""], l3 = t ? " in" : ":";
    if (n ? (a.push(s3.red(`Oops, an unknown error occurred! This is ${s3.bold("on us")}, you did nothing wrong.`)), a.push(s3.red(`It occurred in the ${s3.bold(`\`${e3}\``)} invocation${l3}`))) : a.push(s3.red(`Invalid ${s3.bold(`\`${e3}\``)} invocation${l3}`)), t && a.push(s3.underline(Np(t))), i3) {
      a.push("");
      let u = [i3.toString()];
      o && (u.push(o), u.push(s3.dim(")"))), a.push(u.join("")), o && a.push("");
    } else
      a.push(""), o && a.push(o), a.push("");
    return a.push(r), a.join(`
`);
  }
  function Np(e3) {
    let t = [e3.fileName];
    return e3.lineNumber && t.push(String(e3.lineNumber)), e3.columnNumber && t.push(String(e3.columnNumber)), t.join(":");
  }
  function kt(e3) {
    let t = e3.showColors ? Ip : Op, r;
    return r = Dp(e3, t), Fp(r, t);
  }
  function Ks(e3, t, r, n) {
    return e3 === Ge.ModelAction.findFirstOrThrow || e3 === Ge.ModelAction.findUniqueOrThrow ? Mp(t, r, n) : n;
  }
  function Mp(e3, t, r) {
    return async (n) => {
      if ("rejectOnNotFound" in n.args) {
        let o = kt({ originalMethod: n.clientMethod, callsite: n.callsite, message: "'rejectOnNotFound' option is not supported" });
        throw new H(o, { clientVersion: t });
      }
      return await r(n).catch((o) => {
        throw o instanceof V && o.code === "P2025" ? new _e(`No ${e3} found`, t) : o;
      });
    };
  }
  function Re(e3) {
    return e3.replace(/^./, (t) => t.toLowerCase());
  }
  function Fi(e3, t) {
    let r = e3._extensions.getAllModelExtensions(t) ?? {}, n = [jp(e3, t), Bp(e3, t), ir(r), re("name", () => t), re("$name", () => t), re("$parent", () => e3._appliedParent)];
    return xe({}, n);
  }
  function jp(e3, t) {
    let r = Re(t), n = Object.keys(Ge.ModelAction).concat("count");
    return { getKeys() {
      return n;
    }, getPropertyValue(i3) {
      let o = i3, s3 = (l3) => e3._request(l3);
      s3 = Ks(o, t, e3._clientVersion, s3);
      let a = (l3) => (u) => {
        let c3 = ze(e3._errorFormat);
        return e3._createPrismaPromise((p3) => {
          let d3 = { args: u, dataPath: [], action: o, model: t, clientMethod: `${r}.${i3}`, jsModelName: r, transaction: p3, callsite: c3 };
          return s3({ ...d3, ...l3 });
        });
      };
      return $p.includes(o) ? Li(e3, t, a) : Vp(i3) ? qs(e3, i3, a) : a({});
    } };
  }
  function Vp(e3) {
    return qp.includes(e3);
  }
  function Bp(e3, t) {
    return nt(re("fields", () => {
      let r = e3._runtimeDataModel.models[t];
      return js(t, r);
    }));
  }
  function zs(e3) {
    return e3.replace(/^./, (t) => t.toUpperCase());
  }
  function lr(e3) {
    let t = [Up(e3), re(Ni, () => e3), re("$parent", () => e3._appliedParent)], r = e3._extensions.getAllClientExtensions();
    return r && t.push(ir(r)), xe(e3, t);
  }
  function Up(e3) {
    let t = Object.keys(e3._runtimeDataModel.models), r = t.map(Re), n = [...new Set(t.concat(r))];
    return nt({ getKeys() {
      return n;
    }, getPropertyValue(i3) {
      let o = zs(i3);
      if (e3._runtimeDataModel.models[o] !== undefined)
        return Fi(e3, o);
      if (e3._runtimeDataModel.models[i3] !== undefined)
        return Fi(e3, i3);
    }, getPropertyDescriptor(i3) {
      if (!r.includes(i3))
        return { enumerable: false };
    } });
  }
  function Ys(e3) {
    return e3[Ni] ? e3[Ni] : e3;
  }
  function Zs(e3) {
    if (typeof e3 == "function")
      return e3(this);
    if (e3.client?.__AccelerateEngine) {
      let r = e3.client.__AccelerateEngine;
      this._originalClient._engine = new r(this._originalClient._accelerateEngineConfig);
    }
    let t = Object.create(this._originalClient, { _extensions: { value: this._extensions.append(e3) }, _appliedParent: { value: this, configurable: true }, $use: { value: undefined }, $on: { value: undefined } });
    return lr(t);
  }
  function Xs({ result: e3, modelName: t, select: r, omit: n, extensions: i3 }) {
    let o = i3.getAllComputedFields(t);
    if (!o)
      return e3;
    let s3 = [], a = [];
    for (let l3 of Object.values(o)) {
      if (n) {
        if (n[l3.name])
          continue;
        let u = l3.needs.filter((c3) => n[c3]);
        u.length > 0 && a.push(bt(u));
      } else if (r) {
        if (!r[l3.name])
          continue;
        let u = l3.needs.filter((c3) => !r[c3]);
        u.length > 0 && a.push(bt(u));
      }
      Gp(e3, l3.needs) && s3.push(Qp(l3, xe(e3, s3)));
    }
    return s3.length > 0 || a.length > 0 ? xe(e3, [...s3, ...a]) : e3;
  }
  function Gp(e3, t) {
    return t.every((r) => fi(e3, r));
  }
  function Qp(e3, t) {
    return nt(re(e3.name, () => e3.compute(t)));
  }
  function yn({ visitor: e3, result: t, args: r, runtimeDataModel: n, modelName: i3 }) {
    if (Array.isArray(t)) {
      for (let s3 = 0;s3 < t.length; s3++)
        t[s3] = yn({ result: t[s3], args: r, modelName: i3, runtimeDataModel: n, visitor: e3 });
      return t;
    }
    let o = e3(t, i3, r) ?? t;
    return r.include && ea({ includeOrSelect: r.include, result: o, parentModelName: i3, runtimeDataModel: n, visitor: e3 }), r.select && ea({ includeOrSelect: r.select, result: o, parentModelName: i3, runtimeDataModel: n, visitor: e3 }), o;
  }
  function ea({ includeOrSelect: e3, result: t, parentModelName: r, runtimeDataModel: n, visitor: i3 }) {
    for (let [o, s3] of Object.entries(e3)) {
      if (!s3 || t[o] == null)
        continue;
      let l3 = n.models[r].fields.find((c3) => c3.name === o);
      if (!l3 || l3.kind !== "object" || !l3.relationName)
        continue;
      let u = typeof s3 == "object" ? s3 : {};
      t[o] = yn({ visitor: i3, result: t[o], args: u, modelName: l3.type, runtimeDataModel: n });
    }
  }
  function ta({ result: e3, modelName: t, args: r, extensions: n, runtimeDataModel: i3, globalOmit: o }) {
    return n.isEmpty() || e3 == null || typeof e3 != "object" || !i3.models[t] ? e3 : yn({ result: e3, args: r ?? {}, modelName: t, runtimeDataModel: i3, visitor: (a, l3, u) => {
      let c3 = Re(l3);
      return Xs({ result: a, modelName: c3, select: u.select, omit: u.select ? undefined : { ...o?.[c3], ...u.omit }, extensions: n });
    } });
  }
  function ra(e3) {
    if (e3 instanceof ie)
      return Jp(e3);
    if (Array.isArray(e3)) {
      let r = [e3[0]];
      for (let n = 1;n < e3.length; n++)
        r[n] = ur(e3[n]);
      return r;
    }
    let t = {};
    for (let r in e3)
      t[r] = ur(e3[r]);
    return t;
  }
  function Jp(e3) {
    return new ie(e3.strings, e3.values);
  }
  function ur(e3) {
    if (typeof e3 != "object" || e3 == null || e3 instanceof Le || Rt(e3))
      return e3;
    if (Tt(e3))
      return new ve(e3.toFixed());
    if (xt(e3))
      return new Date(+e3);
    if (ArrayBuffer.isView(e3))
      return e3.slice(0);
    if (Array.isArray(e3)) {
      let t = e3.length, r;
      for (r = Array(t);t--; )
        r[t] = ur(e3[t]);
      return r;
    }
    if (typeof e3 == "object") {
      let t = {};
      for (let r in e3)
        r === "__proto__" ? Object.defineProperty(t, r, { value: ur(e3[r]), configurable: true, enumerable: true, writable: true }) : t[r] = ur(e3[r]);
      return t;
    }
    De(e3, "Unknown value");
  }
  function ia(e3, t, r, n = 0) {
    return e3._createPrismaPromise((i3) => {
      let o = t.customDataProxyFetch;
      return "transaction" in t && i3 !== undefined && (t.transaction?.kind === "batch" && t.transaction.lock.then(), t.transaction = i3), n === r.length ? e3._executeRequest(t) : r[n]({ model: t.model, operation: t.model ? t.action : t.clientMethod, args: ra(t.args ?? {}), __internalParams: t, query: (s3, a = t) => {
        let l3 = a.customDataProxyFetch;
        return a.customDataProxyFetch = la(o, l3), a.args = s3, ia(e3, a, r, n + 1);
      } });
    });
  }
  function oa(e3, t) {
    let { jsModelName: r, action: n, clientMethod: i3 } = t, o = r ? n : i3;
    if (e3._extensions.isEmpty())
      return e3._executeRequest(t);
    let s3 = e3._extensions.getAllQueryCallbacks(r ?? "$none", o);
    return ia(e3, t, s3);
  }
  function sa(e3) {
    return (t) => {
      let r = { requests: t }, n = t[0].extensions.getAllBatchQueryCallbacks();
      return n.length ? aa(r, n, 0, e3) : e3(r);
    };
  }
  function aa(e3, t, r, n) {
    if (r === t.length)
      return n(e3);
    let i3 = e3.customDataProxyFetch, o = e3.requests[0].transaction;
    return t[r]({ args: { queries: e3.requests.map((s3) => ({ model: s3.modelName, operation: s3.action, args: s3.args })), transaction: o ? { isolationLevel: o.kind === "batch" ? o.isolationLevel : undefined } : undefined }, __internalParams: e3, query(s3, a = e3) {
      let l3 = a.customDataProxyFetch;
      return a.customDataProxyFetch = la(i3, l3), aa(a, t, r + 1, n);
    } });
  }
  function la(e3 = na, t = na) {
    return (r) => e3(t(r));
  }
  function ca(e3, t, r) {
    let n = Re(r);
    return !t.result || !(t.result.$allModels || t.result[n]) ? e3 : Wp({ ...e3, ...ua(t.name, e3, t.result.$allModels), ...ua(t.name, e3, t.result[n]) });
  }
  function Wp(e3) {
    let t = new we, r = (n, i3) => t.getOrCreate(n, () => i3.has(n) ? [n] : (i3.add(n), e3[n] ? e3[n].needs.flatMap((o) => r(o, i3)) : [n]));
    return ht(e3, (n) => ({ ...n, needs: r(n.name, new Set) }));
  }
  function ua(e3, t, r) {
    return r ? ht(r, ({ needs: n, compute: i3 }, o) => ({ name: o, needs: n ? Object.keys(n).filter((s3) => n[s3]) : [], compute: Hp(t, o, i3) })) : {};
  }
  function Hp(e3, t, r) {
    let n = e3?.[t]?.compute;
    return n ? (i3) => r({ ...i3, [t]: n(i3) }) : r;
  }
  function pa(e3, t) {
    if (!t)
      return e3;
    let r = { ...e3 };
    for (let n of Object.values(t))
      if (e3[n.name])
        for (let i3 of n.needs)
          r[i3] = true;
    return r;
  }
  function da(e3, t) {
    if (!t)
      return e3;
    let r = { ...e3 };
    for (let n of Object.values(t))
      if (!e3[n.name])
        for (let i3 of n.needs)
          delete r[i3];
    return r;
  }
  function ga({ postinstall: e3, ciName: t, clientVersion: r }) {
    if (ma("checkPlatformCaching:postinstall", e3), ma("checkPlatformCaching:ciName", t), e3 === true && t && t in fa) {
      let n = `Prisma has detected that this project was built on ${t}, which caches dependencies. This leads to an outdated Prisma Client because Prisma's auto-generation isn't triggered. To fix this, make sure to run the \`prisma generate\` command during the build process.

Learn how: https://pris.ly/d/${fa[t]}-build`;
      throw console.error(n), new R(n, r);
    }
  }
  function ha(e3, t) {
    return e3 ? e3.datasources ? e3.datasources : e3.datasourceUrl ? { [t[0]]: { url: e3.datasourceUrl } } : {} : {};
  }
  function ya() {
    return typeof Netlify == "object" ? "netlify" : typeof EdgeRuntime == "string" ? "edge-light" : globalThis.navigator?.userAgent === Kp ? "workerd" : globalThis.Deno ? "deno" : globalThis.__lagon__ ? "lagon" : globalThis.process?.release?.name === zp ? "node" : globalThis.Bun ? "bun" : globalThis.fastly ? "fastly" : "unknown";
  }
  function wn() {
    let e3 = ya();
    return { id: e3, prettyName: Yp[e3] || e3, isEdge: ["workerd", "deno", "netlify", "edge-light"].includes(e3) };
  }
  function xn(e3) {
    let { runtimeBinaryTarget: t } = e3;
    return `Add "${t}" to \`binaryTargets\` in the "schema.prisma" file and run \`prisma generate\` after saving it:

${Zp(e3)}`;
  }
  function Zp(e3) {
    let { generator: t, generatorBinaryTargets: r, runtimeBinaryTarget: n } = e3, i3 = { fromEnvVar: null, value: n }, o = [...r, i3];
    return pi({ ...t, binaryTargets: o });
  }
  function Ye(e3) {
    let { runtimeBinaryTarget: t } = e3;
    return `Prisma Client could not locate the Query Engine for runtime "${t}".`;
  }
  function Ze(e3) {
    let { searchedLocations: t } = e3;
    return `The following locations have been searched:
${[...new Set(t)].map((i3) => `  ${i3}`).join(`
`)}`;
  }
  function ba(e3) {
    let { runtimeBinaryTarget: t } = e3;
    return `${Ye(e3)}

This happened because \`binaryTargets\` have been pinned, but the actual deployment also required "${t}".
${xn(e3)}

${Ze(e3)}`;
  }
  function Pn(e3) {
    return `We would appreciate if you could take the time to share some information with us.
Please help us by answering a few questions: https://pris.ly/${e3}`;
  }
  function vn(e3) {
    let { errorStack: t } = e3;
    return t?.match(/\/\.next|\/next@|\/next\//) ? `

We detected that you are using Next.js, learn how to fix this: https://pris.ly/d/engine-not-found-nextjs.` : "";
  }
  function Ea(e3) {
    let { queryEngineName: t } = e3;
    return `${Ye(e3)}${vn(e3)}

This is likely caused by a bundler that has not copied "${t}" next to the resulting bundle.
Ensure that "${t}" has been copied next to the bundle or in "${e3.expectedLocation}".

${Pn("engine-not-found-bundler-investigation")}

${Ze(e3)}`;
  }
  function wa(e3) {
    let { runtimeBinaryTarget: t, generatorBinaryTargets: r } = e3, n = r.find((i3) => i3.native);
    return `${Ye(e3)}

This happened because Prisma Client was generated for "${n?.value ?? "unknown"}", but the actual deployment required "${t}".
${xn(e3)}

${Ze(e3)}`;
  }
  function xa(e3) {
    let { queryEngineName: t } = e3;
    return `${Ye(e3)}${vn(e3)}

This is likely caused by tooling that has not copied "${t}" to the deployment folder.
Ensure that you ran \`prisma generate\` and that "${t}" has been copied to "${e3.expectedLocation}".

${Pn("engine-not-found-tooling-investigation")}

${Ze(e3)}`;
  }
  async function va(e3, t) {
    let r = { binary: process.env.PRISMA_QUERY_ENGINE_BINARY, library: process.env.PRISMA_QUERY_ENGINE_LIBRARY }[e3] ?? t.prismaPath;
    if (r !== undefined)
      return r;
    let { enginePath: n, searchedLocations: i3 } = await td(e3, t);
    if (Xp("enginePath", n), n !== undefined && e3 === "binary" && ni(n), n !== undefined)
      return t.prismaPath = n;
    let o = await tt(), s3 = t.generator?.binaryTargets ?? [], a = s3.some((d3) => d3.native), l3 = !s3.some((d3) => d3.value === o), u = __filename.match(ed()) === null, c3 = { searchedLocations: i3, generatorBinaryTargets: s3, generator: t.generator, runtimeBinaryTarget: o, queryEngineName: Ta(e3, o), expectedLocation: cr.default.relative(process.cwd(), t.dirname), errorStack: new Error().stack }, p3;
    throw a && l3 ? p3 = wa(c3) : l3 ? p3 = ba(c3) : u ? p3 = Ea(c3) : p3 = xa(c3), new R(p3, t.clientVersion);
  }
  async function td(engineType, config) {
    let binaryTarget = await tt(), searchedLocations = [], dirname = eval("__dirname"), searchLocations = [config.dirname, cr.default.resolve(dirname, ".."), config.generator?.output?.value ?? dirname, cr.default.resolve(dirname, "../../../.prisma/client"), "/tmp/prisma-engines", config.cwd];
    __filename.includes("resolveEnginePath") && searchLocations.push(Bo());
    for (let e3 of searchLocations) {
      let t = Ta(engineType, binaryTarget), r = cr.default.join(e3, t);
      if (searchedLocations.push(e3), Pa.default.existsSync(r))
        return { enginePath: r, searchedLocations };
    }
    return { enginePath: undefined, searchedLocations };
  }
  function Ta(e3, t) {
    return e3 === "library" ? Fr(t, "fs") : `query-engine-${t}${t === "windows" ? ".exe" : ""}`;
  }
  function Ra(e3) {
    return e3 ? e3.replace(/".*"/g, '"X"').replace(/[\s:\[]([+-]?([0-9]*[.])?[0-9]+)/g, (t) => `${t[0]}5`) : "";
  }
  function Ca(e3) {
    return e3.split(`
`).map((t) => t.replace(/^\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)\s*/, "").replace(/\+\d+\s*ms$/, "")).join(`
`);
  }
  function Aa({ title: e3, user: t = "prisma", repo: r = "prisma", template: n = "bug_report.yml", body: i3 }) {
    return (0, Sa.default)({ user: t, repo: r, template: n, title: e3, body: i3 });
  }
  function Ia({ version: e3, binaryTarget: t, title: r, description: n, engineVersion: i3, database: o, query: s3 }) {
    let a = bo(6000 - (s3?.length ?? 0)), l3 = Ca((0, Mi.default)(a)), u = n ? `# Description
\`\`\`
${n}
\`\`\`` : "", c3 = (0, Mi.default)(`Hi Prisma Team! My Prisma Client just crashed. This is the report:
## Versions

| Name            | Version            |
|-----------------|--------------------|
| Node            | ${process.version?.padEnd(19)}| 
| OS              | ${t?.padEnd(19)}|
| Prisma Client   | ${e3?.padEnd(19)}|
| Query Engine    | ${i3?.padEnd(19)}|
| Database        | ${o?.padEnd(19)}|

${u}

## Logs
\`\`\`
${l3}
\`\`\`

## Client Snippet
\`\`\`ts
// PLEASE FILL YOUR CODE SNIPPET HERE
\`\`\`

## Schema
\`\`\`prisma
// PLEASE ADD YOUR SCHEMA HERE IF POSSIBLE
\`\`\`

## Prisma Engine Query
\`\`\`
${s3 ? Ra(s3) : ""}
\`\`\`
`), p3 = Aa({ title: r, body: c3 });
    return `${r}

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.

${X(p3)}

If you want the Prisma team to look into it, please open the link above \uD83D\uDE4F
To increase the chance of success, please post your schema and a snippet of
how you used Prisma Client in the issue. 
`;
  }
  function Dt({ inlineDatasources: e3, overrideDatasources: t, env: r, clientVersion: n }) {
    let i3, o = Object.keys(e3)[0], s3 = e3[o]?.url, a = t[o]?.url;
    if (o === undefined ? i3 = undefined : a ? i3 = a : s3?.value ? i3 = s3.value : s3?.fromEnvVar && (i3 = r[s3.fromEnvVar]), s3?.fromEnvVar !== undefined && i3 === undefined)
      throw new R(`error: Environment variable not found: ${s3.fromEnvVar}.`, n);
    if (i3 === undefined)
      throw new R("error: Missing URL environment variable, value, or override.", n);
    return i3;
  }
  function A3(e3, t) {
    return { ...e3, isRetryable: t };
  }
  async function id(e3) {
    let t;
    try {
      t = await e3.text();
    } catch {
      return { type: "EmptyError" };
    }
    try {
      let r = JSON.parse(t);
      if (typeof r == "string")
        switch (r) {
          case "InternalDataProxyError":
            return { type: "DataProxyError", body: r };
          default:
            return { type: "UnknownTextError", body: r };
        }
      if (typeof r == "object" && r !== null) {
        if ("is_panic" in r && "message" in r && "error_code" in r)
          return { type: "QueryEngineError", body: r };
        if ("EngineNotStarted" in r || "InteractiveTransactionMisrouted" in r || "InvalidRequestError" in r) {
          let n = Object.values(r)[0].reason;
          return typeof n == "string" && !["SchemaMissing", "EngineVersionNotSupported"].includes(n) ? { type: "UnknownJsonError", body: r } : { type: "DataProxyError", body: r };
        }
      }
      return { type: "UnknownJsonError", body: r };
    } catch {
      return t === "" ? { type: "EmptyError" } : { type: "UnknownTextError", body: t };
    }
  }
  async function xr(e3, t) {
    if (e3.ok)
      return;
    let r = { clientVersion: t, response: e3 }, n = await id(e3);
    if (n.type === "QueryEngineError")
      throw new V(n.body.message, { code: n.body.error_code, clientVersion: t });
    if (n.type === "DataProxyError") {
      if (n.body === "InternalDataProxyError")
        throw new Lt(r, "Internal Data Proxy error");
      if ("EngineNotStarted" in n.body) {
        if (n.body.EngineNotStarted.reason === "SchemaMissing")
          return new lt(r);
        if (n.body.EngineNotStarted.reason === "EngineVersionNotSupported")
          throw new fr(r);
        if ("EngineStartupError" in n.body.EngineNotStarted.reason) {
          let { msg: i3, logs: o } = n.body.EngineNotStarted.reason.EngineStartupError;
          throw new mr(r, i3, o);
        }
        if ("KnownEngineStartupError" in n.body.EngineNotStarted.reason) {
          let { msg: i3, error_code: o } = n.body.EngineNotStarted.reason.KnownEngineStartupError;
          throw new R(i3, t, o);
        }
        if ("HealthcheckTimeout" in n.body.EngineNotStarted.reason) {
          let { logs: i3 } = n.body.EngineNotStarted.reason.HealthcheckTimeout;
          throw new dr(r, i3);
        }
      }
      if ("InteractiveTransactionMisrouted" in n.body) {
        let i3 = { IDParseError: "Could not parse interactive transaction ID", NoQueryEngineFoundError: "Could not find Query Engine for the specified host and transaction ID", TransactionStartError: "Could not start interactive transaction" };
        throw new hr(r, i3[n.body.InteractiveTransactionMisrouted.reason]);
      }
      if ("InvalidRequestError" in n.body)
        throw new yr(r, n.body.InvalidRequestError.reason);
    }
    if (e3.status === 401 || e3.status === 403)
      throw new Er(r, Ft(Bi, n));
    if (e3.status === 404)
      return new br(r, Ft(ji, n));
    if (e3.status === 429)
      throw new wr(r, Ft(Ui, n));
    if (e3.status === 504)
      throw new gr(r, Ft(qi, n));
    if (e3.status >= 500)
      throw new Lt(r, Ft(Vi, n));
    if (e3.status >= 400)
      throw new pr(r, Ft($i, n));
  }
  function Ft(e3, t) {
    return t.type === "EmptyError" ? e3 : `${e3}: ${JSON.stringify(t)}`;
  }
  function Oa(e3) {
    let t = Math.pow(2, e3) * 50, r = Math.ceil(Math.random() * t) - Math.ceil(t / 2), n = t + r;
    return new Promise((i3) => setTimeout(() => i3(n), n));
  }
  function ka(e3) {
    let t = new TextEncoder().encode(e3), r = "", n = t.byteLength, i3 = n % 3, o = n - i3, s3, a, l3, u, c3;
    for (let p3 = 0;p3 < o; p3 = p3 + 3)
      c3 = t[p3] << 16 | t[p3 + 1] << 8 | t[p3 + 2], s3 = (c3 & 16515072) >> 18, a = (c3 & 258048) >> 12, l3 = (c3 & 4032) >> 6, u = c3 & 63, r += Ne[s3] + Ne[a] + Ne[l3] + Ne[u];
    return i3 == 1 ? (c3 = t[o], s3 = (c3 & 252) >> 2, a = (c3 & 3) << 4, r += Ne[s3] + Ne[a] + "==") : i3 == 2 && (c3 = t[o] << 8 | t[o + 1], s3 = (c3 & 64512) >> 10, a = (c3 & 1008) >> 4, l3 = (c3 & 15) << 2, r += Ne[s3] + Ne[a] + Ne[l3] + "="), r;
  }
  function Da(e3) {
    if (!!e3.generator?.previewFeatures.some((r) => r.toLowerCase().includes("metrics")))
      throw new R("The `metrics` preview feature is not yet available with Accelerate.\nPlease remove `metrics` from the `previewFeatures` in your schema.\n\nMore information about Accelerate: https://pris.ly/d/accelerate", e3.clientVersion);
  }
  function od(e3) {
    return e3[0] * 1000 + e3[1] / 1e6;
  }
  function _a(e3) {
    return new Date(od(e3));
  }
  async function ut(e3, t, r = (n) => n) {
    let n = t.clientVersion;
    try {
      return typeof fetch == "function" ? await r(fetch)(e3, t) : await r(Gi)(e3, t);
    } catch (i3) {
      let o = i3.message ?? "Unknown error";
      throw new Pr(o, { clientVersion: n });
    }
  }
  function ad(e3) {
    return { ...e3.headers, "Content-Type": "application/json" };
  }
  function ld(e3) {
    return { method: e3.method, headers: ad(e3) };
  }
  function ud(e3, t) {
    return { text: () => Promise.resolve(Buffer.concat(e3).toString()), json: () => Promise.resolve().then(() => JSON.parse(Buffer.concat(e3).toString())), ok: t.statusCode >= 200 && t.statusCode <= 299, status: t.statusCode, url: t.url, headers: new Qi(t.headers) };
  }
  async function Gi(e3, t = {}) {
    let r = cd("https"), n = ld(t), i3 = [], { origin: o } = new URL(e3);
    return new Promise((s3, a) => {
      let l3 = r.request(e3, n, (u) => {
        let { statusCode: c3, headers: { location: p3 } } = u;
        c3 >= 301 && c3 <= 399 && p3 && (p3.startsWith("http") === false ? s3(Gi(`${o}${p3}`, t)) : s3(Gi(p3, t))), u.on("data", (d3) => i3.push(d3)), u.on("end", () => s3(ud(i3, u))), u.on("error", a);
      });
      l3.on("error", a), l3.end(t.body ?? "");
    });
  }
  async function dd(e3, t) {
    let r = La["@prisma/engines-version"], n = t.clientVersion ?? "unknown";
    if (process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION)
      return process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION;
    if (e3.includes("accelerate") && n !== "0.0.0" && n !== "in-memory")
      return n;
    let [i3, o] = n?.split("-") ?? [];
    if (o === undefined && pd.test(i3))
      return i3;
    if (o !== undefined || n === "0.0.0" || n === "in-memory") {
      if (e3.startsWith("localhost") || e3.startsWith("127.0.0.1"))
        return "0.0.0";
      let [s3] = r.split("-") ?? [], [a, l3, u] = s3.split("."), c3 = md(`<=${a}.${l3}.${u}`), p3 = await ut(c3, { clientVersion: n });
      if (!p3.ok)
        throw new Error(`Failed to fetch stable Prisma version, unpkg.com status ${p3.status} ${p3.statusText}, response body: ${await p3.text() || "<empty body>"}`);
      let d3 = await p3.text();
      Fa("length of body fetched from unpkg.com", d3.length);
      let f3;
      try {
        f3 = JSON.parse(d3);
      } catch (g3) {
        throw console.error("JSON.parse error: body fetched from unpkg.com: ", d3), g3;
      }
      return f3.version;
    }
    throw new at("Only `major.minor.patch` versions are supported by Accelerate.", { clientVersion: n });
  }
  async function Na(e3, t) {
    let r = await dd(e3, t);
    return Fa("version", r), r;
  }
  function md(e3) {
    return encodeURI(`https://unpkg.com/prisma@${e3}/package.json`);
  }
  function $a(e3) {
    if (e3?.kind === "itx")
      return e3.options.id;
  }
  function fd() {
    let e3 = globalThis;
    return e3[Hi] === undefined && (e3[Hi] = {}), e3[Hi];
  }
  function gd(e3) {
    let t = fd();
    if (t[e3] !== undefined)
      return t[e3];
    let r = qa.default.toNamespacedPath(e3), n = { exports: {} }, i3 = 0;
    return process.platform !== "win32" && (i3 = Ki.default.constants.dlopen.RTLD_LAZY | Ki.default.constants.dlopen.RTLD_DEEPBIND), process.dlopen(n, r, i3), t[e3] = n.exports, n.exports;
  }
  function yd(e3) {
    return e3.item_type === "query" && "query" in e3;
  }
  function bd(e3) {
    return "level" in e3 ? e3.level === "error" && e3.message === "PANIC" : false;
  }
  function Ed(e3) {
    return typeof e3 == "object" && e3 !== null && e3.error_code !== undefined;
  }
  function Yi(e3, t) {
    return Ia({ binaryTarget: e3.binaryTarget, title: t, version: e3.config.clientVersion, engineVersion: e3.versionInfo?.commit, database: e3.config.activeProvider, query: e3.lastQuery });
  }
  function Ua({ copyEngine: e3 = true }, t) {
    let r;
    try {
      r = Dt({ inlineDatasources: t.inlineDatasources, overrideDatasources: t.overrideDatasources, env: { ...t.env, ...process.env }, clientVersion: t.clientVersion });
    } catch {
    }
    e3 && r?.startsWith("prisma://") && Yt("recommend--no-engine", "In production, we recommend using `prisma generate --no-engine` (See: `prisma generate --help`)");
    let n = Wt(t.generator), i3 = !!(r?.startsWith("prisma://") || !e3), o = !!t.adapter, s3 = n === "library", a = n === "binary";
    if (i3 && o || o && false) {
      let l3;
      throw e3 ? r?.startsWith("prisma://") ? l3 = ["Prisma Client was configured to use the `adapter` option but the URL was a `prisma://` URL.", "Please either use the `prisma://` URL or remove the `adapter` from the Prisma Client constructor."] : l3 = ["Prisma Client was configured to use both the `adapter` and Accelerate, please chose one."] : l3 = ["Prisma Client was configured to use the `adapter` option but `prisma generate` was run with `--no-engine`.", "Please run `prisma generate` without `--no-engine` to be able to use Prisma Client with the adapter."], new H(l3.join(`
`), { clientVersion: t.clientVersion });
    }
    if (i3)
      return new vr(t);
    if (s3)
      return new Tr(t);
    throw new H("Invalid client engine type, please use `library` or `binary`", { clientVersion: t.clientVersion });
  }
  function Rn({ generator: e3 }) {
    return e3?.previewFeatures ?? [];
  }
  function Nt(e3) {
    return e3.substring(0, 1).toLowerCase() + e3.substring(1);
  }
  function Wa(e3, t, r) {
    let n = Ha(e3), i3 = wd(n), o = Pd(i3);
    o ? Cn(o, t, r) : t.addErrorMessage(() => "Unknown error");
  }
  function Ha(e3) {
    return e3.errors.flatMap((t) => t.kind === "Union" ? Ha(t) : [t]);
  }
  function wd(e3) {
    let t = new Map, r = [];
    for (let n of e3) {
      if (n.kind !== "InvalidArgumentType") {
        r.push(n);
        continue;
      }
      let i3 = `${n.selectionPath.join(".")}:${n.argumentPath.join(".")}`, o = t.get(i3);
      o ? t.set(i3, { ...n, argument: { ...n.argument, typeNames: xd(o.argument.typeNames, n.argument.typeNames) } }) : t.set(i3, n);
    }
    return r.push(...t.values()), r;
  }
  function xd(e3, t) {
    return [...new Set(e3.concat(t))];
  }
  function Pd(e3) {
    return hi(e3, (t, r) => {
      let n = Qa(t), i3 = Qa(r);
      return n !== i3 ? n - i3 : Ja(t) - Ja(r);
    });
  }
  function Qa(e3) {
    let t = 0;
    return Array.isArray(e3.selectionPath) && (t += e3.selectionPath.length), Array.isArray(e3.argumentPath) && (t += e3.argumentPath.length), t;
  }
  function Ja(e3) {
    switch (e3.kind) {
      case "InvalidArgumentValue":
      case "ValueTooLarge":
        return 20;
      case "InvalidArgumentType":
        return 10;
      case "RequiredArgumentMissing":
        return -10;
      default:
        return 0;
    }
  }
  function Cn(e3, t, r) {
    switch (e3.kind) {
      case "MutuallyExclusiveFields":
        vd(e3, t);
        break;
      case "IncludeOnScalar":
        Td(e3, t);
        break;
      case "EmptySelection":
        Rd(e3, t, r);
        break;
      case "UnknownSelectionField":
        Id(e3, t);
        break;
      case "UnknownArgument":
        Od(e3, t);
        break;
      case "UnknownInputField":
        kd(e3, t);
        break;
      case "RequiredArgumentMissing":
        Dd(e3, t);
        break;
      case "InvalidArgumentType":
        _d(e3, t);
        break;
      case "InvalidArgumentValue":
        Ld(e3, t);
        break;
      case "ValueTooLarge":
        Fd(e3, t);
        break;
      case "SomeFieldsMissing":
        Nd(e3, t);
        break;
      case "TooManyFieldsGiven":
        Md(e3, t);
        break;
      case "Union":
        Wa(e3, t, r);
        break;
      default:
        throw new Error("not implemented: " + e3.kind);
    }
  }
  function vd(e3, t) {
    let r = t.arguments.getDeepSubSelectionValue(e3.selectionPath)?.asObject();
    r && (r.getField(e3.firstField)?.markAsError(), r.getField(e3.secondField)?.markAsError()), t.addErrorMessage((n) => `Please ${n.bold("either")} use ${n.green(`\`${e3.firstField}\``)} or ${n.green(`\`${e3.secondField}\``)}, but ${n.red("not both")} at the same time.`);
  }
  function Td(e3, t) {
    let [r, n] = Cr(e3.selectionPath), i3 = e3.outputType, o = t.arguments.getDeepSelectionParent(r)?.value;
    if (o && (o.getField(n)?.markAsError(), i3))
      for (let s3 of i3.fields)
        s3.isRelation && o.addSuggestion(new ue(s3.name, "true"));
    t.addErrorMessage((s3) => {
      let a = `Invalid scalar field ${s3.red(`\`${n}\``)} for ${s3.bold("include")} statement`;
      return i3 ? a += ` on model ${s3.bold(i3.name)}. ${Sr(s3)}` : a += ".", a += `
Note that ${s3.bold("include")} statements only accept relation fields.`, a;
    });
  }
  function Rd(e3, t, r) {
    let n = t.arguments.getDeepSubSelectionValue(e3.selectionPath)?.asObject();
    if (n) {
      let i3 = n.getField("omit")?.value.asObject();
      if (i3) {
        Cd(e3, t, i3);
        return;
      }
      if (n.hasField("select")) {
        Sd(e3, t);
        return;
      }
    }
    if (r?.[Nt(e3.outputType.name)]) {
      Ad(e3, t);
      return;
    }
    t.addErrorMessage(() => `Unknown field at "${e3.selectionPath.join(".")} selection"`);
  }
  function Cd(e3, t, r) {
    r.removeAllFields();
    for (let n of e3.outputType.fields)
      r.addSuggestion(new ue(n.name, "false"));
    t.addErrorMessage((n) => `The ${n.red("omit")} statement includes every field of the model ${n.bold(e3.outputType.name)}. At least one field must be included in the result`);
  }
  function Sd(e3, t) {
    let r = e3.outputType, n = t.arguments.getDeepSelectionParent(e3.selectionPath)?.value, i3 = n?.isEmpty() ?? false;
    n && (n.removeAllFields(), Za(n, r)), t.addErrorMessage((o) => i3 ? `The ${o.red("`select`")} statement for type ${o.bold(r.name)} must not be empty. ${Sr(o)}` : `The ${o.red("`select`")} statement for type ${o.bold(r.name)} needs ${o.bold("at least one truthy value")}.`);
  }
  function Ad(e3, t) {
    let r = new Rr;
    for (let i3 of e3.outputType.fields)
      i3.isRelation || r.addField(i3.name, "false");
    let n = new ue("omit", r).makeRequired();
    if (e3.selectionPath.length === 0)
      t.arguments.addSuggestion(n);
    else {
      let [i3, o] = Cr(e3.selectionPath), a = t.arguments.getDeepSelectionParent(i3)?.value.asObject()?.getField(o);
      if (a) {
        let l3 = a?.value.asObject() ?? new At;
        l3.addSuggestion(n), a.value = l3;
      }
    }
    t.addErrorMessage((i3) => `The global ${i3.red("omit")} configuration excludes every field of the model ${i3.bold(e3.outputType.name)}. At least one field must be included in the result`);
  }
  function Id(e3, t) {
    let [r, n] = Cr(e3.selectionPath), i3 = t.arguments.getDeepSubSelectionValue(r)?.asObject(), o;
    if (i3) {
      let s3 = i3.getFieldValue("select")?.asObject(), a = i3.getFieldValue("include")?.asObject(), l3 = i3.getFieldValue("omit")?.asObject();
      s3?.hasField(n) ? (o = "select", s3.getField(n)?.markAsError(), Za(s3, e3.outputType)) : a?.hasField(n) ? (o = "include", a.getField(n)?.markAsError(), $d(a, e3.outputType)) : l3?.hasField(n) && (o = "omit", l3.getField(n)?.markAsError(), qd(l3, e3.outputType));
    }
    t.addErrorMessage((s3) => {
      let a = [`Unknown field ${s3.red(`\`${n}\``)}`];
      return o && a.push(`for ${s3.bold(o)} statement`), a.push(`on model ${s3.bold(`\`${e3.outputType.name}\``)}.`), a.push(Sr(s3)), a.join(" ");
    });
  }
  function Od(e3, t) {
    let r = e3.argumentPath[0], n = t.arguments.getDeepSubSelectionValue(e3.selectionPath)?.asObject();
    n && (n.getField(r)?.markAsError(), jd(n, e3.arguments)), t.addErrorMessage((i3) => za(i3, r, e3.arguments.map((o) => o.name)));
  }
  function kd(e3, t) {
    let [r, n] = Cr(e3.argumentPath), i3 = t.arguments.getDeepSubSelectionValue(e3.selectionPath)?.asObject();
    if (i3) {
      i3.getDeepField(e3.argumentPath)?.markAsError();
      let o = i3.getDeepFieldValue(r)?.asObject();
      o && Xa(o, e3.inputType);
    }
    t.addErrorMessage((o) => za(o, n, e3.inputType.fields.map((s3) => s3.name)));
  }
  function za(e3, t, r) {
    let n = [`Unknown argument \`${e3.red(t)}\`.`], i3 = Bd(t, r);
    return i3 && n.push(`Did you mean \`${e3.green(i3)}\`?`), r.length > 0 && n.push(Sr(e3)), n.join(" ");
  }
  function Dd(e3, t) {
    let r;
    t.addErrorMessage((l3) => r?.value instanceof J && r.value.text === "null" ? `Argument \`${l3.green(o)}\` must not be ${l3.red("null")}.` : `Argument \`${l3.green(o)}\` is missing.`);
    let n = t.arguments.getDeepSubSelectionValue(e3.selectionPath)?.asObject();
    if (!n)
      return;
    let [i3, o] = Cr(e3.argumentPath), s3 = new Rr, a = n.getDeepFieldValue(i3)?.asObject();
    if (a)
      if (r = a.getField(o), r && a.removeField(o), e3.inputTypes.length === 1 && e3.inputTypes[0].kind === "object") {
        for (let l3 of e3.inputTypes[0].fields)
          s3.addField(l3.name, l3.typeNames.join(" | "));
        a.addSuggestion(new ue(o, s3).makeRequired());
      } else {
        let l3 = e3.inputTypes.map(Ya).join(" | ");
        a.addSuggestion(new ue(o, l3).makeRequired());
      }
  }
  function Ya(e3) {
    return e3.kind === "list" ? `${Ya(e3.elementType)}[]` : e3.name;
  }
  function _d(e3, t) {
    let r = e3.argument.name, n = t.arguments.getDeepSubSelectionValue(e3.selectionPath)?.asObject();
    n && n.getDeepFieldValue(e3.argumentPath)?.markAsError(), t.addErrorMessage((i3) => {
      let o = Sn("or", e3.argument.typeNames.map((s3) => i3.green(s3)));
      return `Argument \`${i3.bold(r)}\`: Invalid value provided. Expected ${o}, provided ${i3.red(e3.inferredType)}.`;
    });
  }
  function Ld(e3, t) {
    let r = e3.argument.name, n = t.arguments.getDeepSubSelectionValue(e3.selectionPath)?.asObject();
    n && n.getDeepFieldValue(e3.argumentPath)?.markAsError(), t.addErrorMessage((i3) => {
      let o = [`Invalid value for argument \`${i3.bold(r)}\``];
      if (e3.underlyingError && o.push(`: ${e3.underlyingError}`), o.push("."), e3.argument.typeNames.length > 0) {
        let s3 = Sn("or", e3.argument.typeNames.map((a) => i3.green(a)));
        o.push(` Expected ${s3}.`);
      }
      return o.join("");
    });
  }
  function Fd(e3, t) {
    let r = e3.argument.name, n = t.arguments.getDeepSubSelectionValue(e3.selectionPath)?.asObject(), i3;
    if (n) {
      let s3 = n.getDeepField(e3.argumentPath)?.value;
      s3?.markAsError(), s3 instanceof J && (i3 = s3.text);
    }
    t.addErrorMessage((o) => {
      let s3 = ["Unable to fit value"];
      return i3 && s3.push(o.red(i3)), s3.push(`into a 64-bit signed integer for field \`${o.bold(r)}\``), s3.join(" ");
    });
  }
  function Nd(e3, t) {
    let r = e3.argumentPath[e3.argumentPath.length - 1], n = t.arguments.getDeepSubSelectionValue(e3.selectionPath)?.asObject();
    if (n) {
      let i3 = n.getDeepFieldValue(e3.argumentPath)?.asObject();
      i3 && Xa(i3, e3.inputType);
    }
    t.addErrorMessage((i3) => {
      let o = [`Argument \`${i3.bold(r)}\` of type ${i3.bold(e3.inputType.name)} needs`];
      return e3.constraints.minFieldCount === 1 ? e3.constraints.requiredFields ? o.push(`${i3.green("at least one of")} ${Sn("or", e3.constraints.requiredFields.map((s3) => `\`${i3.bold(s3)}\``))} arguments.`) : o.push(`${i3.green("at least one")} argument.`) : o.push(`${i3.green(`at least ${e3.constraints.minFieldCount}`)} arguments.`), o.push(Sr(i3)), o.join(" ");
    });
  }
  function Md(e3, t) {
    let r = e3.argumentPath[e3.argumentPath.length - 1], n = t.arguments.getDeepSubSelectionValue(e3.selectionPath)?.asObject(), i3 = [];
    if (n) {
      let o = n.getDeepFieldValue(e3.argumentPath)?.asObject();
      o && (o.markAsError(), i3 = Object.keys(o.getFields()));
    }
    t.addErrorMessage((o) => {
      let s3 = [`Argument \`${o.bold(r)}\` of type ${o.bold(e3.inputType.name)} needs`];
      return e3.constraints.minFieldCount === 1 && e3.constraints.maxFieldCount == 1 ? s3.push(`${o.green("exactly one")} argument,`) : e3.constraints.maxFieldCount == 1 ? s3.push(`${o.green("at most one")} argument,`) : s3.push(`${o.green(`at most ${e3.constraints.maxFieldCount}`)} arguments,`), s3.push(`but you provided ${Sn("and", i3.map((a) => o.red(a)))}. Please choose`), e3.constraints.maxFieldCount === 1 ? s3.push("one.") : s3.push(`${e3.constraints.maxFieldCount}.`), s3.join(" ");
    });
  }
  function Za(e3, t) {
    for (let r of t.fields)
      e3.hasField(r.name) || e3.addSuggestion(new ue(r.name, "true"));
  }
  function $d(e3, t) {
    for (let r of t.fields)
      r.isRelation && !e3.hasField(r.name) && e3.addSuggestion(new ue(r.name, "true"));
  }
  function qd(e3, t) {
    for (let r of t.fields)
      !e3.hasField(r.name) && !r.isRelation && e3.addSuggestion(new ue(r.name, "true"));
  }
  function jd(e3, t) {
    for (let r of t)
      e3.hasField(r.name) || e3.addSuggestion(new ue(r.name, r.typeNames.join(" | ")));
  }
  function Xa(e3, t) {
    if (t.kind === "object")
      for (let r of t.fields)
        e3.hasField(r.name) || e3.addSuggestion(new ue(r.name, r.typeNames.join(" | ")));
  }
  function Cr(e3) {
    let t = [...e3], r = t.pop();
    if (!r)
      throw new Error("unexpected empty path");
    return [t, r];
  }
  function Sr({ green: e3, enabled: t }) {
    return "Available options are " + (t ? `listed in ${e3("green")}` : "marked with ?") + ".";
  }
  function Sn(e3, t) {
    if (t.length === 1)
      return t[0];
    let r = [...t], n = r.pop();
    return `${r.join(", ")} ${e3} ${n}`;
  }
  function Bd(e3, t) {
    let r = 1 / 0, n;
    for (let i3 of t) {
      let o = (0, Ka.default)(e3, i3);
      o > Vd || o < r && (r = o, n = i3);
    }
    return n;
  }
  function An({ args: e3, errors: t, errorFormat: r, callsite: n, originalMethod: i3, clientVersion: o, globalOmit: s3 }) {
    let a = It(e3);
    for (let p3 of t)
      Cn(p3, a, s3);
    let { message: l3, args: u } = mn(a, r), c3 = kt({ message: l3, callsite: n, originalMethod: i3, showColors: r === "pretty", callArguments: u });
    throw new H(c3, { clientVersion: o });
  }
  function el({ modelName: e3, action: t, args: r, runtimeDataModel: n, extensions: i3, callsite: o, clientMethod: s3, errorFormat: a, clientVersion: l3, previewFeatures: u, globalOmit: c3 }) {
    let p3 = new Xi({ runtimeDataModel: n, modelName: e3, action: t, rootArgs: r, callsite: o, extensions: i3, selectionPath: [], argumentPath: [], originalMethod: s3, errorFormat: a, clientVersion: l3, previewFeatures: u, globalOmit: c3 });
    return { modelName: e3, action: Ud[t], query: Ar(r, p3) };
  }
  function Ar({ select: e3, include: t, ...r } = {}, n) {
    let i3;
    return n.isPreviewFeatureOn("omitApi") && (i3 = r.omit, delete r.omit), { arguments: rl(r, n), selection: Gd(e3, t, i3, n) };
  }
  function Gd(e3, t, r, n) {
    return e3 ? (t ? n.throwValidationError({ kind: "MutuallyExclusiveFields", firstField: "include", secondField: "select", selectionPath: n.getSelectionPath() }) : r && n.isPreviewFeatureOn("omitApi") && n.throwValidationError({ kind: "MutuallyExclusiveFields", firstField: "omit", secondField: "select", selectionPath: n.getSelectionPath() }), Hd(e3, n)) : Qd(n, t, r);
  }
  function Qd(e3, t, r) {
    let n = {};
    return e3.modelOrType && !e3.isRawAction() && (n.$composites = true, n.$scalars = true), t && Jd(n, t, e3), e3.isPreviewFeatureOn("omitApi") && Wd(n, r, e3), n;
  }
  function Jd(e3, t, r) {
    for (let [n, i3] of Object.entries(t)) {
      if (i3 === false) {
        e3[n] = false;
        continue;
      }
      let o = r.findField(n);
      if (o && o.kind !== "object" && r.throwValidationError({ kind: "IncludeOnScalar", selectionPath: r.getSelectionPath().concat(n), outputType: r.getOutputTypeDescription() }), o) {
        e3[n] = Ar(i3 === true ? {} : i3, r.nestSelection(n));
        continue;
      }
      if (i3 === true) {
        e3[n] = true;
        continue;
      }
      e3[n] = Ar(i3, r.nestSelection(n));
    }
  }
  function Wd(e3, t, r) {
    let n = r.getComputedFields(), i3 = { ...r.getGlobalOmit(), ...t }, o = da(i3, n);
    for (let [s3, a] of Object.entries(o)) {
      let l3 = r.findField(s3);
      n?.[s3] && !l3 || (e3[s3] = !a);
    }
  }
  function Hd(e3, t) {
    let r = {}, n = t.getComputedFields(), i3 = pa(e3, n);
    for (let [o, s3] of Object.entries(i3)) {
      let a = t.findField(o);
      if (!(n?.[o] && !a)) {
        if (s3 === false) {
          r[o] = false;
          continue;
        }
        if (s3 === true) {
          a?.kind === "object" ? r[o] = Ar({}, t.nestSelection(o)) : r[o] = true;
          continue;
        }
        r[o] = Ar(s3, t.nestSelection(o));
      }
    }
    return r;
  }
  function tl(e3, t) {
    if (e3 === null)
      return null;
    if (typeof e3 == "string" || typeof e3 == "number" || typeof e3 == "boolean")
      return e3;
    if (typeof e3 == "bigint")
      return { $type: "BigInt", value: String(e3) };
    if (xt(e3)) {
      if (en(e3))
        return { $type: "DateTime", value: e3.toISOString() };
      t.throwValidationError({ kind: "InvalidArgumentValue", selectionPath: t.getSelectionPath(), argumentPath: t.getArgumentPath(), argument: { name: t.getArgumentName(), typeNames: ["Date"] }, underlyingError: "Provided Date object is invalid" });
    }
    if (Rt(e3))
      return { $type: "FieldRef", value: { _ref: e3.name, _container: e3.modelName } };
    if (Array.isArray(e3))
      return Kd(e3, t);
    if (ArrayBuffer.isView(e3))
      return { $type: "Bytes", value: Buffer.from(e3).toString("base64") };
    if (zd(e3))
      return e3.values;
    if (Tt(e3))
      return { $type: "Decimal", value: e3.toFixed() };
    if (e3 instanceof Le) {
      if (e3 !== Yr.instances[e3._getName()])
        throw new Error("Invalid ObjectEnumValue");
      return { $type: "Enum", value: e3._getName() };
    }
    if (Yd(e3))
      return e3.toJSON();
    if (typeof e3 == "object")
      return rl(e3, t);
    t.throwValidationError({ kind: "InvalidArgumentValue", selectionPath: t.getSelectionPath(), argumentPath: t.getArgumentPath(), argument: { name: t.getArgumentName(), typeNames: [] }, underlyingError: `We could not serialize ${Object.prototype.toString.call(e3)} value. Serialize the object to JSON or implement a ".toJSON()" method on it` });
  }
  function rl(e3, t) {
    if (e3.$type)
      return { $type: "Raw", value: e3 };
    let r = {};
    for (let n in e3) {
      let i3 = e3[n];
      i3 !== undefined && (r[n] = tl(i3, t.nestArgument(n)));
    }
    return r;
  }
  function Kd(e3, t) {
    let r = [];
    for (let n = 0;n < e3.length; n++) {
      let i3 = t.nestArgument(String(n)), o = e3[n];
      o === undefined && t.throwValidationError({ kind: "InvalidArgumentValue", selectionPath: i3.getSelectionPath(), argumentPath: i3.getArgumentPath(), argument: { name: `${t.getArgumentName()}[${n}]`, typeNames: [] }, underlyingError: "Can not use `undefined` value within array. Use `null` or filter out `undefined` values" }), r.push(tl(o, i3));
    }
    return r;
  }
  function zd(e3) {
    return typeof e3 == "object" && e3 !== null && e3.__prismaRawParameters__ === true;
  }
  function Yd(e3) {
    return typeof e3 == "object" && e3 !== null && typeof e3.toJSON == "function";
  }
  function Ir(e3) {
    try {
      return ol(e3, "fast");
    } catch {
      return ol(e3, "slow");
    }
  }
  function ol(e3, t) {
    return JSON.stringify(e3.map((r) => Zd(r, t)));
  }
  function Zd(e3, t) {
    return typeof e3 == "bigint" ? { prisma__type: "bigint", prisma__value: e3.toString() } : xt(e3) ? { prisma__type: "date", prisma__value: e3.toJSON() } : ve.isDecimal(e3) ? { prisma__type: "decimal", prisma__value: e3.toJSON() } : Buffer.isBuffer(e3) ? { prisma__type: "bytes", prisma__value: e3.toString("base64") } : Xd(e3) || ArrayBuffer.isView(e3) ? { prisma__type: "bytes", prisma__value: Buffer.from(e3).toString("base64") } : typeof e3 == "object" && t === "slow" ? al(e3) : e3;
  }
  function Xd(e3) {
    return e3 instanceof ArrayBuffer || e3 instanceof SharedArrayBuffer ? true : typeof e3 == "object" && e3 !== null ? e3[Symbol.toStringTag] === "ArrayBuffer" || e3[Symbol.toStringTag] === "SharedArrayBuffer" : false;
  }
  function al(e3) {
    if (typeof e3 != "object" || e3 === null)
      return e3;
    if (typeof e3.toJSON == "function")
      return e3.toJSON();
    if (Array.isArray(e3))
      return e3.map(sl);
    let t = {};
    for (let r of Object.keys(e3))
      t[r] = sl(e3[r]);
    return t;
  }
  function sl(e3) {
    return typeof e3 == "bigint" ? e3.toString() : al(e3);
  }
  function eo(e3, t, r, n) {
    if (!(e3 !== "postgresql" && e3 !== "cockroachdb") && r.length > 0 && em.exec(t))
      throw new Error(`Running ALTER using ${n} is not supported
Using the example below you can still execute your query with Prisma, but please note that it is vulnerable to SQL injection attacks and requires you to take care of input sanitization.

Example:
  await prisma.$executeRawUnsafe(\`ALTER USER prisma WITH PASSWORD '\${password}'\`)

More Information: https://pris.ly/d/execute-raw
`);
  }
  function ro(e3) {
    return function(r) {
      let n, i3 = (o = e3) => {
        try {
          return o === undefined || o?.kind === "itx" ? n ??= pl(r(o)) : pl(r(o));
        } catch (s3) {
          return Promise.reject(s3);
        }
      };
      return { then(o, s3) {
        return i3().then(o, s3);
      }, catch(o) {
        return i3().catch(o);
      }, finally(o) {
        return i3().finally(o);
      }, requestTransaction(o) {
        let s3 = i3(o);
        return s3.requestTransaction ? s3.requestTransaction(o) : s3;
      }, [Symbol.toStringTag]: "PrismaPromise" };
    };
  }
  function pl(e3) {
    return typeof e3.then == "function" ? e3 : Promise.resolve(e3);
  }
  function ml(e3) {
    return e3.includes("tracing") ? new no : dl;
  }
  function fl(e3, t = () => {
  }) {
    let r, n = new Promise((i3) => r = i3);
    return { then(i3) {
      return --e3 === 0 && r(t()), i3?.(n);
    } };
  }
  function hl(e3) {
    return typeof e3 == "string" ? e3 : e3.reduce((t, r) => {
      let n = typeof r == "string" ? r : r.level;
      return n === "query" ? t : t && (r === "info" || t === "info") ? "info" : n;
    }, undefined);
  }
  function On(e3) {
    return typeof e3.batchRequestIdx == "number";
  }
  function kn(e3) {
    return e3 === null ? e3 : Array.isArray(e3) ? e3.map(kn) : typeof e3 == "object" ? rm(e3) ? nm(e3) : ht(e3, kn) : e3;
  }
  function rm(e3) {
    return e3 !== null && typeof e3 == "object" && typeof e3.$type == "string";
  }
  function nm({ $type: e3, value: t }) {
    switch (e3) {
      case "BigInt":
        return BigInt(t);
      case "Bytes":
        return Buffer.from(t, "base64");
      case "DateTime":
        return new Date(t);
      case "Decimal":
        return new ve(t);
      case "Json":
        return JSON.parse(t);
      default:
        De(t, "Unknown tagged value");
    }
  }
  function yl(e3) {
    if (e3.action !== "findUnique" && e3.action !== "findUniqueOrThrow")
      return;
    let t = [];
    return e3.modelName && t.push(e3.modelName), e3.query.arguments && t.push(io(e3.query.arguments)), t.push(io(e3.query.selection)), t.join("");
  }
  function io(e3) {
    return `(${Object.keys(e3).sort().map((r) => {
      let n = e3[r];
      return typeof n == "object" && n !== null ? `(${r} ${io(n)})` : r;
    }).join(" ")})`;
  }
  function oo(e3) {
    return im[e3];
  }
  function ct(e3, t) {
    if (t === null)
      return t;
    switch (e3) {
      case "bigint":
        return BigInt(t);
      case "bytes":
        return Buffer.from(t, "base64");
      case "decimal":
        return new ve(t);
      case "datetime":
      case "date":
        return new Date(t);
      case "time":
        return new Date(`1970-01-01T${t}Z`);
      case "bigint-array":
        return t.map((r) => ct("bigint", r));
      case "bytes-array":
        return t.map((r) => ct("bytes", r));
      case "decimal-array":
        return t.map((r) => ct("decimal", r));
      case "datetime-array":
        return t.map((r) => ct("datetime", r));
      case "date-array":
        return t.map((r) => ct("date", r));
      case "time-array":
        return t.map((r) => ct("time", r));
      default:
        return t;
    }
  }
  function bl(e3) {
    let t = [], r = om(e3);
    for (let n = 0;n < e3.rows.length; n++) {
      let i3 = e3.rows[n], o = { ...r };
      for (let s3 = 0;s3 < i3.length; s3++)
        o[e3.columns[s3]] = ct(e3.types[s3], i3[s3]);
      t.push(o);
    }
    return t;
  }
  function om(e3) {
    let t = {};
    for (let r = 0;r < e3.columns.length; r++)
      t[e3.columns[r]] = null;
    return t;
  }
  function am(e3) {
    if (e3) {
      if (e3.kind === "batch")
        return { kind: "batch", options: { isolationLevel: e3.isolationLevel } };
      if (e3.kind === "itx")
        return { kind: "itx", options: wl(e3) };
      De(e3, "Unknown transaction kind");
    }
  }
  function wl(e3) {
    return { id: e3.id, payload: e3.payload };
  }
  function lm(e3, t) {
    return On(e3) && t?.kind === "batch" && e3.batchRequestIdx !== t.index;
  }
  function um(e3) {
    return e3.code === "P2009" || e3.code === "P2012";
  }
  function xl(e3) {
    if (e3.kind === "Union")
      return { kind: "Union", errors: e3.errors.map(xl) };
    if (Array.isArray(e3.selectionPath)) {
      let [, ...t] = e3.selectionPath;
      return { ...e3, selectionPath: t };
    }
    return e3;
  }
  function Il(e3, t) {
    for (let [r, n] of Object.entries(e3)) {
      if (!Tl.includes(r)) {
        let i3 = Mt(r, Tl);
        throw new L3(`Unknown property ${r} provided to PrismaClient constructor.${i3}`);
      }
      pm[r](n, t);
    }
    if (e3.datasourceUrl && e3.datasources)
      throw new L3('Can not use "datasourceUrl" and "datasources" options at the same time. Pick one of them');
  }
  function Mt(e3, t) {
    if (t.length === 0 || typeof e3 != "string")
      return "";
    let r = dm(e3, t);
    return r ? ` Did you mean "${r}"?` : "";
  }
  function dm(e3, t) {
    if (t.length === 0)
      return null;
    let r = t.map((i3) => ({ value: i3, distance: (0, Al.default)(e3, i3) }));
    r.sort((i3, o) => i3.distance < o.distance ? -1 : 1);
    let n = r[0];
    return n.distance < 3 ? n.value : null;
  }
  function mm(e3, t) {
    return Sl(t.models, e3) ?? Sl(t.types, e3);
  }
  function Sl(e3, t) {
    let r = Object.keys(e3).find((n) => Nt(n) === t);
    if (r)
      return e3[r];
  }
  function fm(e3, t) {
    let r = It(e3);
    for (let o of t)
      switch (o.kind) {
        case "UnknownModel":
          r.arguments.getField(o.modelKey)?.markAsError(), r.addErrorMessage(() => `Unknown model name: ${o.modelKey}.`);
          break;
        case "UnknownField":
          r.arguments.getDeepField([o.modelKey, o.fieldName])?.markAsError(), r.addErrorMessage(() => `Model "${o.modelKey}" does not have a field named "${o.fieldName}".`);
          break;
        case "RelationInOmit":
          r.arguments.getDeepField([o.modelKey, o.fieldName])?.markAsError(), r.addErrorMessage(() => 'Relations are already excluded by default and can not be specified in "omit".');
          break;
        case "InvalidFieldValue":
          r.arguments.getDeepFieldValue([o.modelKey, o.fieldName])?.markAsError(), r.addErrorMessage(() => "Omit field option value must be a boolean.");
          break;
      }
    let { message: n, args: i3 } = mn(r, "colorless");
    return `Error validating "omit" option:

${i3}

${n}`;
  }
  function Ol(e3) {
    return e3.length === 0 ? Promise.resolve([]) : new Promise((t, r) => {
      let n = new Array(e3.length), i3 = null, o = false, s3 = 0, a = () => {
        o || (s3++, s3 === e3.length && (o = true, i3 ? r(i3) : t(n)));
      }, l3 = (u) => {
        o || (o = true, r(u));
      };
      for (let u = 0;u < e3.length; u++)
        e3[u].then((c3) => {
          n[u] = c3, a();
        }, (c3) => {
          if (!On(c3)) {
            l3(c3);
            return;
          }
          c3.batchRequestIdx === u ? l3(c3) : (i3 || (i3 = c3), a());
        });
    });
  }
  function Nl(e3) {

    class t {
      constructor(n) {
        this._originalClient = this;
        this._middlewares = new In;
        this._createPrismaPromise = ro();
        this.$extends = Zs;
        e3 = n?.__internal?.configOverride?.(e3) ?? e3, ga(e3), n && Il(n, e3);
        let i3 = new Ll.EventEmitter().on("error", () => {
        });
        this._extensions = En.empty(), this._previewFeatures = Rn(e3), this._clientVersion = e3.clientVersion ?? vl, this._activeProvider = e3.activeProvider, this._globalOmit = n?.omit, this._tracingHelper = ml(this._previewFeatures);
        let o = { rootEnvPath: e3.relativeEnvPaths.rootEnvPath && Or2.default.resolve(e3.dirname, e3.relativeEnvPaths.rootEnvPath), schemaEnvPath: e3.relativeEnvPaths.schemaEnvPath && Or2.default.resolve(e3.dirname, e3.relativeEnvPaths.schemaEnvPath) }, s3;
        if (n?.adapter) {
          s3 = xi(n.adapter);
          let l3 = e3.activeProvider === "postgresql" ? "postgres" : e3.activeProvider;
          if (s3.provider !== l3)
            throw new R(`The Driver Adapter \`${s3.adapterName}\`, based on \`${s3.provider}\`, is not compatible with the provider \`${l3}\` specified in the Prisma schema.`, this._clientVersion);
          if (n.datasources || n.datasourceUrl !== undefined)
            throw new R("Custom datasource configuration is not compatible with Prisma Driver Adapters. Please define the database connection string directly in the Driver Adapter configuration.", this._clientVersion);
        }
        let a = !s3 && Jt(o, { conflictCheck: "none" }) || e3.injectableEdgeEnv?.();
        try {
          let l3 = n ?? {}, u = l3.__internal ?? {}, c3 = u.debug === true;
          c3 && F.enable("prisma:client");
          let p3 = Or2.default.resolve(e3.dirname, e3.relativePath);
          Fl.default.existsSync(p3) || (p3 = e3.dirname), Xe("dirname", e3.dirname), Xe("relativePath", e3.relativePath), Xe("cwd", p3);
          let d3 = u.engine || {};
          if (l3.errorFormat ? this._errorFormat = l3.errorFormat : process.env.NO_COLOR ? this._errorFormat = "colorless" : this._errorFormat = "colorless", this._runtimeDataModel = e3.runtimeDataModel, this._engineConfig = { cwd: p3, dirname: e3.dirname, enableDebugLogs: c3, allowTriggerPanic: d3.allowTriggerPanic, datamodelPath: Or2.default.join(e3.dirname, e3.filename ?? "schema.prisma"), prismaPath: d3.binaryPath ?? undefined, engineEndpoint: d3.endpoint, generator: e3.generator, showColors: this._errorFormat === "pretty", logLevel: l3.log && hl(l3.log), logQueries: l3.log && !!(typeof l3.log == "string" ? l3.log === "query" : l3.log.find((f3) => typeof f3 == "string" ? f3 === "query" : f3.level === "query")), env: a?.parsed ?? {}, flags: [], engineWasm: e3.engineWasm, clientVersion: e3.clientVersion, engineVersion: e3.engineVersion, previewFeatures: this._previewFeatures, activeProvider: e3.activeProvider, inlineSchema: e3.inlineSchema, overrideDatasources: ha(l3, e3.datasourceNames), inlineDatasources: e3.inlineDatasources, inlineSchemaHash: e3.inlineSchemaHash, tracingHelper: this._tracingHelper, transactionOptions: { maxWait: l3.transactionOptions?.maxWait ?? 2000, timeout: l3.transactionOptions?.timeout ?? 5000, isolationLevel: l3.transactionOptions?.isolationLevel }, logEmitter: i3, isBundled: e3.isBundled, adapter: s3 }, this._accelerateEngineConfig = { ...this._engineConfig, accelerateUtils: { resolveDatasourceUrl: Dt, getBatchRequestPayload: Et, prismaGraphQLToJSError: ot, PrismaClientUnknownRequestError: B, PrismaClientInitializationError: R, PrismaClientKnownRequestError: V, debug: F("prisma:client:accelerateEngine"), engineVersion: Dl.version, clientVersion: e3.clientVersion } }, Xe("clientVersion", e3.clientVersion), this._engine = Ua(e3, this._engineConfig), this._requestHandler = new _n(this, i3), l3.log)
            for (let f3 of l3.log) {
              let g3 = typeof f3 == "string" ? f3 : f3.emit === "stdout" ? f3.level : null;
              g3 && this.$on(g3, (h3) => {
                zt.log(`${zt.tags[g3] ?? ""}`, h3.message || h3.query);
              });
            }
          this._metrics = new yt(this._engine);
        } catch (l3) {
          throw l3.clientVersion = this._clientVersion, l3;
        }
        return this._appliedParent = lr(this);
      }
      get [Symbol.toStringTag]() {
        return "PrismaClient";
      }
      $use(n) {
        this._middlewares.use(n);
      }
      $on(n, i3) {
        n === "beforeExit" ? this._engine.onBeforeExit(i3) : n && this._engineConfig.logEmitter.on(n, i3);
      }
      $connect() {
        try {
          return this._engine.start();
        } catch (n) {
          throw n.clientVersion = this._clientVersion, n;
        }
      }
      async $disconnect() {
        try {
          await this._engine.stop();
        } catch (n) {
          throw n.clientVersion = this._clientVersion, n;
        } finally {
          Eo();
        }
      }
      $executeRawInternal(n, i3, o, s3) {
        let a = this._activeProvider;
        return this._request({ action: "executeRaw", args: o, transaction: n, clientMethod: i3, argsMapper: to({ clientMethod: i3, activeProvider: a }), callsite: ze(this._errorFormat), dataPath: [], middlewareArgsMapper: s3 });
      }
      $executeRaw(n, ...i3) {
        return this._createPrismaPromise((o) => {
          if (n.raw !== undefined || n.sql !== undefined) {
            let [s3, a] = kl(n, i3);
            return eo(this._activeProvider, s3.text, s3.values, Array.isArray(n) ? "prisma.$executeRaw`<SQL>`" : "prisma.$executeRaw(sql`<SQL>`)"), this.$executeRawInternal(o, "$executeRaw", s3, a);
          }
          throw new H("`$executeRaw` is a tag function, please use it like the following:\n```\nconst result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`\n```\n\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#executeraw\n", { clientVersion: this._clientVersion });
        });
      }
      $executeRawUnsafe(n, ...i3) {
        return this._createPrismaPromise((o) => (eo(this._activeProvider, n, i3, "prisma.$executeRawUnsafe(<SQL>, [...values])"), this.$executeRawInternal(o, "$executeRawUnsafe", [n, ...i3])));
      }
      $runCommandRaw(n) {
        if (e3.activeProvider !== "mongodb")
          throw new H(`The ${e3.activeProvider} provider does not support \$runCommandRaw. Use the mongodb provider.`, { clientVersion: this._clientVersion });
        return this._createPrismaPromise((i3) => this._request({ args: n, clientMethod: "$runCommandRaw", dataPath: [], action: "runCommandRaw", argsMapper: nl, callsite: ze(this._errorFormat), transaction: i3 }));
      }
      async $queryRawInternal(n, i3, o, s3) {
        let a = this._activeProvider;
        return this._request({ action: "queryRaw", args: o, transaction: n, clientMethod: i3, argsMapper: to({ clientMethod: i3, activeProvider: a }), callsite: ze(this._errorFormat), dataPath: [], middlewareArgsMapper: s3 });
      }
      $queryRaw(n, ...i3) {
        return this._createPrismaPromise((o) => {
          if (n.raw !== undefined || n.sql !== undefined)
            return this.$queryRawInternal(o, "$queryRaw", ...kl(n, i3));
          throw new H("`$queryRaw` is a tag function, please use it like the following:\n```\nconst result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`\n```\n\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw\n", { clientVersion: this._clientVersion });
        });
      }
      $queryRawUnsafe(n, ...i3) {
        return this._createPrismaPromise((o) => this.$queryRawInternal(o, "$queryRawUnsafe", [n, ...i3]));
      }
      _transactionWithArray({ promises: n, options: i3 }) {
        let o = ym.nextId(), s3 = fl(n.length), a = n.map((l3, u) => {
          if (l3?.[Symbol.toStringTag] !== "PrismaPromise")
            throw new Error("All elements of the array need to be Prisma Client promises. Hint: Please make sure you are not awaiting the Prisma client calls you intended to pass in the $transaction function.");
          let c3 = i3?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel, p3 = { kind: "batch", id: o, index: u, isolationLevel: c3, lock: s3 };
          return l3.requestTransaction?.(p3) ?? l3;
        });
        return Ol(a);
      }
      async _transactionWithCallback({ callback: n, options: i3 }) {
        let o = { traceparent: this._tracingHelper.getTraceParent() }, s3 = { maxWait: i3?.maxWait ?? this._engineConfig.transactionOptions.maxWait, timeout: i3?.timeout ?? this._engineConfig.transactionOptions.timeout, isolationLevel: i3?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel }, a = await this._engine.transaction("start", o, s3), l3;
        try {
          let u = { kind: "itx", ...a };
          l3 = await n(this._createItxClient(u)), await this._engine.transaction("commit", o, a);
        } catch (u) {
          throw await this._engine.transaction("rollback", o, a).catch(() => {
          }), u;
        }
        return l3;
      }
      _createItxClient(n) {
        return lr(xe(Ys(this), [re("_appliedParent", () => this._appliedParent._createItxClient(n)), re("_createPrismaPromise", () => ro(n)), re(hm, () => n.id), bt(gl)]));
      }
      $transaction(n, i3) {
        let o;
        typeof n == "function" ? this._engineConfig.adapter?.adapterName === "@prisma/adapter-d1" ? o = () => {
          throw new Error("Cloudflare D1 does not support interactive transactions. We recommend you to refactor your queries with that limitation in mind, and use batch transactions with `prisma.$transactions([])` where applicable.");
        } : o = () => this._transactionWithCallback({ callback: n, options: i3 }) : o = () => this._transactionWithArray({ promises: n, options: i3 });
        let s3 = { name: "transaction", attributes: { method: "$transaction" } };
        return this._tracingHelper.runInChildSpan(s3, o);
      }
      _request(n) {
        n.otelParentCtx = this._tracingHelper.getActiveContext();
        let i3 = n.middlewareArgsMapper ?? gm, o = { args: i3.requestArgsToMiddlewareArgs(n.args), dataPath: n.dataPath, runInTransaction: !!n.transaction, action: n.action, model: n.model }, s3 = { middleware: { name: "middleware", middleware: true, attributes: { method: "$use" }, active: false }, operation: { name: "operation", attributes: { method: o.action, model: o.model, name: o.model ? `${o.model}.${o.action}` : o.action } } }, a = -1, l3 = async (u) => {
          let c3 = this._middlewares.get(++a);
          if (c3)
            return this._tracingHelper.runInChildSpan(s3.middleware, (O) => c3(u, (T) => (O?.end(), l3(T))));
          let { runInTransaction: p3, args: d3, ...f3 } = u, g3 = { ...n, ...f3 };
          d3 && (g3.args = i3.middlewareArgsToRequestArgs(d3)), n.transaction !== undefined && p3 === false && delete g3.transaction;
          let h3 = await oa(this, g3);
          return g3.model ? ta({ result: h3, modelName: g3.model, args: g3.args, extensions: this._extensions, runtimeDataModel: this._runtimeDataModel, globalOmit: this._globalOmit }) : h3;
        };
        return this._tracingHelper.runInChildSpan(s3.operation, () => new _l.AsyncResource("prisma-client-request").runInAsyncScope(() => l3(o)));
      }
      async _executeRequest({ args: n, clientMethod: i3, dataPath: o, callsite: s3, action: a, model: l3, argsMapper: u, transaction: c3, unpacker: p3, otelParentCtx: d3, customDataProxyFetch: f3 }) {
        try {
          n = u ? u(n) : n;
          let g3 = { name: "serialize" }, h3 = this._tracingHelper.runInChildSpan(g3, () => el({ modelName: l3, runtimeDataModel: this._runtimeDataModel, action: a, args: n, clientMethod: i3, callsite: s3, extensions: this._extensions, errorFormat: this._errorFormat, clientVersion: this._clientVersion, previewFeatures: this._previewFeatures, globalOmit: this._globalOmit }));
          return F.enabled("prisma:client") && (Xe("Prisma Client call:"), Xe(`prisma.${i3}(${_s(n)})`), Xe("Generated request:"), Xe(JSON.stringify(h3, null, 2) + `
`)), c3?.kind === "batch" && await c3.lock, this._requestHandler.request({ protocolQuery: h3, modelName: l3, action: a, clientMethod: i3, dataPath: o, callsite: s3, args: n, extensions: this._extensions, transaction: c3, unpacker: p3, otelParentCtx: d3, otelChildCtx: this._tracingHelper.getActiveContext(), globalOmit: this._globalOmit, customDataProxyFetch: f3 });
        } catch (g3) {
          throw g3.clientVersion = this._clientVersion, g3;
        }
      }
      get $metrics() {
        if (!this._hasPreviewFlag("metrics"))
          throw new H("`metrics` preview feature must be enabled in order to access metrics API", { clientVersion: this._clientVersion });
        return this._metrics;
      }
      _hasPreviewFlag(n) {
        return !!this._engineConfig.previewFeatures?.includes(n);
      }
      $applyPendingMigrations() {
        return this._engine.applyPendingMigrations();
      }
    }
    return t;
  }
  function kl(e3, t) {
    return bm(e3) ? [new ie(e3, t), ul] : [e3, cl];
  }
  function bm(e3) {
    return Array.isArray(e3) && Array.isArray(e3.raw);
  }
  function Ml(e3) {
    return new Proxy(e3, { get(t, r) {
      if (r in t)
        return t[r];
      if (!Em.has(r))
        throw new TypeError(`Invalid enum value: ${String(r)}`);
    } });
  }
  function $l(e3) {
    Jt(e3, { conflictCheck: "warn" });
  }
  var __dirname = "/root/dev/prisma-test/node_modules/@prisma/client/runtime", __filename = "/root/dev/prisma-test/node_modules/@prisma/client/runtime/library.js";
  var ql = Object.create;
  var Dr = Object.defineProperty;
  var jl = Object.getOwnPropertyDescriptor;
  var Vl = Object.getOwnPropertyNames;
  var Bl = Object.getPrototypeOf;
  var Ul = Object.prototype.hasOwnProperty;
  var Z = (e3, t) => () => (t || e3((t = { exports: {} }).exports, t), t.exports);
  var qt = (e3, t) => {
    for (var r in t)
      Dr(e3, r, { get: t[r], enumerable: true });
  };
  var so = (e3, t, r, n) => {
    if (t && typeof t == "object" || typeof t == "function")
      for (let i3 of Vl(t))
        !Ul.call(e3, i3) && i3 !== r && Dr(e3, i3, { get: () => t[i3], enumerable: !(n = jl(t, i3)) || n.enumerable });
    return e3;
  };
  var k = (e3, t, r) => (r = e3 != null ? ql(Bl(e3)) : {}, so(t || !e3 || !e3.__esModule ? Dr(r, "default", { value: e3, enumerable: true }) : r, e3));
  var Gl = (e3) => so(Dr({}, "__esModule", { value: true }), e3);
  var ko = Z((Hm, Wn) => {
    var v3 = Wn.exports;
    Wn.exports.default = v3;
    var D = "\x1B[", Gt = "\x1B]", mt = "\x07", Br = ";", Oo = false;
    v3.cursorTo = (e3, t) => {
      if (typeof e3 != "number")
        throw new TypeError("The `x` argument is required");
      return typeof t != "number" ? D + (e3 + 1) + "G" : D + (t + 1) + ";" + (e3 + 1) + "H";
    };
    v3.cursorMove = (e3, t) => {
      if (typeof e3 != "number")
        throw new TypeError("The `x` argument is required");
      let r = "";
      return e3 < 0 ? r += D + -e3 + "D" : e3 > 0 && (r += D + e3 + "C"), t < 0 ? r += D + -t + "A" : t > 0 && (r += D + t + "B"), r;
    };
    v3.cursorUp = (e3 = 1) => D + e3 + "A";
    v3.cursorDown = (e3 = 1) => D + e3 + "B";
    v3.cursorForward = (e3 = 1) => D + e3 + "C";
    v3.cursorBackward = (e3 = 1) => D + e3 + "D";
    v3.cursorLeft = D + "G";
    v3.cursorSavePosition = Oo ? "\x1B7" : D + "s";
    v3.cursorRestorePosition = Oo ? "\x1B8" : D + "u";
    v3.cursorGetPosition = D + "6n";
    v3.cursorNextLine = D + "E";
    v3.cursorPrevLine = D + "F";
    v3.cursorHide = D + "?25l";
    v3.cursorShow = D + "?25h";
    v3.eraseLines = (e3) => {
      let t = "";
      for (let r = 0;r < e3; r++)
        t += v3.eraseLine + (r < e3 - 1 ? v3.cursorUp() : "");
      return e3 && (t += v3.cursorLeft), t;
    };
    v3.eraseEndLine = D + "K";
    v3.eraseStartLine = D + "1K";
    v3.eraseLine = D + "2K";
    v3.eraseDown = D + "J";
    v3.eraseUp = D + "1J";
    v3.eraseScreen = D + "2J";
    v3.scrollUp = D + "S";
    v3.scrollDown = D + "T";
    v3.clearScreen = "\x1Bc";
    v3.clearTerminal = process.platform === "win32" ? `${v3.eraseScreen}${D}0f` : `${v3.eraseScreen}${D}3J${D}H`;
    v3.beep = mt;
    v3.link = (e3, t) => [Gt, "8", Br, Br, t, mt, e3, Gt, "8", Br, Br, mt].join("");
    v3.image = (e3, t = {}) => {
      let r = `${Gt}1337;File=inline=1`;
      return t.width && (r += `;width=${t.width}`), t.height && (r += `;height=${t.height}`), t.preserveAspectRatio === false && (r += ";preserveAspectRatio=0"), r + ":" + e3.toString("base64") + mt;
    };
    v3.iTerm = { setCwd: (e3 = process.cwd()) => `${Gt}50;CurrentDir=${e3}${mt}`, annotation: (e3, t = {}) => {
      let r = `${Gt}1337;`, n = typeof t.x < "u", i3 = typeof t.y < "u";
      if ((n || i3) && !(n && i3 && typeof t.length < "u"))
        throw new Error("`x`, `y` and `length` must be defined when `x` or `y` is defined");
      return e3 = e3.replace(/\|/g, ""), r += t.isHidden ? "AddHiddenAnnotation=" : "AddAnnotation=", t.length > 0 ? r += (n ? [e3, t.length, t.x, t.y] : [t.length, e3]).join("|") : r += e3, r + mt;
    } };
  });
  var Hn = Z((Km, Do) => {
    Do.exports = (e3, t = process.argv) => {
      let r = e3.startsWith("-") ? "" : e3.length === 1 ? "-" : "--", n = t.indexOf(r + e3), i3 = t.indexOf("--");
      return n !== -1 && (i3 === -1 || n < i3);
    };
  });
  var Fo = Z((zm, Lo) => {
    var Iu = import.meta.require("os"), _o = import.meta.require("tty"), de = Hn(), { env: Q } = process, Ue;
    de("no-color") || de("no-colors") || de("color=false") || de("color=never") ? Ue = 0 : (de("color") || de("colors") || de("color=true") || de("color=always")) && (Ue = 1);
    "FORCE_COLOR" in Q && (Q.FORCE_COLOR === "true" ? Ue = 1 : Q.FORCE_COLOR === "false" ? Ue = 0 : Ue = Q.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(Q.FORCE_COLOR, 10), 3));
    function Kn(e3) {
      return e3 === 0 ? false : { level: e3, hasBasic: true, has256: e3 >= 2, has16m: e3 >= 3 };
    }
    function zn(e3, t) {
      if (Ue === 0)
        return 0;
      if (de("color=16m") || de("color=full") || de("color=truecolor"))
        return 3;
      if (de("color=256"))
        return 2;
      if (e3 && !t && Ue === undefined)
        return 0;
      let r = Ue || 0;
      if (Q.TERM === "dumb")
        return r;
      if (process.platform === "win32") {
        let n = Iu.release().split(".");
        return Number(n[0]) >= 10 && Number(n[2]) >= 10586 ? Number(n[2]) >= 14931 ? 3 : 2 : 1;
      }
      if ("CI" in Q)
        return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((n) => (n in Q)) || Q.CI_NAME === "codeship" ? 1 : r;
      if ("TEAMCITY_VERSION" in Q)
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(Q.TEAMCITY_VERSION) ? 1 : 0;
      if (Q.COLORTERM === "truecolor")
        return 3;
      if ("TERM_PROGRAM" in Q) {
        let n = parseInt((Q.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (Q.TERM_PROGRAM) {
          case "iTerm.app":
            return n >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      return /-256(color)?$/i.test(Q.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(Q.TERM) || ("COLORTERM" in Q) ? 1 : r;
    }
    function Ou(e3) {
      let t = zn(e3, e3 && e3.isTTY);
      return Kn(t);
    }
    Lo.exports = { supportsColor: Ou, stdout: Kn(zn(true, _o.isatty(1))), stderr: Kn(zn(true, _o.isatty(2))) };
  });
  var $o = Z((Ym, Mo) => {
    var ku = Fo(), ft = Hn();
    function No(e3) {
      if (/^\d{3,4}$/.test(e3)) {
        let r = /(\d{1,2})(\d{2})/.exec(e3);
        return { major: 0, minor: parseInt(r[1], 10), patch: parseInt(r[2], 10) };
      }
      let t = (e3 || "").split(".").map((r) => parseInt(r, 10));
      return { major: t[0], minor: t[1], patch: t[2] };
    }
    function Yn(e3) {
      let { env: t } = process;
      if ("FORCE_HYPERLINK" in t)
        return !(t.FORCE_HYPERLINK.length > 0 && parseInt(t.FORCE_HYPERLINK, 10) === 0);
      if (ft("no-hyperlink") || ft("no-hyperlinks") || ft("hyperlink=false") || ft("hyperlink=never"))
        return false;
      if (ft("hyperlink=true") || ft("hyperlink=always") || "NETLIFY" in t)
        return true;
      if (!ku.supportsColor(e3) || e3 && !e3.isTTY || process.platform === "win32" || "CI" in t || "TEAMCITY_VERSION" in t)
        return false;
      if ("TERM_PROGRAM" in t) {
        let r = No(t.TERM_PROGRAM_VERSION);
        switch (t.TERM_PROGRAM) {
          case "iTerm.app":
            return r.major === 3 ? r.minor >= 1 : r.major > 3;
          case "WezTerm":
            return r.major >= 20200620;
          case "vscode":
            return r.major > 1 || r.major === 1 && r.minor >= 72;
        }
      }
      if ("VTE_VERSION" in t) {
        if (t.VTE_VERSION === "0.50.0")
          return false;
        let r = No(t.VTE_VERSION);
        return r.major > 0 || r.minor >= 50;
      }
      return false;
    }
    Mo.exports = { supportsHyperlink: Yn, stdout: Yn(process.stdout), stderr: Yn(process.stderr) };
  });
  var jo = Z((Zm, Qt) => {
    var Du = ko(), Zn = $o(), qo = (e3, t, { target: r = "stdout", ...n } = {}) => Zn[r] ? Du.link(e3, t) : n.fallback === false ? e3 : typeof n.fallback == "function" ? n.fallback(e3, t) : `${e3} (\u200B${t}\u200B)`;
    Qt.exports = (e3, t, r = {}) => qo(e3, t, r);
    Qt.exports.stderr = (e3, t, r = {}) => qo(e3, t, { target: "stderr", ...r });
    Qt.exports.isSupported = Zn.stdout;
    Qt.exports.stderr.isSupported = Zn.stderr;
  });
  var ei = Z((uf, _u) => {
    _u.exports = { name: "@prisma/engines-version", version: "5.18.0-25.4c784e32044a8a016d99474bd02a3b6123742169", main: "index.js", types: "index.d.ts", license: "Apache-2.0", author: "Tim Suchanek <suchanek@prisma.io>", prisma: { enginesVersion: "4c784e32044a8a016d99474bd02a3b6123742169" }, repository: { type: "git", url: "https://github.com/prisma/engines-wrapper.git", directory: "packages/engines-version" }, devDependencies: { "@types/node": "18.19.34", typescript: "4.9.5" }, files: ["index.js", "index.d.ts"], scripts: { build: "tsc -d" } };
  });
  var ti = Z((Ur) => {
    Object.defineProperty(Ur, "__esModule", { value: true });
    Ur.enginesVersion = undefined;
    Ur.enginesVersion = ei().prisma.enginesVersion;
  });
  var Go = Z((Af, Nu) => {
    Nu.exports = { name: "dotenv", version: "16.0.3", description: "Loads environment variables from .env file", main: "lib/main.js", types: "lib/main.d.ts", exports: { ".": { require: "./lib/main.js", types: "./lib/main.d.ts", default: "./lib/main.js" }, "./config": "./config.js", "./config.js": "./config.js", "./lib/env-options": "./lib/env-options.js", "./lib/env-options.js": "./lib/env-options.js", "./lib/cli-options": "./lib/cli-options.js", "./lib/cli-options.js": "./lib/cli-options.js", "./package.json": "./package.json" }, scripts: { "dts-check": "tsc --project tests/types/tsconfig.json", lint: "standard", "lint-readme": "standard-markdown", pretest: "npm run lint && npm run dts-check", test: "tap tests/*.js --100 -Rspec", prerelease: "npm test", release: "standard-version" }, repository: { type: "git", url: "git://github.com/motdotla/dotenv.git" }, keywords: ["dotenv", "env", ".env", "environment", "variables", "config", "settings"], readmeFilename: "README.md", license: "BSD-2-Clause", devDependencies: { "@types/node": "^17.0.9", decache: "^4.6.1", dtslint: "^3.7.0", sinon: "^12.0.1", standard: "^16.0.4", "standard-markdown": "^7.1.0", "standard-version": "^9.3.2", tap: "^15.1.6", tar: "^6.1.11", typescript: "^4.5.4" }, engines: { node: ">=12" } };
  });
  var Jo = Z((If, Qr) => {
    var Mu = import.meta.require("fs"), Qo = import.meta.require("path"), $u = import.meta.require("os"), qu = Go(), ju = qu.version, Vu = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;
    function Bu(e3) {
      let t = {}, r = e3.toString();
      r = r.replace(/\r\n?/mg, `
`);
      let n;
      for (;(n = Vu.exec(r)) != null; ) {
        let i3 = n[1], o = n[2] || "";
        o = o.trim();
        let s3 = o[0];
        o = o.replace(/^(['"`])([\s\S]*)\1$/mg, "$2"), s3 === '"' && (o = o.replace(/\\n/g, `
`), o = o.replace(/\\r/g, "\r")), t[i3] = o;
      }
      return t;
    }
    function oi(e3) {
      console.log(`[dotenv@${ju}][DEBUG] ${e3}`);
    }
    function Uu(e3) {
      return e3[0] === "~" ? Qo.join($u.homedir(), e3.slice(1)) : e3;
    }
    function Gu(e3) {
      let t = Qo.resolve(process.cwd(), ".env"), r = "utf8", n = !!(e3 && e3.debug), i3 = !!(e3 && e3.override);
      e3 && (e3.path != null && (t = Uu(e3.path)), e3.encoding != null && (r = e3.encoding));
      try {
        let o = Gr.parse(Mu.readFileSync(t, { encoding: r }));
        return Object.keys(o).forEach(function(s3) {
          Object.prototype.hasOwnProperty.call(process.env, s3) ? (i3 === true && (process.env[s3] = o[s3]), n && oi(i3 === true ? `"${s3}" is already defined in \`process.env\` and WAS overwritten` : `"${s3}" is already defined in \`process.env\` and was NOT overwritten`)) : process.env[s3] = o[s3];
        }), { parsed: o };
      } catch (o) {
        return n && oi(`Failed to load ${t} ${o.message}`), { error: o };
      }
    }
    var Gr = { config: Gu, parse: Bu };
    Qr.exports.config = Gr.config;
    Qr.exports.parse = Gr.parse;
    Qr.exports = Gr;
  });
  var Zo = Z((Nf, Yo) => {
    Yo.exports = (e3) => {
      let t = e3.match(/^[ \t]*(?=\S)/gm);
      return t ? t.reduce((r, n) => Math.min(r, n.length), 1 / 0) : 0;
    };
  });
  var es = Z((Mf, Xo) => {
    var Hu = Zo();
    Xo.exports = (e3) => {
      let t = Hu(e3);
      if (t === 0)
        return e3;
      let r = new RegExp(`^[ \\t]{${t}}`, "gm");
      return e3.replace(r, "");
    };
  });
  var ui = Z((Uf, ts) => {
    ts.exports = (e3, t = 1, r) => {
      if (r = { indent: " ", includeEmptyLines: false, ...r }, typeof e3 != "string")
        throw new TypeError(`Expected \`input\` to be a \`string\`, got \`${typeof e3}\``);
      if (typeof t != "number")
        throw new TypeError(`Expected \`count\` to be a \`number\`, got \`${typeof t}\``);
      if (typeof r.indent != "string")
        throw new TypeError(`Expected \`options.indent\` to be a \`string\`, got \`${typeof r.indent}\``);
      if (t === 0)
        return e3;
      let n = r.includeEmptyLines ? /^/gm : /^(?!\s*$)/gm;
      return e3.replace(n, r.indent.repeat(t));
    };
  });
  var os = Z((Jf, is) => {
    is.exports = ({ onlyFirst: e3 = false } = {}) => {
      let t = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");
      return new RegExp(t, e3 ? undefined : "g");
    };
  });
  var mi = Z((Wf, ss) => {
    var rc = os();
    ss.exports = (e3) => typeof e3 == "string" ? e3.replace(rc(), "") : e3;
  });
  var as = Z((zf, Hr) => {
    Hr.exports = (e3 = {}) => {
      let t;
      if (e3.repoUrl)
        t = e3.repoUrl;
      else if (e3.user && e3.repo)
        t = `https://github.com/${e3.user}/${e3.repo}`;
      else
        throw new Error("You need to specify either the `repoUrl` option or both the `user` and `repo` options");
      let r = new URL(`${t}/issues/new`), n = ["body", "title", "labels", "template", "milestone", "assignee", "projects"];
      for (let i3 of n) {
        let o = e3[i3];
        if (o !== undefined) {
          if (i3 === "labels" || i3 === "projects") {
            if (!Array.isArray(o))
              throw new TypeError(`The \`${i3}\` option should be an array`);
            o = o.join(",");
          }
          r.searchParams.set(i3, o);
        }
      }
      return r.toString();
    };
    Hr.exports.default = Hr.exports;
  });
  var Zi = Z((GP, Ga) => {
    Ga.exports = function() {
      function e3(t, r, n, i3, o) {
        return t < r || n < r ? t > n ? n + 1 : t + 1 : i3 === o ? r : r + 1;
      }
      return function(t, r) {
        if (t === r)
          return 0;
        if (t.length > r.length) {
          var n = t;
          t = r, r = n;
        }
        for (var i3 = t.length, o = r.length;i3 > 0 && t.charCodeAt(i3 - 1) === r.charCodeAt(o - 1); )
          i3--, o--;
        for (var s3 = 0;s3 < i3 && t.charCodeAt(s3) === r.charCodeAt(s3); )
          s3++;
        if (i3 -= s3, o -= s3, i3 === 0 || o < 3)
          return o;
        var a = 0, l3, u, c3, p3, d3, f3, g3, h3, O, T, S, C, E = [];
        for (l3 = 0;l3 < i3; l3++)
          E.push(l3 + 1), E.push(t.charCodeAt(s3 + l3));
        for (var me = E.length - 1;a < o - 3; )
          for (O = r.charCodeAt(s3 + (u = a)), T = r.charCodeAt(s3 + (c3 = a + 1)), S = r.charCodeAt(s3 + (p3 = a + 2)), C = r.charCodeAt(s3 + (d3 = a + 3)), f3 = a += 4, l3 = 0;l3 < me; l3 += 2)
            g3 = E[l3], h3 = E[l3 + 1], u = e3(g3, u, c3, O, h3), c3 = e3(u, c3, p3, T, h3), p3 = e3(c3, p3, d3, S, h3), f3 = e3(p3, d3, f3, C, h3), E[l3] = f3, d3 = p3, p3 = c3, c3 = u, u = g3;
        for (;a < o; )
          for (O = r.charCodeAt(s3 + (u = a)), f3 = ++a, l3 = 0;l3 < me; l3 += 2)
            g3 = E[l3], E[l3] = f3 = e3(g3, u, f3, O, E[l3 + 1]), u = g3;
        return f3;
      };
    }();
  });
  var wm = {};
  qt(wm, { Debug: () => qn, Decimal: () => ve, Extensions: () => Fn, MetricsClient: () => yt, NotFoundError: () => _e, PrismaClientInitializationError: () => R, PrismaClientKnownRequestError: () => V, PrismaClientRustPanicError: () => le, PrismaClientUnknownRequestError: () => B, PrismaClientValidationError: () => H, Public: () => Nn, Sql: () => ie, defineDmmfProperty: () => us, empty: () => ps, getPrismaClient: () => Nl, getRuntime: () => wn, join: () => cs, makeStrictEnum: () => Ml, objectEnumValues: () => Yr, raw: () => Pi, sqltag: () => vi, warnEnvConflicts: () => $l, warnOnce: () => Yt });
  module.exports = Gl(wm);
  var Fn = {};
  qt(Fn, { defineExtension: () => ao, getExtensionContext: () => lo });
  var Nn = {};
  qt(Nn, { validator: () => uo });
  var _r = {};
  qt(_r, { $: () => go, bgBlack: () => eu, bgBlue: () => iu, bgCyan: () => su, bgGreen: () => ru, bgMagenta: () => ou, bgRed: () => tu, bgWhite: () => au, bgYellow: () => nu, black: () => zl, blue: () => et, bold: () => W, cyan: () => Oe, dim: () => Ae, gray: () => jt, green: () => Me, grey: () => Xl, hidden: () => Hl, inverse: () => Wl, italic: () => Jl, magenta: () => Yl, red: () => ce, reset: () => Ql, strikethrough: () => Kl, underline: () => X, white: () => Zl, yellow: () => Ie });
  var Mn;
  var co;
  var po;
  var mo;
  var fo = true;
  typeof process < "u" && ({ FORCE_COLOR: Mn, NODE_DISABLE_COLORS: co, NO_COLOR: po, TERM: mo } = process.env || {}, fo = process.stdout && process.stdout.isTTY);
  var go = { enabled: !co && po == null && mo !== "dumb" && (Mn != null && Mn !== "0" || fo) };
  var Ql = M(0, 0);
  var W = M(1, 22);
  var Ae = M(2, 22);
  var Jl = M(3, 23);
  var X = M(4, 24);
  var Wl = M(7, 27);
  var Hl = M(8, 28);
  var Kl = M(9, 29);
  var zl = M(30, 39);
  var ce = M(31, 39);
  var Me = M(32, 39);
  var Ie = M(33, 39);
  var et = M(34, 39);
  var Yl = M(35, 39);
  var Oe = M(36, 39);
  var Zl = M(37, 39);
  var jt = M(90, 39);
  var Xl = M(90, 39);
  var eu = M(40, 49);
  var tu = M(41, 49);
  var ru = M(42, 49);
  var nu = M(43, 49);
  var iu = M(44, 49);
  var ou = M(45, 49);
  var su = M(46, 49);
  var au = M(47, 49);
  var lu = 100;
  var ho = ["green", "yellow", "blue", "magenta", "cyan", "red"];
  var Vt = [];
  var yo = Date.now();
  var uu = 0;
  var $n = typeof process < "u" ? process.env : {};
  globalThis.DEBUG ??= $n.DEBUG ?? "";
  globalThis.DEBUG_COLORS ??= $n.DEBUG_COLORS ? $n.DEBUG_COLORS === "true" : true;
  var Bt = { enable(e3) {
    typeof e3 == "string" && (globalThis.DEBUG = e3);
  }, disable() {
    let e3 = globalThis.DEBUG;
    return globalThis.DEBUG = "", e3;
  }, enabled(e3) {
    let t = globalThis.DEBUG.split(",").map((i3) => i3.replace(/[.+?^${}()|[\]\\]/g, "\\$&")), r = t.some((i3) => i3 === "" || i3[0] === "-" ? false : e3.match(RegExp(i3.split("*").join(".*") + "$"))), n = t.some((i3) => i3 === "" || i3[0] !== "-" ? false : e3.match(RegExp(i3.slice(1).split("*").join(".*") + "$")));
    return r && !n;
  }, log: (...e3) => {
    let [t, r, ...n] = e3;
    (console.warn ?? console.log)(`${t} ${r}`, ...n);
  }, formatters: {} };
  var qn = new Proxy(cu, { get: (e3, t) => Bt[t], set: (e3, t, r) => Bt[t] = r });
  var F = qn;
  var wo = k(import.meta.require("fs"));
  var Vn = ["darwin", "darwin-arm64", "debian-openssl-1.0.x", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "rhel-openssl-1.0.x", "rhel-openssl-1.1.x", "rhel-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "linux-arm64-openssl-1.0.x", "linux-arm64-openssl-3.0.x", "linux-arm-openssl-1.1.x", "linux-arm-openssl-1.0.x", "linux-arm-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-1.1.x", "linux-musl-arm64-openssl-3.0.x", "linux-nixos", "linux-static-x64", "linux-static-arm64", "windows", "freebsd11", "freebsd12", "freebsd13", "freebsd14", "freebsd15", "openbsd", "netbsd", "arm"];
  var Lr = "libquery_engine";
  var To = k(import.meta.require("child_process"));
  var Qn = k(import.meta.require("fs/promises"));
  var jr = k(import.meta.require("os"));
  var ke = Symbol.for("@ts-pattern/matcher");
  var du = Symbol.for("@ts-pattern/isVariadic");
  var Mr = "@ts-pattern/anonymous-select-key";
  var Bn = (e3) => !!(e3 && typeof e3 == "object");
  var Nr = (e3) => e3 && !!e3[ke];
  var Ee = (e3, t, r) => {
    if (Nr(e3)) {
      let n = e3[ke](), { matched: i3, selections: o } = n.match(t);
      return i3 && o && Object.keys(o).forEach((s3) => r(s3, o[s3])), i3;
    }
    if (Bn(e3)) {
      if (!Bn(t))
        return false;
      if (Array.isArray(e3)) {
        if (!Array.isArray(t))
          return false;
        let n = [], i3 = [], o = [];
        for (let s3 of e3.keys()) {
          let a = e3[s3];
          Nr(a) && a[du] ? o.push(a) : o.length ? i3.push(a) : n.push(a);
        }
        if (o.length) {
          if (o.length > 1)
            throw new Error("Pattern error: Using `...P.array(...)` several times in a single pattern is not allowed.");
          if (t.length < n.length + i3.length)
            return false;
          let s3 = t.slice(0, n.length), a = i3.length === 0 ? [] : t.slice(-i3.length), l3 = t.slice(n.length, i3.length === 0 ? 1 / 0 : -i3.length);
          return n.every((u, c3) => Ee(u, s3[c3], r)) && i3.every((u, c3) => Ee(u, a[c3], r)) && (o.length === 0 || Ee(o[0], l3, r));
        }
        return e3.length === t.length && e3.every((s3, a) => Ee(s3, t[a], r));
      }
      return Object.keys(e3).every((n) => {
        let i3 = e3[n];
        return ((n in t) || Nr(o = i3) && o[ke]().matcherType === "optional") && Ee(i3, t[n], r);
        var o;
      });
    }
    return Object.is(t, e3);
  };
  var Be = (e3) => {
    var t, r, n;
    return Bn(e3) ? Nr(e3) ? (t = (r = (n = e3[ke]()).getSelectionKeys) == null ? undefined : r.call(n)) != null ? t : [] : Array.isArray(e3) ? Ut(e3, Be) : Ut(Object.values(e3), Be) : [];
  };
  var Ut = (e3, t) => e3.reduce((r, n) => r.concat(t(n)), []);
  var _m = pe(I(function(e3) {
    return true;
  }));
  var je = (e3) => Object.assign(pe(e3), { startsWith: (t) => {
    return je(j(e3, (r = t, I((n) => $e(n) && n.startsWith(r)))));
    var r;
  }, endsWith: (t) => {
    return je(j(e3, (r = t, I((n) => $e(n) && n.endsWith(r)))));
    var r;
  }, minLength: (t) => je(j(e3, ((r) => I((n) => $e(n) && n.length >= r))(t))), length: (t) => je(j(e3, ((r) => I((n) => $e(n) && n.length === r))(t))), maxLength: (t) => je(j(e3, ((r) => I((n) => $e(n) && n.length <= r))(t))), includes: (t) => {
    return je(j(e3, (r = t, I((n) => $e(n) && n.includes(r)))));
    var r;
  }, regex: (t) => {
    return je(j(e3, (r = t, I((n) => $e(n) && !!n.match(r)))));
    var r;
  } });
  var Lm = je(I($e));
  var be = (e3) => Object.assign(pe(e3), { between: (t, r) => be(j(e3, ((n, i3) => I((o) => ye(o) && n <= o && i3 >= o))(t, r))), lt: (t) => be(j(e3, ((r) => I((n) => ye(n) && n < r))(t))), gt: (t) => be(j(e3, ((r) => I((n) => ye(n) && n > r))(t))), lte: (t) => be(j(e3, ((r) => I((n) => ye(n) && n <= r))(t))), gte: (t) => be(j(e3, ((r) => I((n) => ye(n) && n >= r))(t))), int: () => be(j(e3, I((t) => ye(t) && Number.isInteger(t)))), finite: () => be(j(e3, I((t) => ye(t) && Number.isFinite(t)))), positive: () => be(j(e3, I((t) => ye(t) && t > 0))), negative: () => be(j(e3, I((t) => ye(t) && t < 0))) });
  var Fm = be(I(ye));
  var Ve = (e3) => Object.assign(pe(e3), { between: (t, r) => Ve(j(e3, ((n, i3) => I((o) => qe(o) && n <= o && i3 >= o))(t, r))), lt: (t) => Ve(j(e3, ((r) => I((n) => qe(n) && n < r))(t))), gt: (t) => Ve(j(e3, ((r) => I((n) => qe(n) && n > r))(t))), lte: (t) => Ve(j(e3, ((r) => I((n) => qe(n) && n <= r))(t))), gte: (t) => Ve(j(e3, ((r) => I((n) => qe(n) && n >= r))(t))), positive: () => Ve(j(e3, I((t) => qe(t) && t > 0))), negative: () => Ve(j(e3, I((t) => qe(t) && t < 0))) });
  var Nm = Ve(I(qe));
  var Mm = pe(I(function(e3) {
    return typeof e3 == "boolean";
  }));
  var $m = pe(I(function(e3) {
    return typeof e3 == "symbol";
  }));
  var qm = pe(I(function(e3) {
    return e3 == null;
  }));
  var jm = pe(I(function(e3) {
    return e3 != null;
  }));
  var Un = { matched: false, value: undefined };
  var Gn = class e3 {
    constructor(t, r) {
      this.input = undefined, this.state = undefined, this.input = t, this.state = r;
    }
    with(...t) {
      if (this.state.matched)
        return this;
      let r = t[t.length - 1], n = [t[0]], i3;
      t.length === 3 && typeof t[1] == "function" ? i3 = t[1] : t.length > 2 && n.push(...t.slice(1, t.length - 1));
      let o = false, s3 = {}, a = (u, c3) => {
        o = true, s3[u] = c3;
      }, l3 = !n.some((u) => Ee(u, this.input, a)) || i3 && !i3(this.input) ? Un : { matched: true, value: r(o ? Mr in s3 ? s3[Mr] : s3 : this.input, this.input) };
      return new e3(this.input, l3);
    }
    when(t, r) {
      if (this.state.matched)
        return this;
      let n = !!t(this.input);
      return new e3(this.input, n ? { matched: true, value: r(this.input, this.input) } : Un);
    }
    otherwise(t) {
      return this.state.matched ? this.state.value : t(this.input);
    }
    exhaustive() {
      if (this.state.matched)
        return this.state.value;
      let t;
      try {
        t = JSON.stringify(this.input);
      } catch {
        t = this.input;
      }
      throw new Error(`Pattern matching error: no pattern matches value ${t}`);
    }
    run() {
      return this.exhaustive();
    }
    returnType() {
      return this;
    }
  };
  var Ro = import.meta.require("util");
  var gu = { warn: Ie("prisma:warn") };
  var hu = { warn: () => !process.env.PRISMA_DISABLE_WARNINGS };
  var yu = (0, Ro.promisify)(To.default.exec);
  var te = F("prisma:get-platform");
  var bu = ["1.0.x", "1.1.x", "3.0.x"];
  var qr = {};
  var Vo = k(jo());
  var Lu = k(ti());
  var $ = k(import.meta.require("path"));
  var Fu = k(ti());
  var Ef = F("prisma:engines");
  var wf = "libquery-engine";
  $.default.join(__dirname, "../query-engine-darwin");
  $.default.join(__dirname, "../query-engine-darwin-arm64");
  $.default.join(__dirname, "../query-engine-debian-openssl-1.0.x");
  $.default.join(__dirname, "../query-engine-debian-openssl-1.1.x");
  $.default.join(__dirname, "../query-engine-debian-openssl-3.0.x");
  $.default.join(__dirname, "../query-engine-linux-static-x64");
  $.default.join(__dirname, "../query-engine-linux-static-arm64");
  $.default.join(__dirname, "../query-engine-rhel-openssl-1.0.x");
  $.default.join(__dirname, "../query-engine-rhel-openssl-1.1.x");
  $.default.join(__dirname, "../query-engine-rhel-openssl-3.0.x");
  $.default.join(__dirname, "../libquery_engine-darwin.dylib.node");
  $.default.join(__dirname, "../libquery_engine-darwin-arm64.dylib.node");
  $.default.join(__dirname, "../libquery_engine-debian-openssl-1.0.x.so.node");
  $.default.join(__dirname, "../libquery_engine-debian-openssl-1.1.x.so.node");
  $.default.join(__dirname, "../libquery_engine-debian-openssl-3.0.x.so.node");
  $.default.join(__dirname, "../libquery_engine-linux-arm64-openssl-1.0.x.so.node");
  $.default.join(__dirname, "../libquery_engine-linux-arm64-openssl-1.1.x.so.node");
  $.default.join(__dirname, "../libquery_engine-linux-arm64-openssl-3.0.x.so.node");
  $.default.join(__dirname, "../libquery_engine-linux-musl.so.node");
  $.default.join(__dirname, "../libquery_engine-linux-musl-openssl-3.0.x.so.node");
  $.default.join(__dirname, "../libquery_engine-rhel-openssl-1.0.x.so.node");
  $.default.join(__dirname, "../libquery_engine-rhel-openssl-1.1.x.so.node");
  $.default.join(__dirname, "../libquery_engine-rhel-openssl-3.0.x.so.node");
  $.default.join(__dirname, "../query_engine-windows.dll.node");
  var ri = k(import.meta.require("fs"));
  var Uo = F("chmodPlusX");
  var ai = k(Jo());
  var Jr = k(import.meta.require("fs"));
  var gt = k(import.meta.require("path"));
  var si = F("prisma:tryLoadEnv");
  var zo = "library";
  var Ge;
  ((t) => {
    let e3;
    ((E) => (E.findUnique = "findUnique", E.findUniqueOrThrow = "findUniqueOrThrow", E.findFirst = "findFirst", E.findFirstOrThrow = "findFirstOrThrow", E.findMany = "findMany", E.create = "create", E.createMany = "createMany", E.createManyAndReturn = "createManyAndReturn", E.update = "update", E.updateMany = "updateMany", E.upsert = "upsert", E.delete = "delete", E.deleteMany = "deleteMany", E.groupBy = "groupBy", E.count = "count", E.aggregate = "aggregate", E.findRaw = "findRaw", E.aggregateRaw = "aggregateRaw"))(e3 = t.ModelAction ||= {});
  })(Ge ||= {});
  var Ht = k(import.meta.require("path"));
  var rs = k(ui());
  var ci = class {
    constructor(t) {
      this.config = t;
    }
    toString() {
      let { config: t } = this, r = t.provider.fromEnvVar ? `env("${t.provider.fromEnvVar}")` : t.provider.value, n = JSON.parse(JSON.stringify({ provider: r, binaryTargets: Ku(t.binaryTargets) }));
      return `generator ${t.name} {
${(0, rs.default)(zu(n), 2)}
}`;
    }
  };
  var zt = {};
  qt(zt, { error: () => ec, info: () => Xu, log: () => Zu, query: () => tc, should: () => ns, tags: () => Kt, warn: () => di });
  var Kt = { error: ce("prisma:error"), warn: Ie("prisma:warn"), info: Oe("prisma:info"), query: et("prisma:query") };
  var ns = { warn: () => !process.env.PRISMA_DISABLE_WARNINGS };
  var gi = (e3, t) => e3.reduce((r, n) => (r[t(n)] = n, r), {});
  var ls = new Set;
  var Yt = (e3, t, ...r) => {
    ls.has(e3) || (ls.add(e3), di(t, ...r));
  };
  var V = class extends Error {
    constructor(t, { code: r, clientVersion: n, meta: i3, batchRequestIdx: o }) {
      super(t), this.name = "PrismaClientKnownRequestError", this.code = r, this.clientVersion = n, this.meta = i3, Object.defineProperty(this, "batchRequestIdx", { value: o, enumerable: false, writable: true });
    }
    get [Symbol.toStringTag]() {
      return "PrismaClientKnownRequestError";
    }
  };
  w(V, "PrismaClientKnownRequestError");
  var _e = class extends V {
    constructor(t, r) {
      super(t, { code: "P2025", clientVersion: r }), this.name = "NotFoundError";
    }
  };
  w(_e, "NotFoundError");
  var R = class e3 extends Error {
    constructor(t, r, n) {
      super(t), this.name = "PrismaClientInitializationError", this.clientVersion = r, this.errorCode = n, Error.captureStackTrace(e3);
    }
    get [Symbol.toStringTag]() {
      return "PrismaClientInitializationError";
    }
  };
  w(R, "PrismaClientInitializationError");
  var le = class extends Error {
    constructor(t, r) {
      super(t), this.name = "PrismaClientRustPanicError", this.clientVersion = r;
    }
    get [Symbol.toStringTag]() {
      return "PrismaClientRustPanicError";
    }
  };
  w(le, "PrismaClientRustPanicError");
  var B = class extends Error {
    constructor(t, { clientVersion: r, batchRequestIdx: n }) {
      super(t), this.name = "PrismaClientUnknownRequestError", this.clientVersion = r, Object.defineProperty(this, "batchRequestIdx", { value: n, writable: true, enumerable: false });
    }
    get [Symbol.toStringTag]() {
      return "PrismaClientUnknownRequestError";
    }
  };
  w(B, "PrismaClientUnknownRequestError");
  var H = class extends Error {
    constructor(r, { clientVersion: n }) {
      super(r);
      this.name = "PrismaClientValidationError";
      this.clientVersion = n;
    }
    get [Symbol.toStringTag]() {
      return "PrismaClientValidationError";
    }
  };
  w(H, "PrismaClientValidationError");
  var yt = class {
    constructor(t) {
      this._engine = t;
    }
    prometheus(t) {
      return this._engine.metrics({ format: "prometheus", ...t });
    }
    json(t) {
      return this._engine.metrics({ format: "json", ...t });
    }
  };
  var zr = Symbol();
  var bi = new WeakMap;
  var Le = class {
    constructor(t) {
      t === zr ? bi.set(this, `Prisma.${this._getName()}`) : bi.set(this, `new Prisma.${this._getNamespace()}.${this._getName()}()`);
    }
    _getName() {
      return this.constructor.name;
    }
    toString() {
      return bi.get(this);
    }
  };
  var Xt = class extends Le {
    _getNamespace() {
      return "NullTypes";
    }
  };
  var er = class extends Xt {
  };
  Ei(er, "DbNull");
  var tr = class extends Xt {
  };
  Ei(tr, "JsonNull");
  var rr = class extends Xt {
  };
  Ei(rr, "AnyNull");
  var Yr = { classes: { DbNull: er, JsonNull: tr, AnyNull: rr }, instances: { DbNull: new er(zr), JsonNull: new tr(zr), AnyNull: new rr(zr) } };
  var wi = class {
    constructor() {
      this.registeredErrors = [];
    }
    consumeError(t) {
      return this.registeredErrors[t];
    }
    registerNewError(t) {
      let r = 0;
      for (;this.registeredErrors[r] !== undefined; )
        r++;
      return this.registeredErrors[r] = { error: t }, r;
    }
  };
  var xi = (e3) => {
    let t = new wi, r = rt(t, e3.startTransaction.bind(e3)), n = { adapterName: e3.adapterName, errorRegistry: t, queryRaw: rt(t, e3.queryRaw.bind(e3)), executeRaw: rt(t, e3.executeRaw.bind(e3)), provider: e3.provider, startTransaction: async (...i3) => (await r(...i3)).map((s3) => ic(t, s3)) };
    return e3.getConnectionInfo && (n.getConnectionInfo = oc(t, e3.getConnectionInfo.bind(e3))), n;
  };
  var ic = (e3, t) => ({ adapterName: t.adapterName, provider: t.provider, options: t.options, queryRaw: rt(e3, t.queryRaw.bind(t)), executeRaw: rt(e3, t.executeRaw.bind(t)), commit: rt(e3, t.commit.bind(t)), rollback: rt(e3, t.rollback.bind(t)) });
  var Dl = k(ei());
  var _l = import.meta.require("async_hooks");
  var Ll = import.meta.require("events");
  var Fl = k(import.meta.require("fs"));
  var Or2 = k(import.meta.require("path"));
  var ie = class e3 {
    constructor(t, r) {
      if (t.length - 1 !== r.length)
        throw t.length === 0 ? new TypeError("Expected at least 1 string") : new TypeError(`Expected ${t.length} strings to have ${t.length - 1} values`);
      let n = r.reduce((s3, a) => s3 + (a instanceof e3 ? a.values.length : 1), 0);
      this.values = new Array(n), this.strings = new Array(n + 1), this.strings[0] = t[0];
      let i3 = 0, o = 0;
      for (;i3 < r.length; ) {
        let s3 = r[i3++], a = t[i3];
        if (s3 instanceof e3) {
          this.strings[o] += s3.strings[0];
          let l3 = 0;
          for (;l3 < s3.values.length; )
            this.values[o++] = s3.values[l3++], this.strings[o] = s3.strings[l3];
          this.strings[o] += a;
        } else
          this.values[o++] = s3, this.strings[o] = a;
      }
    }
    get sql() {
      let t = this.strings.length, r = 1, n = this.strings[0];
      for (;r < t; )
        n += `?${this.strings[r++]}`;
      return n;
    }
    get statement() {
      let t = this.strings.length, r = 1, n = this.strings[0];
      for (;r < t; )
        n += `:${r}${this.strings[r++]}`;
      return n;
    }
    get text() {
      let t = this.strings.length, r = 1, n = this.strings[0];
      for (;r < t; )
        n += `\$${r}${this.strings[r++]}`;
      return n;
    }
    inspect() {
      return { sql: this.sql, statement: this.statement, text: this.text, values: this.values };
    }
  };
  var ps = Pi("");
  var we = class {
    constructor() {
      this._map = new Map;
    }
    get(t) {
      return this._map.get(t)?.value;
    }
    set(t, r) {
      this._map.set(t, { value: r });
    }
    getOrCreate(t, r) {
      let n = this._map.get(t);
      if (n)
        return n.value;
      let i3 = r();
      return this.set(t, i3), i3;
    }
  };
  var Zr = { enumerable: true, configurable: true, writable: true };
  var ds = Symbol.for("nodejs.util.inspect.custom");
  var wt = class {
    constructor(t = 0, r) {
      this.context = r;
      this.lines = [];
      this.currentLine = "";
      this.currentIndent = 0;
      this.currentIndent = t;
    }
    write(t) {
      return typeof t == "string" ? this.currentLine += t : t.write(this), this;
    }
    writeJoined(t, r, n = (i3, o) => o.write(i3)) {
      let i3 = r.length - 1;
      for (let o = 0;o < r.length; o++)
        n(r[o], this), o !== i3 && this.write(t);
      return this;
    }
    writeLine(t) {
      return this.write(t).newLine();
    }
    newLine() {
      this.lines.push(this.indentedCurrentLine()), this.currentLine = "", this.marginSymbol = undefined;
      let t = this.afterNextNewLineCallback;
      return this.afterNextNewLineCallback = undefined, t?.(), this;
    }
    withIndent(t) {
      return this.indent(), t(this), this.unindent(), this;
    }
    afterNextNewline(t) {
      return this.afterNextNewLineCallback = t, this;
    }
    indent() {
      return this.currentIndent++, this;
    }
    unindent() {
      return this.currentIndent > 0 && this.currentIndent--, this;
    }
    addMarginSymbol(t) {
      return this.marginSymbol = t, this;
    }
    toString() {
      return this.lines.concat(this.indentedCurrentLine()).join(`
`);
    }
    getCurrentLineLength() {
      return this.currentLine.length;
    }
    indentedCurrentLine() {
      let t = this.currentLine.padStart(this.currentLine.length + 2 * this.currentIndent);
      return this.marginSymbol ? this.marginSymbol + t.slice(1) : t;
    }
  };
  var Pt = 9000000000000000;
  var He = 1e9;
  var Ti = "0123456789abcdef";
  var rn = "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058";
  var nn = "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789";
  var Ri = { precision: 20, rounding: 4, modulo: 1, toExpNeg: -7, toExpPos: 21, minE: -Pt, maxE: Pt, crypto: false };
  var bs;
  var Fe;
  var x3 = true;
  var sn = "[DecimalError] ";
  var We = sn + "Invalid argument: ";
  var Es = sn + "Precision limit exceeded";
  var ws = sn + "crypto unavailable";
  var xs = "[object Decimal]";
  var ee = Math.floor;
  var G = Math.pow;
  var ac = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i;
  var lc = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i;
  var uc = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i;
  var Ps = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
  var ge = 1e7;
  var b = 7;
  var cc = 9007199254740991;
  var pc = rn.length - 1;
  var Ci = nn.length - 1;
  var m3 = { toStringTag: xs };
  m3.absoluteValue = m3.abs = function() {
    var e3 = new this.constructor(this);
    return e3.s < 0 && (e3.s = 1), y3(e3);
  };
  m3.ceil = function() {
    return y3(new this.constructor(this), this.e + 1, 2);
  };
  m3.clampedTo = m3.clamp = function(e3, t) {
    var r, n = this, i3 = n.constructor;
    if (e3 = new i3(e3), t = new i3(t), !e3.s || !t.s)
      return new i3(NaN);
    if (e3.gt(t))
      throw Error(We + t);
    return r = n.cmp(e3), r < 0 ? e3 : n.cmp(t) > 0 ? t : new i3(n);
  };
  m3.comparedTo = m3.cmp = function(e3) {
    var t, r, n, i3, o = this, s3 = o.d, a = (e3 = new o.constructor(e3)).d, l3 = o.s, u = e3.s;
    if (!s3 || !a)
      return !l3 || !u ? NaN : l3 !== u ? l3 : s3 === a ? 0 : !s3 ^ l3 < 0 ? 1 : -1;
    if (!s3[0] || !a[0])
      return s3[0] ? l3 : a[0] ? -u : 0;
    if (l3 !== u)
      return l3;
    if (o.e !== e3.e)
      return o.e > e3.e ^ l3 < 0 ? 1 : -1;
    for (n = s3.length, i3 = a.length, t = 0, r = n < i3 ? n : i3;t < r; ++t)
      if (s3[t] !== a[t])
        return s3[t] > a[t] ^ l3 < 0 ? 1 : -1;
    return n === i3 ? 0 : n > i3 ^ l3 < 0 ? 1 : -1;
  };
  m3.cosine = m3.cos = function() {
    var e3, t, r = this, n = r.constructor;
    return r.d ? r.d[0] ? (e3 = n.precision, t = n.rounding, n.precision = e3 + Math.max(r.e, r.sd()) + b, n.rounding = 1, r = dc(n, Ss(n, r)), n.precision = e3, n.rounding = t, y3(Fe == 2 || Fe == 3 ? r.neg() : r, e3, t, true)) : new n(1) : new n(NaN);
  };
  m3.cubeRoot = m3.cbrt = function() {
    var e3, t, r, n, i3, o, s3, a, l3, u, c3 = this, p3 = c3.constructor;
    if (!c3.isFinite() || c3.isZero())
      return new p3(c3);
    for (x3 = false, o = c3.s * G(c3.s * c3, 1 / 3), !o || Math.abs(o) == 1 / 0 ? (r = K(c3.d), e3 = c3.e, (o = (e3 - r.length + 1) % 3) && (r += o == 1 || o == -2 ? "0" : "00"), o = G(r, 1 / 3), e3 = ee((e3 + 1) / 3) - (e3 % 3 == (e3 < 0 ? -1 : 2)), o == 1 / 0 ? r = "5e" + e3 : (r = o.toExponential(), r = r.slice(0, r.indexOf("e") + 1) + e3), n = new p3(r), n.s = c3.s) : n = new p3(o.toString()), s3 = (e3 = p3.precision) + 3;; )
      if (a = n, l3 = a.times(a).times(a), u = l3.plus(c3), n = N(u.plus(c3).times(a), u.plus(l3), s3 + 2, 1), K(a.d).slice(0, s3) === (r = K(n.d)).slice(0, s3))
        if (r = r.slice(s3 - 3, s3 + 1), r == "9999" || !i3 && r == "4999") {
          if (!i3 && (y3(a, e3 + 1, 0), a.times(a).times(a).eq(c3))) {
            n = a;
            break;
          }
          s3 += 4, i3 = 1;
        } else {
          (!+r || !+r.slice(1) && r.charAt(0) == "5") && (y3(n, e3 + 1, 1), t = !n.times(n).times(n).eq(c3));
          break;
        }
    return x3 = true, y3(n, e3, p3.rounding, t);
  };
  m3.decimalPlaces = m3.dp = function() {
    var e3, t = this.d, r = NaN;
    if (t) {
      if (e3 = t.length - 1, r = (e3 - ee(this.e / b)) * b, e3 = t[e3], e3)
        for (;e3 % 10 == 0; e3 /= 10)
          r--;
      r < 0 && (r = 0);
    }
    return r;
  };
  m3.dividedBy = m3.div = function(e3) {
    return N(this, new this.constructor(e3));
  };
  m3.dividedToIntegerBy = m3.divToInt = function(e3) {
    var t = this, r = t.constructor;
    return y3(N(t, new r(e3), 0, 1, 1), r.precision, r.rounding);
  };
  m3.equals = m3.eq = function(e3) {
    return this.cmp(e3) === 0;
  };
  m3.floor = function() {
    return y3(new this.constructor(this), this.e + 1, 3);
  };
  m3.greaterThan = m3.gt = function(e3) {
    return this.cmp(e3) > 0;
  };
  m3.greaterThanOrEqualTo = m3.gte = function(e3) {
    var t = this.cmp(e3);
    return t == 1 || t === 0;
  };
  m3.hyperbolicCosine = m3.cosh = function() {
    var e3, t, r, n, i3, o = this, s3 = o.constructor, a = new s3(1);
    if (!o.isFinite())
      return new s3(o.s ? 1 / 0 : NaN);
    if (o.isZero())
      return a;
    r = s3.precision, n = s3.rounding, s3.precision = r + Math.max(o.e, o.sd()) + 4, s3.rounding = 1, i3 = o.d.length, i3 < 32 ? (e3 = Math.ceil(i3 / 3), t = (1 / ln(4, e3)).toString()) : (e3 = 16, t = "2.3283064365386962890625e-10"), o = vt(s3, 1, o.times(t), new s3(1), true);
    for (var l3, u = e3, c3 = new s3(8);u--; )
      l3 = o.times(o), o = a.minus(l3.times(c3.minus(l3.times(c3))));
    return y3(o, s3.precision = r, s3.rounding = n, true);
  };
  m3.hyperbolicSine = m3.sinh = function() {
    var e3, t, r, n, i3 = this, o = i3.constructor;
    if (!i3.isFinite() || i3.isZero())
      return new o(i3);
    if (t = o.precision, r = o.rounding, o.precision = t + Math.max(i3.e, i3.sd()) + 4, o.rounding = 1, n = i3.d.length, n < 3)
      i3 = vt(o, 2, i3, i3, true);
    else {
      e3 = 1.4 * Math.sqrt(n), e3 = e3 > 16 ? 16 : e3 | 0, i3 = i3.times(1 / ln(5, e3)), i3 = vt(o, 2, i3, i3, true);
      for (var s3, a = new o(5), l3 = new o(16), u = new o(20);e3--; )
        s3 = i3.times(i3), i3 = i3.times(a.plus(s3.times(l3.times(s3).plus(u))));
    }
    return o.precision = t, o.rounding = r, y3(i3, t, r, true);
  };
  m3.hyperbolicTangent = m3.tanh = function() {
    var e3, t, r = this, n = r.constructor;
    return r.isFinite() ? r.isZero() ? new n(r) : (e3 = n.precision, t = n.rounding, n.precision = e3 + 7, n.rounding = 1, N(r.sinh(), r.cosh(), n.precision = e3, n.rounding = t)) : new n(r.s);
  };
  m3.inverseCosine = m3.acos = function() {
    var e3, t = this, r = t.constructor, n = t.abs().cmp(1), i3 = r.precision, o = r.rounding;
    return n !== -1 ? n === 0 ? t.isNeg() ? fe(r, i3, o) : new r(0) : new r(NaN) : t.isZero() ? fe(r, i3 + 4, o).times(0.5) : (r.precision = i3 + 6, r.rounding = 1, t = t.asin(), e3 = fe(r, i3 + 4, o).times(0.5), r.precision = i3, r.rounding = o, e3.minus(t));
  };
  m3.inverseHyperbolicCosine = m3.acosh = function() {
    var e3, t, r = this, n = r.constructor;
    return r.lte(1) ? new n(r.eq(1) ? 0 : NaN) : r.isFinite() ? (e3 = n.precision, t = n.rounding, n.precision = e3 + Math.max(Math.abs(r.e), r.sd()) + 4, n.rounding = 1, x3 = false, r = r.times(r).minus(1).sqrt().plus(r), x3 = true, n.precision = e3, n.rounding = t, r.ln()) : new n(r);
  };
  m3.inverseHyperbolicSine = m3.asinh = function() {
    var e3, t, r = this, n = r.constructor;
    return !r.isFinite() || r.isZero() ? new n(r) : (e3 = n.precision, t = n.rounding, n.precision = e3 + 2 * Math.max(Math.abs(r.e), r.sd()) + 6, n.rounding = 1, x3 = false, r = r.times(r).plus(1).sqrt().plus(r), x3 = true, n.precision = e3, n.rounding = t, r.ln());
  };
  m3.inverseHyperbolicTangent = m3.atanh = function() {
    var e3, t, r, n, i3 = this, o = i3.constructor;
    return i3.isFinite() ? i3.e >= 0 ? new o(i3.abs().eq(1) ? i3.s / 0 : i3.isZero() ? i3 : NaN) : (e3 = o.precision, t = o.rounding, n = i3.sd(), Math.max(n, e3) < 2 * -i3.e - 1 ? y3(new o(i3), e3, t, true) : (o.precision = r = n - i3.e, i3 = N(i3.plus(1), new o(1).minus(i3), r + e3, 1), o.precision = e3 + 4, o.rounding = 1, i3 = i3.ln(), o.precision = e3, o.rounding = t, i3.times(0.5))) : new o(NaN);
  };
  m3.inverseSine = m3.asin = function() {
    var e3, t, r, n, i3 = this, o = i3.constructor;
    return i3.isZero() ? new o(i3) : (t = i3.abs().cmp(1), r = o.precision, n = o.rounding, t !== -1 ? t === 0 ? (e3 = fe(o, r + 4, n).times(0.5), e3.s = i3.s, e3) : new o(NaN) : (o.precision = r + 6, o.rounding = 1, i3 = i3.div(new o(1).minus(i3.times(i3)).sqrt().plus(1)).atan(), o.precision = r, o.rounding = n, i3.times(2)));
  };
  m3.inverseTangent = m3.atan = function() {
    var e3, t, r, n, i3, o, s3, a, l3, u = this, c3 = u.constructor, p3 = c3.precision, d3 = c3.rounding;
    if (u.isFinite()) {
      if (u.isZero())
        return new c3(u);
      if (u.abs().eq(1) && p3 + 4 <= Ci)
        return s3 = fe(c3, p3 + 4, d3).times(0.25), s3.s = u.s, s3;
    } else {
      if (!u.s)
        return new c3(NaN);
      if (p3 + 4 <= Ci)
        return s3 = fe(c3, p3 + 4, d3).times(0.5), s3.s = u.s, s3;
    }
    for (c3.precision = a = p3 + 10, c3.rounding = 1, r = Math.min(28, a / b + 2 | 0), e3 = r;e3; --e3)
      u = u.div(u.times(u).plus(1).sqrt().plus(1));
    for (x3 = false, t = Math.ceil(a / b), n = 1, l3 = u.times(u), s3 = new c3(u), i3 = u;e3 !== -1; )
      if (i3 = i3.times(l3), o = s3.minus(i3.div(n += 2)), i3 = i3.times(l3), s3 = o.plus(i3.div(n += 2)), s3.d[t] !== undefined)
        for (e3 = t;s3.d[e3] === o.d[e3] && e3--; )
          ;
    return r && (s3 = s3.times(2 << r - 1)), x3 = true, y3(s3, c3.precision = p3, c3.rounding = d3, true);
  };
  m3.isFinite = function() {
    return !!this.d;
  };
  m3.isInteger = m3.isInt = function() {
    return !!this.d && ee(this.e / b) > this.d.length - 2;
  };
  m3.isNaN = function() {
    return !this.s;
  };
  m3.isNegative = m3.isNeg = function() {
    return this.s < 0;
  };
  m3.isPositive = m3.isPos = function() {
    return this.s > 0;
  };
  m3.isZero = function() {
    return !!this.d && this.d[0] === 0;
  };
  m3.lessThan = m3.lt = function(e3) {
    return this.cmp(e3) < 0;
  };
  m3.lessThanOrEqualTo = m3.lte = function(e3) {
    return this.cmp(e3) < 1;
  };
  m3.logarithm = m3.log = function(e3) {
    var t, r, n, i3, o, s3, a, l3, u = this, c3 = u.constructor, p3 = c3.precision, d3 = c3.rounding, f3 = 5;
    if (e3 == null)
      e3 = new c3(10), t = true;
    else {
      if (e3 = new c3(e3), r = e3.d, e3.s < 0 || !r || !r[0] || e3.eq(1))
        return new c3(NaN);
      t = e3.eq(10);
    }
    if (r = u.d, u.s < 0 || !r || !r[0] || u.eq(1))
      return new c3(r && !r[0] ? -1 / 0 : u.s != 1 ? NaN : r ? 0 : 1 / 0);
    if (t)
      if (r.length > 1)
        o = true;
      else {
        for (i3 = r[0];i3 % 10 === 0; )
          i3 /= 10;
        o = i3 !== 1;
      }
    if (x3 = false, a = p3 + f3, s3 = Je(u, a), n = t ? on(c3, a + 10) : Je(e3, a), l3 = N(s3, n, a, 1), or(l3.d, i3 = p3, d3))
      do
        if (a += 10, s3 = Je(u, a), n = t ? on(c3, a + 10) : Je(e3, a), l3 = N(s3, n, a, 1), !o) {
          +K(l3.d).slice(i3 + 1, i3 + 15) + 1 == 100000000000000 && (l3 = y3(l3, p3 + 1, 0));
          break;
        }
      while (or(l3.d, i3 += 10, d3));
    return x3 = true, y3(l3, p3, d3);
  };
  m3.minus = m3.sub = function(e3) {
    var t, r, n, i3, o, s3, a, l3, u, c3, p3, d3, f3 = this, g3 = f3.constructor;
    if (e3 = new g3(e3), !f3.d || !e3.d)
      return !f3.s || !e3.s ? e3 = new g3(NaN) : f3.d ? e3.s = -e3.s : e3 = new g3(e3.d || f3.s !== e3.s ? f3 : NaN), e3;
    if (f3.s != e3.s)
      return e3.s = -e3.s, f3.plus(e3);
    if (u = f3.d, d3 = e3.d, a = g3.precision, l3 = g3.rounding, !u[0] || !d3[0]) {
      if (d3[0])
        e3.s = -e3.s;
      else if (u[0])
        e3 = new g3(f3);
      else
        return new g3(l3 === 3 ? -0 : 0);
      return x3 ? y3(e3, a, l3) : e3;
    }
    if (r = ee(e3.e / b), c3 = ee(f3.e / b), u = u.slice(), o = c3 - r, o) {
      for (p3 = o < 0, p3 ? (t = u, o = -o, s3 = d3.length) : (t = d3, r = c3, s3 = u.length), n = Math.max(Math.ceil(a / b), s3) + 2, o > n && (o = n, t.length = 1), t.reverse(), n = o;n--; )
        t.push(0);
      t.reverse();
    } else {
      for (n = u.length, s3 = d3.length, p3 = n < s3, p3 && (s3 = n), n = 0;n < s3; n++)
        if (u[n] != d3[n]) {
          p3 = u[n] < d3[n];
          break;
        }
      o = 0;
    }
    for (p3 && (t = u, u = d3, d3 = t, e3.s = -e3.s), s3 = u.length, n = d3.length - s3;n > 0; --n)
      u[s3++] = 0;
    for (n = d3.length;n > o; ) {
      if (u[--n] < d3[n]) {
        for (i3 = n;i3 && u[--i3] === 0; )
          u[i3] = ge - 1;
        --u[i3], u[n] += ge;
      }
      u[n] -= d3[n];
    }
    for (;u[--s3] === 0; )
      u.pop();
    for (;u[0] === 0; u.shift())
      --r;
    return u[0] ? (e3.d = u, e3.e = an(u, r), x3 ? y3(e3, a, l3) : e3) : new g3(l3 === 3 ? -0 : 0);
  };
  m3.modulo = m3.mod = function(e3) {
    var t, r = this, n = r.constructor;
    return e3 = new n(e3), !r.d || !e3.s || e3.d && !e3.d[0] ? new n(NaN) : !e3.d || r.d && !r.d[0] ? y3(new n(r), n.precision, n.rounding) : (x3 = false, n.modulo == 9 ? (t = N(r, e3.abs(), 0, 3, 1), t.s *= e3.s) : t = N(r, e3, 0, n.modulo, 1), t = t.times(e3), x3 = true, r.minus(t));
  };
  m3.naturalExponential = m3.exp = function() {
    return Si(this);
  };
  m3.naturalLogarithm = m3.ln = function() {
    return Je(this);
  };
  m3.negated = m3.neg = function() {
    var e3 = new this.constructor(this);
    return e3.s = -e3.s, y3(e3);
  };
  m3.plus = m3.add = function(e3) {
    var t, r, n, i3, o, s3, a, l3, u, c3, p3 = this, d3 = p3.constructor;
    if (e3 = new d3(e3), !p3.d || !e3.d)
      return !p3.s || !e3.s ? e3 = new d3(NaN) : p3.d || (e3 = new d3(e3.d || p3.s === e3.s ? p3 : NaN)), e3;
    if (p3.s != e3.s)
      return e3.s = -e3.s, p3.minus(e3);
    if (u = p3.d, c3 = e3.d, a = d3.precision, l3 = d3.rounding, !u[0] || !c3[0])
      return c3[0] || (e3 = new d3(p3)), x3 ? y3(e3, a, l3) : e3;
    if (o = ee(p3.e / b), n = ee(e3.e / b), u = u.slice(), i3 = o - n, i3) {
      for (i3 < 0 ? (r = u, i3 = -i3, s3 = c3.length) : (r = c3, n = o, s3 = u.length), o = Math.ceil(a / b), s3 = o > s3 ? o + 1 : s3 + 1, i3 > s3 && (i3 = s3, r.length = 1), r.reverse();i3--; )
        r.push(0);
      r.reverse();
    }
    for (s3 = u.length, i3 = c3.length, s3 - i3 < 0 && (i3 = s3, r = c3, c3 = u, u = r), t = 0;i3; )
      t = (u[--i3] = u[i3] + c3[i3] + t) / ge | 0, u[i3] %= ge;
    for (t && (u.unshift(t), ++n), s3 = u.length;u[--s3] == 0; )
      u.pop();
    return e3.d = u, e3.e = an(u, n), x3 ? y3(e3, a, l3) : e3;
  };
  m3.precision = m3.sd = function(e3) {
    var t, r = this;
    if (e3 !== undefined && e3 !== !!e3 && e3 !== 1 && e3 !== 0)
      throw Error(We + e3);
    return r.d ? (t = vs(r.d), e3 && r.e + 1 > t && (t = r.e + 1)) : t = NaN, t;
  };
  m3.round = function() {
    var e3 = this, t = e3.constructor;
    return y3(new t(e3), e3.e + 1, t.rounding);
  };
  m3.sine = m3.sin = function() {
    var e3, t, r = this, n = r.constructor;
    return r.isFinite() ? r.isZero() ? new n(r) : (e3 = n.precision, t = n.rounding, n.precision = e3 + Math.max(r.e, r.sd()) + b, n.rounding = 1, r = fc(n, Ss(n, r)), n.precision = e3, n.rounding = t, y3(Fe > 2 ? r.neg() : r, e3, t, true)) : new n(NaN);
  };
  m3.squareRoot = m3.sqrt = function() {
    var e3, t, r, n, i3, o, s3 = this, a = s3.d, l3 = s3.e, u = s3.s, c3 = s3.constructor;
    if (u !== 1 || !a || !a[0])
      return new c3(!u || u < 0 && (!a || a[0]) ? NaN : a ? s3 : 1 / 0);
    for (x3 = false, u = Math.sqrt(+s3), u == 0 || u == 1 / 0 ? (t = K(a), (t.length + l3) % 2 == 0 && (t += "0"), u = Math.sqrt(t), l3 = ee((l3 + 1) / 2) - (l3 < 0 || l3 % 2), u == 1 / 0 ? t = "5e" + l3 : (t = u.toExponential(), t = t.slice(0, t.indexOf("e") + 1) + l3), n = new c3(t)) : n = new c3(u.toString()), r = (l3 = c3.precision) + 3;; )
      if (o = n, n = o.plus(N(s3, o, r + 2, 1)).times(0.5), K(o.d).slice(0, r) === (t = K(n.d)).slice(0, r))
        if (t = t.slice(r - 3, r + 1), t == "9999" || !i3 && t == "4999") {
          if (!i3 && (y3(o, l3 + 1, 0), o.times(o).eq(s3))) {
            n = o;
            break;
          }
          r += 4, i3 = 1;
        } else {
          (!+t || !+t.slice(1) && t.charAt(0) == "5") && (y3(n, l3 + 1, 1), e3 = !n.times(n).eq(s3));
          break;
        }
    return x3 = true, y3(n, l3, c3.rounding, e3);
  };
  m3.tangent = m3.tan = function() {
    var e3, t, r = this, n = r.constructor;
    return r.isFinite() ? r.isZero() ? new n(r) : (e3 = n.precision, t = n.rounding, n.precision = e3 + 10, n.rounding = 1, r = r.sin(), r.s = 1, r = N(r, new n(1).minus(r.times(r)).sqrt(), e3 + 10, 0), n.precision = e3, n.rounding = t, y3(Fe == 2 || Fe == 4 ? r.neg() : r, e3, t, true)) : new n(NaN);
  };
  m3.times = m3.mul = function(e3) {
    var t, r, n, i3, o, s3, a, l3, u, c3 = this, p3 = c3.constructor, d3 = c3.d, f3 = (e3 = new p3(e3)).d;
    if (e3.s *= c3.s, !d3 || !d3[0] || !f3 || !f3[0])
      return new p3(!e3.s || d3 && !d3[0] && !f3 || f3 && !f3[0] && !d3 ? NaN : !d3 || !f3 ? e3.s / 0 : e3.s * 0);
    for (r = ee(c3.e / b) + ee(e3.e / b), l3 = d3.length, u = f3.length, l3 < u && (o = d3, d3 = f3, f3 = o, s3 = l3, l3 = u, u = s3), o = [], s3 = l3 + u, n = s3;n--; )
      o.push(0);
    for (n = u;--n >= 0; ) {
      for (t = 0, i3 = l3 + n;i3 > n; )
        a = o[i3] + f3[n] * d3[i3 - n - 1] + t, o[i3--] = a % ge | 0, t = a / ge | 0;
      o[i3] = (o[i3] + t) % ge | 0;
    }
    for (;!o[--s3]; )
      o.pop();
    return t ? ++r : o.shift(), e3.d = o, e3.e = an(o, r), x3 ? y3(e3, p3.precision, p3.rounding) : e3;
  };
  m3.toBinary = function(e3, t) {
    return Ii(this, 2, e3, t);
  };
  m3.toDecimalPlaces = m3.toDP = function(e3, t) {
    var r = this, n = r.constructor;
    return r = new n(r), e3 === undefined ? r : (oe(e3, 0, He), t === undefined ? t = n.rounding : oe(t, 0, 8), y3(r, e3 + r.e + 1, t));
  };
  m3.toExponential = function(e3, t) {
    var r, n = this, i3 = n.constructor;
    return e3 === undefined ? r = Pe(n, true) : (oe(e3, 0, He), t === undefined ? t = i3.rounding : oe(t, 0, 8), n = y3(new i3(n), e3 + 1, t), r = Pe(n, true, e3 + 1)), n.isNeg() && !n.isZero() ? "-" + r : r;
  };
  m3.toFixed = function(e3, t) {
    var r, n, i3 = this, o = i3.constructor;
    return e3 === undefined ? r = Pe(i3) : (oe(e3, 0, He), t === undefined ? t = o.rounding : oe(t, 0, 8), n = y3(new o(i3), e3 + i3.e + 1, t), r = Pe(n, false, e3 + n.e + 1)), i3.isNeg() && !i3.isZero() ? "-" + r : r;
  };
  m3.toFraction = function(e3) {
    var t, r, n, i3, o, s3, a, l3, u, c3, p3, d3, f3 = this, g3 = f3.d, h3 = f3.constructor;
    if (!g3)
      return new h3(f3);
    if (u = r = new h3(1), n = l3 = new h3(0), t = new h3(n), o = t.e = vs(g3) - f3.e - 1, s3 = o % b, t.d[0] = G(10, s3 < 0 ? b + s3 : s3), e3 == null)
      e3 = o > 0 ? t : u;
    else {
      if (a = new h3(e3), !a.isInt() || a.lt(u))
        throw Error(We + a);
      e3 = a.gt(t) ? o > 0 ? t : u : a;
    }
    for (x3 = false, a = new h3(K(g3)), c3 = h3.precision, h3.precision = o = g3.length * b * 2;p3 = N(a, t, 0, 1, 1), i3 = r.plus(p3.times(n)), i3.cmp(e3) != 1; )
      r = n, n = i3, i3 = u, u = l3.plus(p3.times(i3)), l3 = i3, i3 = t, t = a.minus(p3.times(i3)), a = i3;
    return i3 = N(e3.minus(r), n, 0, 1, 1), l3 = l3.plus(i3.times(u)), r = r.plus(i3.times(n)), l3.s = u.s = f3.s, d3 = N(u, n, o, 1).minus(f3).abs().cmp(N(l3, r, o, 1).minus(f3).abs()) < 1 ? [u, n] : [l3, r], h3.precision = c3, x3 = true, d3;
  };
  m3.toHexadecimal = m3.toHex = function(e3, t) {
    return Ii(this, 16, e3, t);
  };
  m3.toNearest = function(e3, t) {
    var r = this, n = r.constructor;
    if (r = new n(r), e3 == null) {
      if (!r.d)
        return r;
      e3 = new n(1), t = n.rounding;
    } else {
      if (e3 = new n(e3), t === undefined ? t = n.rounding : oe(t, 0, 8), !r.d)
        return e3.s ? r : e3;
      if (!e3.d)
        return e3.s && (e3.s = r.s), e3;
    }
    return e3.d[0] ? (x3 = false, r = N(r, e3, 0, t, 1).times(e3), x3 = true, y3(r)) : (e3.s = r.s, r = e3), r;
  };
  m3.toNumber = function() {
    return +this;
  };
  m3.toOctal = function(e3, t) {
    return Ii(this, 8, e3, t);
  };
  m3.toPower = m3.pow = function(e3) {
    var t, r, n, i3, o, s3, a = this, l3 = a.constructor, u = +(e3 = new l3(e3));
    if (!a.d || !e3.d || !a.d[0] || !e3.d[0])
      return new l3(G(+a, u));
    if (a = new l3(a), a.eq(1))
      return a;
    if (n = l3.precision, o = l3.rounding, e3.eq(1))
      return y3(a, n, o);
    if (t = ee(e3.e / b), t >= e3.d.length - 1 && (r = u < 0 ? -u : u) <= cc)
      return i3 = Ts(l3, a, r, n), e3.s < 0 ? new l3(1).div(i3) : y3(i3, n, o);
    if (s3 = a.s, s3 < 0) {
      if (t < e3.d.length - 1)
        return new l3(NaN);
      if (e3.d[t] & 1 || (s3 = 1), a.e == 0 && a.d[0] == 1 && a.d.length == 1)
        return a.s = s3, a;
    }
    return r = G(+a, u), t = r == 0 || !isFinite(r) ? ee(u * (Math.log("0." + K(a.d)) / Math.LN10 + a.e + 1)) : new l3(r + "").e, t > l3.maxE + 1 || t < l3.minE - 1 ? new l3(t > 0 ? s3 / 0 : 0) : (x3 = false, l3.rounding = a.s = 1, r = Math.min(12, (t + "").length), i3 = Si(e3.times(Je(a, n + r)), n), i3.d && (i3 = y3(i3, n + 5, 1), or(i3.d, n, o) && (t = n + 10, i3 = y3(Si(e3.times(Je(a, t + r)), t), t + 5, 1), +K(i3.d).slice(n + 1, n + 15) + 1 == 100000000000000 && (i3 = y3(i3, n + 1, 0)))), i3.s = s3, x3 = true, l3.rounding = o, y3(i3, n, o));
  };
  m3.toPrecision = function(e3, t) {
    var r, n = this, i3 = n.constructor;
    return e3 === undefined ? r = Pe(n, n.e <= i3.toExpNeg || n.e >= i3.toExpPos) : (oe(e3, 1, He), t === undefined ? t = i3.rounding : oe(t, 0, 8), n = y3(new i3(n), e3, t), r = Pe(n, e3 <= n.e || n.e <= i3.toExpNeg, e3)), n.isNeg() && !n.isZero() ? "-" + r : r;
  };
  m3.toSignificantDigits = m3.toSD = function(e3, t) {
    var r = this, n = r.constructor;
    return e3 === undefined ? (e3 = n.precision, t = n.rounding) : (oe(e3, 1, He), t === undefined ? t = n.rounding : oe(t, 0, 8)), y3(new n(r), e3, t);
  };
  m3.toString = function() {
    var e3 = this, t = e3.constructor, r = Pe(e3, e3.e <= t.toExpNeg || e3.e >= t.toExpPos);
    return e3.isNeg() && !e3.isZero() ? "-" + r : r;
  };
  m3.truncated = m3.trunc = function() {
    return y3(new this.constructor(this), this.e + 1, 1);
  };
  m3.valueOf = m3.toJSON = function() {
    var e3 = this, t = e3.constructor, r = Pe(e3, e3.e <= t.toExpNeg || e3.e >= t.toExpPos);
    return e3.isNeg() ? "-" + r : r;
  };
  var N = function() {
    function e3(n, i3, o) {
      var s3, a = 0, l3 = n.length;
      for (n = n.slice();l3--; )
        s3 = n[l3] * i3 + a, n[l3] = s3 % o | 0, a = s3 / o | 0;
      return a && n.unshift(a), n;
    }
    function t(n, i3, o, s3) {
      var a, l3;
      if (o != s3)
        l3 = o > s3 ? 1 : -1;
      else
        for (a = l3 = 0;a < o; a++)
          if (n[a] != i3[a]) {
            l3 = n[a] > i3[a] ? 1 : -1;
            break;
          }
      return l3;
    }
    function r(n, i3, o, s3) {
      for (var a = 0;o--; )
        n[o] -= a, a = n[o] < i3[o] ? 1 : 0, n[o] = a * s3 + n[o] - i3[o];
      for (;!n[0] && n.length > 1; )
        n.shift();
    }
    return function(n, i3, o, s3, a, l3) {
      var u, c3, p3, d3, f3, g3, h3, O, T, S, C, E, me, ae, $t, U, ne, Se, z, pt, kr = n.constructor, Ln = n.s == i3.s ? 1 : -1, Y = n.d, _ = i3.d;
      if (!Y || !Y[0] || !_ || !_[0])
        return new kr(!n.s || !i3.s || (Y ? _ && Y[0] == _[0] : !_) ? NaN : Y && Y[0] == 0 || !_ ? Ln * 0 : Ln / 0);
      for (l3 ? (f3 = 1, c3 = n.e - i3.e) : (l3 = ge, f3 = b, c3 = ee(n.e / f3) - ee(i3.e / f3)), z = _.length, ne = Y.length, T = new kr(Ln), S = T.d = [], p3 = 0;_[p3] == (Y[p3] || 0); p3++)
        ;
      if (_[p3] > (Y[p3] || 0) && c3--, o == null ? (ae = o = kr.precision, s3 = kr.rounding) : a ? ae = o + (n.e - i3.e) + 1 : ae = o, ae < 0)
        S.push(1), g3 = true;
      else {
        if (ae = ae / f3 + 2 | 0, p3 = 0, z == 1) {
          for (d3 = 0, _ = _[0], ae++;(p3 < ne || d3) && ae--; p3++)
            $t = d3 * l3 + (Y[p3] || 0), S[p3] = $t / _ | 0, d3 = $t % _ | 0;
          g3 = d3 || p3 < ne;
        } else {
          for (d3 = l3 / (_[0] + 1) | 0, d3 > 1 && (_ = e3(_, d3, l3), Y = e3(Y, d3, l3), z = _.length, ne = Y.length), U = z, C = Y.slice(0, z), E = C.length;E < z; )
            C[E++] = 0;
          pt = _.slice(), pt.unshift(0), Se = _[0], _[1] >= l3 / 2 && ++Se;
          do
            d3 = 0, u = t(_, C, z, E), u < 0 ? (me = C[0], z != E && (me = me * l3 + (C[1] || 0)), d3 = me / Se | 0, d3 > 1 ? (d3 >= l3 && (d3 = l3 - 1), h3 = e3(_, d3, l3), O = h3.length, E = C.length, u = t(h3, C, O, E), u == 1 && (d3--, r(h3, z < O ? pt : _, O, l3))) : (d3 == 0 && (u = d3 = 1), h3 = _.slice()), O = h3.length, O < E && h3.unshift(0), r(C, h3, E, l3), u == -1 && (E = C.length, u = t(_, C, z, E), u < 1 && (d3++, r(C, z < E ? pt : _, E, l3))), E = C.length) : u === 0 && (d3++, C = [0]), S[p3++] = d3, u && C[0] ? C[E++] = Y[U] || 0 : (C = [Y[U]], E = 1);
          while ((U++ < ne || C[0] !== undefined) && ae--);
          g3 = C[0] !== undefined;
        }
        S[0] || S.shift();
      }
      if (f3 == 1)
        T.e = c3, bs = g3;
      else {
        for (p3 = 1, d3 = S[0];d3 >= 10; d3 /= 10)
          p3++;
        T.e = p3 + c3 * f3 - 1, y3(T, a ? o + T.e + 1 : o, s3, g3);
      }
      return T;
    };
  }();
  m3[Symbol.for("nodejs.util.inspect.custom")] = m3.toString;
  m3[Symbol.toStringTag] = "Decimal";
  var it = m3.constructor = As(Ri);
  rn = new it(rn);
  nn = new it(nn);
  var ve = it;
  var sr = class {
    constructor(t, r, n, i3, o) {
      this.modelName = t, this.name = r, this.typeName = n, this.isList = i3, this.isEnum = o;
    }
    _toGraphQLInputType() {
      let t = this.isList ? "List" : "", r = this.isEnum ? "Enum" : "";
      return `${t}${r}${this.typeName}FieldRefInput<${this.modelName}>`;
    }
  };
  var un = class {
    constructor(t) {
      this.value = t;
    }
    write(t) {
      t.write(this.value);
    }
    markAsError() {
      this.value.markAsError();
    }
  };
  var cn = (e3) => e3;
  var pn = { bold: cn, red: cn, green: cn, dim: cn, enabled: false };
  var Is = { bold: W, red: ce, green: Me, dim: Ae, enabled: true };
  var Ct = { write(e3) {
    e3.writeLine(",");
  } };
  var Te = class {
    constructor(t) {
      this.contents = t;
      this.isUnderlined = false;
      this.color = (t3) => t3;
    }
    underline() {
      return this.isUnderlined = true, this;
    }
    setColor(t) {
      return this.color = t, this;
    }
    write(t) {
      let r = t.getCurrentLineLength();
      t.write(this.color(this.contents)), this.isUnderlined && t.afterNextNewline(() => {
        t.write(" ".repeat(r)).writeLine(this.color("~".repeat(this.contents.length)));
      });
    }
  };
  var Ke = class {
    constructor() {
      this.hasError = false;
    }
    markAsError() {
      return this.hasError = true, this;
    }
  };
  var St = class extends Ke {
    constructor() {
      super(...arguments);
      this.items = [];
    }
    addItem(r) {
      return this.items.push(new un(r)), this;
    }
    getField(r) {
      return this.items[r];
    }
    getPrintWidth() {
      return this.items.length === 0 ? 2 : Math.max(...this.items.map((n) => n.value.getPrintWidth())) + 2;
    }
    write(r) {
      if (this.items.length === 0) {
        this.writeEmpty(r);
        return;
      }
      this.writeWithItems(r);
    }
    writeEmpty(r) {
      let n = new Te("[]");
      this.hasError && n.setColor(r.context.colors.red).underline(), r.write(n);
    }
    writeWithItems(r) {
      let { colors: n } = r.context;
      r.writeLine("[").withIndent(() => r.writeJoined(Ct, this.items).newLine()).write("]"), this.hasError && r.afterNextNewline(() => {
        r.writeLine(n.red("~".repeat(this.getPrintWidth())));
      });
    }
    asObject() {
    }
  };
  var Os = ": ";
  var dn = class {
    constructor(t, r) {
      this.name = t;
      this.value = r;
      this.hasError = false;
    }
    markAsError() {
      this.hasError = true;
    }
    getPrintWidth() {
      return this.name.length + this.value.getPrintWidth() + Os.length;
    }
    write(t) {
      let r = new Te(this.name);
      this.hasError && r.underline().setColor(t.context.colors.red), t.write(r).write(Os).write(this.value);
    }
  };
  var At = class e3 extends Ke {
    constructor() {
      super(...arguments);
      this.fields = {};
      this.suggestions = [];
    }
    addField(r) {
      this.fields[r.name] = r;
    }
    addSuggestion(r) {
      this.suggestions.push(r);
    }
    getField(r) {
      return this.fields[r];
    }
    getDeepField(r) {
      let [n, ...i3] = r, o = this.getField(n);
      if (!o)
        return;
      let s3 = o;
      for (let a of i3) {
        let l3;
        if (s3.value instanceof e3 ? l3 = s3.value.getField(a) : s3.value instanceof St && (l3 = s3.value.getField(Number(a))), !l3)
          return;
        s3 = l3;
      }
      return s3;
    }
    getDeepFieldValue(r) {
      return r.length === 0 ? this : this.getDeepField(r)?.value;
    }
    hasField(r) {
      return !!this.getField(r);
    }
    removeAllFields() {
      this.fields = {};
    }
    removeField(r) {
      delete this.fields[r];
    }
    getFields() {
      return this.fields;
    }
    isEmpty() {
      return Object.keys(this.fields).length === 0;
    }
    getFieldValue(r) {
      return this.getField(r)?.value;
    }
    getDeepSubSelectionValue(r) {
      let n = this;
      for (let i3 of r) {
        if (!(n instanceof e3))
          return;
        let o = n.getSubSelectionValue(i3);
        if (!o)
          return;
        n = o;
      }
      return n;
    }
    getDeepSelectionParent(r) {
      let n = this.getSelectionParent();
      if (!n)
        return;
      let i3 = n;
      for (let o of r) {
        let s3 = i3.value.getFieldValue(o);
        if (!s3 || !(s3 instanceof e3))
          return;
        let a = s3.getSelectionParent();
        if (!a)
          return;
        i3 = a;
      }
      return i3;
    }
    getSelectionParent() {
      let r = this.getField("select")?.value.asObject();
      if (r)
        return { kind: "select", value: r };
      let n = this.getField("include")?.value.asObject();
      if (n)
        return { kind: "include", value: n };
    }
    getSubSelectionValue(r) {
      return this.getSelectionParent()?.value.fields[r].value;
    }
    getPrintWidth() {
      let r = Object.values(this.fields);
      return r.length == 0 ? 2 : Math.max(...r.map((i3) => i3.getPrintWidth())) + 2;
    }
    write(r) {
      let n = Object.values(this.fields);
      if (n.length === 0 && this.suggestions.length === 0) {
        this.writeEmpty(r);
        return;
      }
      this.writeWithContents(r, n);
    }
    asObject() {
      return this;
    }
    writeEmpty(r) {
      let n = new Te("{}");
      this.hasError && n.setColor(r.context.colors.red).underline(), r.write(n);
    }
    writeWithContents(r, n) {
      r.writeLine("{").withIndent(() => {
        r.writeJoined(Ct, [...n, ...this.suggestions]).newLine();
      }), r.write("}"), this.hasError && r.afterNextNewline(() => {
        r.writeLine(r.context.colors.red("~".repeat(this.getPrintWidth())));
      });
    }
  };
  var J = class extends Ke {
    constructor(r) {
      super();
      this.text = r;
    }
    getPrintWidth() {
      return this.text.length;
    }
    write(r) {
      let n = new Te(this.text);
      this.hasError && n.underline().setColor(r.context.colors.red), r.write(n);
    }
    asObject() {
    }
  };
  var Oi = class {
    constructor(t) {
      this.errorMessages = [];
      this.arguments = t;
    }
    write(t) {
      t.write(this.arguments);
    }
    addErrorMessage(t) {
      this.errorMessages.push(t);
    }
    renderAllMessages(t) {
      return this.errorMessages.map((r) => r(t)).join(`
`);
    }
  };
  var rp = "P2037";
  var ar = "<unknown>";
  var ip = /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/|[a-z]:\\|\\\\).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
  var op = /\((\S*)(?::(\d+))(?::(\d+))\)/;
  var ap = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i;
  var up = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\[native).*?|[^@]*bundle)(?::(\d+))?(?::(\d+))?\s*$/i;
  var cp = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
  var dp = /^\s*(?:([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i;
  var fp = /^\s*at (?:((?:\[object object\])?[^\\/]+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i;
  var ki = class {
    getLocation() {
      return null;
    }
  };
  var Di = class {
    constructor() {
      this._error = new Error;
    }
    getLocation() {
      let t = this._error.stack;
      if (!t)
        return null;
      let n = Ls(t).find((i3) => {
        if (!i3.file)
          return false;
        let o = li(i3.file);
        return o !== "<anonymous>" && !o.includes("@prisma") && !o.includes("/packages/client/src/runtime/") && !o.endsWith("/runtime/binary.js") && !o.endsWith("/runtime/library.js") && !o.endsWith("/runtime/edge.js") && !o.endsWith("/runtime/edge-esm.js") && !o.startsWith("internal/") && !i3.methodName.includes("new ") && !i3.methodName.includes("getCallSite") && !i3.methodName.includes("Proxy.") && i3.methodName.split(".").length < 4;
      });
      return !n || !n.file ? null : { fileName: n.file, lineNumber: n.lineNumber, columnNumber: n.column };
    }
  };
  var Fs = { _avg: true, _count: true, _sum: true, _min: true, _max: true };
  var Vs = (e3) => Array.isArray(e3) ? e3 : e3.split(".");
  var _i = (e3, t) => Vs(t).reduce((r, n) => r && r[n], e3);
  var Bs = (e3, t, r) => Vs(t).reduceRight((n, i3, o, s3) => Object.assign({}, _i(e3, s3.slice(0, o)), { [i3]: n }), r);
  var Hs = k(ui());
  var Ws = k(import.meta.require("fs"));
  var Us = { keyword: Oe, entity: Oe, value: (e3) => W(et(e3)), punctuation: et, directive: Oe, function: Oe, variable: (e3) => W(et(e3)), string: (e3) => W(Me(e3)), boolean: Ie, number: Oe, comment: jt };
  var Rp = (e3) => e3;
  var gn = {};
  var Cp = 0;
  var P = { manual: gn.Prism && gn.Prism.manual, disableWorkerMessageHandler: gn.Prism && gn.Prism.disableWorkerMessageHandler, util: { encode: function(e3) {
    if (e3 instanceof he) {
      let t = e3;
      return new he(t.type, P.util.encode(t.content), t.alias);
    } else
      return Array.isArray(e3) ? e3.map(P.util.encode) : e3.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
  }, type: function(e3) {
    return Object.prototype.toString.call(e3).slice(8, -1);
  }, objId: function(e3) {
    return e3.__id || Object.defineProperty(e3, "__id", { value: ++Cp }), e3.__id;
  }, clone: function e(t, r) {
    let n, i3, o = P.util.type(t);
    switch (r = r || {}, o) {
      case "Object":
        if (i3 = P.util.objId(t), r[i3])
          return r[i3];
        n = {}, r[i3] = n;
        for (let s3 in t)
          t.hasOwnProperty(s3) && (n[s3] = e(t[s3], r));
        return n;
      case "Array":
        return i3 = P.util.objId(t), r[i3] ? r[i3] : (n = [], r[i3] = n, t.forEach(function(s3, a) {
          n[a] = e(s3, r);
        }), n);
      default:
        return t;
    }
  } }, languages: { extend: function(e3, t) {
    let r = P.util.clone(P.languages[e3]);
    for (let n in t)
      r[n] = t[n];
    return r;
  }, insertBefore: function(e3, t, r, n) {
    n = n || P.languages;
    let i3 = n[e3], o = {};
    for (let a in i3)
      if (i3.hasOwnProperty(a)) {
        if (a == t)
          for (let l3 in r)
            r.hasOwnProperty(l3) && (o[l3] = r[l3]);
        r.hasOwnProperty(a) || (o[a] = i3[a]);
      }
    let s3 = n[e3];
    return n[e3] = o, P.languages.DFS(P.languages, function(a, l3) {
      l3 === s3 && a != e3 && (this[a] = o);
    }), o;
  }, DFS: function e(t, r, n, i3) {
    i3 = i3 || {};
    let o = P.util.objId;
    for (let s3 in t)
      if (t.hasOwnProperty(s3)) {
        r.call(t, s3, t[s3], n || s3);
        let a = t[s3], l3 = P.util.type(a);
        l3 === "Object" && !i3[o(a)] ? (i3[o(a)] = true, e(a, r, null, i3)) : l3 === "Array" && !i3[o(a)] && (i3[o(a)] = true, e(a, r, s3, i3));
      }
  } }, plugins: {}, highlight: function(e3, t, r) {
    let n = { code: e3, grammar: t, language: r };
    return P.hooks.run("before-tokenize", n), n.tokens = P.tokenize(n.code, n.grammar), P.hooks.run("after-tokenize", n), he.stringify(P.util.encode(n.tokens), n.language);
  }, matchGrammar: function(e3, t, r, n, i3, o, s3) {
    for (let h3 in r) {
      if (!r.hasOwnProperty(h3) || !r[h3])
        continue;
      if (h3 == s3)
        return;
      let O = r[h3];
      O = P.util.type(O) === "Array" ? O : [O];
      for (let T = 0;T < O.length; ++T) {
        let S = O[T], C = S.inside, E = !!S.lookbehind, me = !!S.greedy, ae = 0, $t = S.alias;
        if (me && !S.pattern.global) {
          let U = S.pattern.toString().match(/[imuy]*$/)[0];
          S.pattern = RegExp(S.pattern.source, U + "g");
        }
        S = S.pattern || S;
        for (let U = n, ne = i3;U < t.length; ne += t[U].length, ++U) {
          let Se = t[U];
          if (t.length > e3.length)
            return;
          if (Se instanceof he)
            continue;
          if (me && U != t.length - 1) {
            S.lastIndex = ne;
            var p3 = S.exec(e3);
            if (!p3)
              break;
            var c3 = p3.index + (E ? p3[1].length : 0), d3 = p3.index + p3[0].length, a = U, l3 = ne;
            for (let _ = t.length;a < _ && (l3 < d3 || !t[a].type && !t[a - 1].greedy); ++a)
              l3 += t[a].length, c3 >= l3 && (++U, ne = l3);
            if (t[U] instanceof he)
              continue;
            u = a - U, Se = e3.slice(ne, l3), p3.index -= ne;
          } else {
            S.lastIndex = 0;
            var p3 = S.exec(Se), u = 1;
          }
          if (!p3) {
            if (o)
              break;
            continue;
          }
          E && (ae = p3[1] ? p3[1].length : 0);
          var c3 = p3.index + ae, p3 = p3[0].slice(ae), d3 = c3 + p3.length, f3 = Se.slice(0, c3), g3 = Se.slice(d3);
          let z = [U, u];
          f3 && (++U, ne += f3.length, z.push(f3));
          let pt = new he(h3, C ? P.tokenize(p3, C) : p3, $t, p3, me);
          if (z.push(pt), g3 && z.push(g3), Array.prototype.splice.apply(t, z), u != 1 && P.matchGrammar(e3, t, r, U, ne, true, h3), o)
            break;
        }
      }
    }
  }, tokenize: function(e3, t) {
    let r = [e3], n = t.rest;
    if (n) {
      for (let i3 in n)
        t[i3] = n[i3];
      delete t.rest;
    }
    return P.matchGrammar(e3, r, t, 0, 0, false), r;
  }, hooks: { all: {}, add: function(e3, t) {
    let r = P.hooks.all;
    r[e3] = r[e3] || [], r[e3].push(t);
  }, run: function(e3, t) {
    let r = P.hooks.all[e3];
    if (!(!r || !r.length))
      for (var n = 0, i3;i3 = r[n++]; )
        i3(t);
  } }, Token: he };
  P.languages.clike = { comment: [{ pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/, lookbehind: true }, { pattern: /(^|[^\\:])\/\/.*/, lookbehind: true, greedy: true }], string: { pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/, greedy: true }, "class-name": { pattern: /((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[\w.\\]+/i, lookbehind: true, inside: { punctuation: /[.\\]/ } }, keyword: /\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/, boolean: /\b(?:true|false)\b/, function: /\w+(?=\()/, number: /\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i, operator: /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/, punctuation: /[{}[\];(),.:]/ };
  P.languages.javascript = P.languages.extend("clike", { "class-name": [P.languages.clike["class-name"], { pattern: /(^|[^$\w\xA0-\uFFFF])[_$A-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\.(?:prototype|constructor))/, lookbehind: true }], keyword: [{ pattern: /((?:^|})\s*)(?:catch|finally)\b/, lookbehind: true }, { pattern: /(^|[^.])\b(?:as|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/, lookbehind: true }], number: /\b(?:(?:0[xX](?:[\dA-Fa-f](?:_[\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\d(?:_\d)?)+n|NaN|Infinity)\b|(?:\b(?:\d(?:_\d)?)+\.?(?:\d(?:_\d)?)*|\B\.(?:\d(?:_\d)?)+)(?:[Ee][+-]?(?:\d(?:_\d)?)+)?/, function: /[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/, operator: /-[-=]?|\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\|[|=]?|\*\*?=?|\/=?|~|\^=?|%=?|\?|\.{3}/ });
  P.languages.javascript["class-name"][0].pattern = /(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/;
  P.languages.insertBefore("javascript", "keyword", { regex: { pattern: /((?:^|[^$\w\xA0-\uFFFF."'\])\s])\s*)\/(\[(?:[^\]\\\r\n]|\\.)*]|\\.|[^/\\\[\r\n])+\/[gimyus]{0,6}(?=\s*($|[\r\n,.;})\]]))/, lookbehind: true, greedy: true }, "function-variable": { pattern: /[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/, alias: "function" }, parameter: [{ pattern: /(function(?:\s+[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)?\s*\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\))/, lookbehind: true, inside: P.languages.javascript }, { pattern: /[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=>)/i, inside: P.languages.javascript }, { pattern: /(\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*=>)/, lookbehind: true, inside: P.languages.javascript }, { pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*\s*)\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*\{)/, lookbehind: true, inside: P.languages.javascript }], constant: /\b[A-Z](?:[A-Z_]|\dx?)*\b/ });
  P.languages.markup && P.languages.markup.tag.addInlined("script", "javascript");
  P.languages.js = P.languages.javascript;
  P.languages.typescript = P.languages.extend("javascript", { keyword: /\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\b/, builtin: /\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\b/ });
  P.languages.ts = P.languages.typescript;
  he.stringify = function(e3, t) {
    return typeof e3 == "string" ? e3 : Array.isArray(e3) ? e3.map(function(r) {
      return he.stringify(r, t);
    }).join("") : Sp(e3.type)(e3.content);
  };
  var Qs = k(es());
  var hn = class e3 {
    static read(t) {
      let r;
      try {
        r = Ws.default.readFileSync(t, "utf-8");
      } catch {
        return null;
      }
      return e3.fromContent(r);
    }
    static fromContent(t) {
      let r = t.split(/\r?\n/);
      return new e3(1, r);
    }
    constructor(t, r) {
      this.firstLineNumber = t, this.lines = r;
    }
    get lastLineNumber() {
      return this.firstLineNumber + this.lines.length - 1;
    }
    mapLineAt(t, r) {
      if (t < this.firstLineNumber || t > this.lines.length + this.firstLineNumber)
        return this;
      let n = t - this.firstLineNumber, i3 = [...this.lines];
      return i3[n] = r(i3[n]), new e3(this.firstLineNumber, i3);
    }
    mapLines(t) {
      return new e3(this.firstLineNumber, this.lines.map((r, n) => t(r, this.firstLineNumber + n)));
    }
    lineAt(t) {
      return this.lines[t - this.firstLineNumber];
    }
    prependSymbolAt(t, r) {
      return this.mapLines((n, i3) => i3 === t ? `${r} ${n}` : `  ${n}`);
    }
    slice(t, r) {
      let n = this.lines.slice(t - 1, r).join(`
`);
      return new e3(t, Js(n).split(`
`));
    }
    highlight() {
      let t = Gs(this.toString());
      return new e3(this.firstLineNumber, t.split(`
`));
    }
    toString() {
      return this.lines.join(`
`);
    }
  };
  var Ip = { red: ce, gray: jt, dim: Ae, bold: W, underline: X, highlightSource: (e3) => e3.highlight() };
  var Op = { red: (e3) => e3, gray: (e3) => e3, dim: (e3) => e3, bold: (e3) => e3, underline: (e3) => e3, highlightSource: (e3) => e3 };
  var $p = ["findUnique", "findUniqueOrThrow", "findFirst", "findFirstOrThrow", "create", "update", "upsert", "delete"];
  var qp = ["aggregate", "count", "groupBy"];
  var Ni = Symbol();
  var na = (e3) => e3;
  var bn = class {
    constructor(t, r) {
      this.extension = t;
      this.previous = r;
      this.computedFieldsCache = new we;
      this.modelExtensionsCache = new we;
      this.queryCallbacksCache = new we;
      this.clientExtensions = Zt(() => this.extension.client ? { ...this.previous?.getAllClientExtensions(), ...this.extension.client } : this.previous?.getAllClientExtensions());
      this.batchCallbacks = Zt(() => {
        let t3 = this.previous?.getAllBatchQueryCallbacks() ?? [], r3 = this.extension.query?.$__internalBatch;
        return r3 ? t3.concat(r3) : t3;
      });
    }
    getAllComputedFields(t) {
      return this.computedFieldsCache.getOrCreate(t, () => ca(this.previous?.getAllComputedFields(t), this.extension, t));
    }
    getAllClientExtensions() {
      return this.clientExtensions.get();
    }
    getAllModelExtensions(t) {
      return this.modelExtensionsCache.getOrCreate(t, () => {
        let r = Re(t);
        return !this.extension.model || !(this.extension.model[r] || this.extension.model.$allModels) ? this.previous?.getAllModelExtensions(t) : { ...this.previous?.getAllModelExtensions(t), ...this.extension.model.$allModels, ...this.extension.model[r] };
      });
    }
    getAllQueryCallbacks(t, r) {
      return this.queryCallbacksCache.getOrCreate(`${t}:${r}`, () => {
        let n = this.previous?.getAllQueryCallbacks(t, r) ?? [], i3 = [], o = this.extension.query;
        return !o || !(o[t] || o.$allModels || o[r] || o.$allOperations) ? n : (o[t] !== undefined && (o[t][r] !== undefined && i3.push(o[t][r]), o[t].$allOperations !== undefined && i3.push(o[t].$allOperations)), t !== "$none" && o.$allModels !== undefined && (o.$allModels[r] !== undefined && i3.push(o.$allModels[r]), o.$allModels.$allOperations !== undefined && i3.push(o.$allModels.$allOperations)), o[r] !== undefined && i3.push(o[r]), o.$allOperations !== undefined && i3.push(o.$allOperations), n.concat(i3));
      });
    }
    getAllBatchQueryCallbacks() {
      return this.batchCallbacks.get();
    }
  };
  var En = class e3 {
    constructor(t) {
      this.head = t;
    }
    static empty() {
      return new e3;
    }
    static single(t) {
      return new e3(new bn(t));
    }
    isEmpty() {
      return this.head === undefined;
    }
    append(t) {
      return new e3(new bn(t, this.head));
    }
    getAllComputedFields(t) {
      return this.head?.getAllComputedFields(t);
    }
    getAllClientExtensions() {
      return this.head?.getAllClientExtensions();
    }
    getAllModelExtensions(t) {
      return this.head?.getAllModelExtensions(t);
    }
    getAllQueryCallbacks(t, r) {
      return this.head?.getAllQueryCallbacks(t, r) ?? [];
    }
    getAllBatchQueryCallbacks() {
      return this.head?.getAllBatchQueryCallbacks() ?? [];
    }
  };
  var ma = F("prisma:client");
  var fa = { Vercel: "vercel", "Netlify CI": "netlify" };
  var Kp = "Cloudflare-Workers";
  var zp = "node";
  var Yp = { node: "Node.js", workerd: "Cloudflare Workers", deno: "Deno and Deno Deploy", netlify: "Netlify Edge Functions", "edge-light": "Edge Runtime (Vercel Edge Functions, Vercel Edge Middleware, Next.js (Pages Router) Edge API Routes, Next.js (App Router) Edge Route Handlers or Next.js Middleware)" };
  var Pa = k(import.meta.require("fs"));
  var cr = k(import.meta.require("path"));
  var Xp = F("prisma:client:engines:resolveEnginePath");
  var ed = () => new RegExp("runtime[\\\\/]library\\.m?js$");
  var Mi = k(mi());
  var Sa = k(as());
  var Tn = class extends Error {
    constructor(t, r) {
      super(t), this.clientVersion = r.clientVersion, this.cause = r.cause;
    }
    get [Symbol.toStringTag]() {
      return this.name;
    }
  };
  var se = class extends Tn {
    constructor(t, r) {
      super(t, r), this.isRetryable = r.isRetryable ?? true;
    }
  };
  var _t = class extends se {
    constructor(r) {
      super("This request must be retried", A3(r, true));
      this.name = "ForcedRetryError";
      this.code = "P5001";
    }
  };
  w(_t, "ForcedRetryError");
  var st = class extends se {
    constructor(r, n) {
      super(r, A3(n, false));
      this.name = "InvalidDatasourceError";
      this.code = "P6001";
    }
  };
  w(st, "InvalidDatasourceError");
  var at = class extends se {
    constructor(r, n) {
      super(r, A3(n, false));
      this.name = "NotImplementedYetError";
      this.code = "P5004";
    }
  };
  w(at, "NotImplementedYetError");
  var q = class extends se {
    constructor(t, r) {
      super(t, r), this.response = r.response;
      let n = this.response.headers.get("prisma-request-id");
      if (n) {
        let i3 = `(The request id was: ${n})`;
        this.message = this.message + " " + i3;
      }
    }
  };
  var lt = class extends q {
    constructor(r) {
      super("Schema needs to be uploaded", A3(r, true));
      this.name = "SchemaMissingError";
      this.code = "P5005";
    }
  };
  w(lt, "SchemaMissingError");
  var $i = "This request could not be understood by the server";
  var pr = class extends q {
    constructor(r, n, i3) {
      super(n || $i, A3(r, false));
      this.name = "BadRequestError";
      this.code = "P5000";
      i3 && (this.code = i3);
    }
  };
  w(pr, "BadRequestError");
  var dr = class extends q {
    constructor(r, n) {
      super("Engine not started: healthcheck timeout", A3(r, true));
      this.name = "HealthcheckTimeoutError";
      this.code = "P5013";
      this.logs = n;
    }
  };
  w(dr, "HealthcheckTimeoutError");
  var mr = class extends q {
    constructor(r, n, i3) {
      super(n, A3(r, true));
      this.name = "EngineStartupError";
      this.code = "P5014";
      this.logs = i3;
    }
  };
  w(mr, "EngineStartupError");
  var fr = class extends q {
    constructor(r) {
      super("Engine version is not supported", A3(r, false));
      this.name = "EngineVersionNotSupportedError";
      this.code = "P5012";
    }
  };
  w(fr, "EngineVersionNotSupportedError");
  var qi = "Request timed out";
  var gr = class extends q {
    constructor(r, n = qi) {
      super(n, A3(r, false));
      this.name = "GatewayTimeoutError";
      this.code = "P5009";
    }
  };
  w(gr, "GatewayTimeoutError");
  var rd = "Interactive transaction error";
  var hr = class extends q {
    constructor(r, n = rd) {
      super(n, A3(r, false));
      this.name = "InteractiveTransactionError";
      this.code = "P5015";
    }
  };
  w(hr, "InteractiveTransactionError");
  var nd = "Request parameters are invalid";
  var yr = class extends q {
    constructor(r, n = nd) {
      super(n, A3(r, false));
      this.name = "InvalidRequestError";
      this.code = "P5011";
    }
  };
  w(yr, "InvalidRequestError");
  var ji = "Requested resource does not exist";
  var br = class extends q {
    constructor(r, n = ji) {
      super(n, A3(r, false));
      this.name = "NotFoundError";
      this.code = "P5003";
    }
  };
  w(br, "NotFoundError");
  var Vi = "Unknown server error";
  var Lt = class extends q {
    constructor(r, n, i3) {
      super(n || Vi, A3(r, true));
      this.name = "ServerError";
      this.code = "P5006";
      this.logs = i3;
    }
  };
  w(Lt, "ServerError");
  var Bi = "Unauthorized, check your connection string";
  var Er = class extends q {
    constructor(r, n = Bi) {
      super(n, A3(r, false));
      this.name = "UnauthorizedError";
      this.code = "P5007";
    }
  };
  w(Er, "UnauthorizedError");
  var Ui = "Usage exceeded, retry again later";
  var wr = class extends q {
    constructor(r, n = Ui) {
      super(n, A3(r, true));
      this.name = "UsageExceededError";
      this.code = "P5008";
    }
  };
  w(wr, "UsageExceededError");
  var Ne = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var La = { "@prisma/debug": "workspace:*", "@prisma/engines-version": "5.18.0-25.4c784e32044a8a016d99474bd02a3b6123742169", "@prisma/fetch-engine": "workspace:*", "@prisma/get-platform": "workspace:*" };
  var Pr = class extends se {
    constructor(r, n) {
      super(`Cannot fetch data from service:
${r}`, A3(n, true));
      this.name = "RequestError";
      this.code = "P5010";
    }
  };
  w(Pr, "RequestError");
  var cd = "function" < "u" ? import.meta.require : () => {
  };
  var Qi = class {
    constructor(t = {}) {
      this.headers = new Map;
      for (let [r, n] of Object.entries(t))
        if (typeof n == "string")
          this.headers.set(r, n);
        else if (Array.isArray(n))
          for (let i3 of n)
            this.headers.set(r, i3);
    }
    append(t, r) {
      this.headers.set(t, r);
    }
    delete(t) {
      this.headers.delete(t);
    }
    get(t) {
      return this.headers.get(t) ?? null;
    }
    has(t) {
      return this.headers.has(t);
    }
    set(t, r) {
      this.headers.set(t, r);
    }
    forEach(t, r) {
      for (let [n, i3] of this.headers)
        t.call(r, i3, n, this);
    }
  };
  var pd = /^[1-9][0-9]*\.[0-9]+\.[0-9]+$/;
  var Fa = F("prisma:client:dataproxyEngine");
  var Ma = 3;
  var Ji = F("prisma:client:dataproxyEngine");
  var Wi = class {
    constructor({ apiKey: t, tracingHelper: r, logLevel: n, logQueries: i3, engineHash: o }) {
      this.apiKey = t, this.tracingHelper = r, this.logLevel = n, this.logQueries = i3, this.engineHash = o;
    }
    build({ traceparent: t, interactiveTransaction: r } = {}) {
      let n = { Authorization: `Bearer ${this.apiKey}`, "Prisma-Engine-Hash": this.engineHash };
      this.tracingHelper.isEnabled() && (n.traceparent = t ?? this.tracingHelper.getTraceParent()), r && (n["X-transaction-id"] = r.id);
      let i3 = this.buildCaptureSettings();
      return i3.length > 0 && (n["X-capture-telemetry"] = i3.join(", ")), n;
    }
    buildCaptureSettings() {
      let t = [];
      return this.tracingHelper.isEnabled() && t.push("tracing"), this.logLevel && t.push(this.logLevel), this.logQueries && t.push("query"), t;
    }
  };
  var vr = class {
    constructor(t) {
      this.name = "DataProxyEngine";
      Da(t), this.config = t, this.env = { ...t.env, ...typeof process < "u" ? process.env : {} }, this.inlineSchema = ka(t.inlineSchema), this.inlineDatasources = t.inlineDatasources, this.inlineSchemaHash = t.inlineSchemaHash, this.clientVersion = t.clientVersion, this.engineHash = t.engineVersion, this.logEmitter = t.logEmitter, this.tracingHelper = t.tracingHelper;
    }
    apiKey() {
      return this.headerBuilder.apiKey;
    }
    version() {
      return this.engineHash;
    }
    async start() {
      this.startPromise !== undefined && await this.startPromise, this.startPromise = (async () => {
        let [t, r] = this.extractHostAndApiKey();
        this.host = t, this.headerBuilder = new Wi({ apiKey: r, tracingHelper: this.tracingHelper, logLevel: this.config.logLevel, logQueries: this.config.logQueries, engineHash: this.engineHash }), this.remoteClientVersion = await Na(t, this.config), Ji("host", this.host);
      })(), await this.startPromise;
    }
    async stop() {
    }
    propagateResponseExtensions(t) {
      t?.logs?.length && t.logs.forEach((r) => {
        switch (r.level) {
          case "debug":
          case "error":
          case "trace":
          case "warn":
          case "info":
            break;
          case "query": {
            let n = typeof r.attributes.query == "string" ? r.attributes.query : "";
            if (!this.tracingHelper.isEnabled()) {
              let [i3] = n.split("/* traceparent");
              n = i3;
            }
            this.logEmitter.emit("query", { query: n, timestamp: _a(r.timestamp), duration: Number(r.attributes.duration_ms), params: r.attributes.params, target: r.attributes.target });
          }
        }
      }), t?.traces?.length && this.tracingHelper.createEngineSpan({ span: true, spans: t.traces });
    }
    onBeforeExit() {
      throw new Error('"beforeExit" hook is not applicable to the remote query engine');
    }
    async url(t) {
      return await this.start(), `https://${this.host}/${this.remoteClientVersion}/${this.inlineSchemaHash}/${t}`;
    }
    async uploadSchema() {
      let t = { name: "schemaUpload", internal: true };
      return this.tracingHelper.runInChildSpan(t, async () => {
        let r = await ut(await this.url("schema"), { method: "PUT", headers: this.headerBuilder.build(), body: this.inlineSchema, clientVersion: this.clientVersion });
        r.ok || Ji("schema response status", r.status);
        let n = await xr(r, this.clientVersion);
        if (n)
          throw this.logEmitter.emit("warn", { message: `Error while uploading schema: ${n.message}`, timestamp: new Date, target: "" }), n;
        this.logEmitter.emit("info", { message: `Schema (re)uploaded (hash: ${this.inlineSchemaHash})`, timestamp: new Date, target: "" });
      });
    }
    request(t, { traceparent: r, interactiveTransaction: n, customDataProxyFetch: i3 }) {
      return this.requestInternal({ body: t, traceparent: r, interactiveTransaction: n, customDataProxyFetch: i3 });
    }
    async requestBatch(t, { traceparent: r, transaction: n, customDataProxyFetch: i3 }) {
      let o = n?.kind === "itx" ? n.options : undefined, s3 = Et(t, n), { batchResult: a, elapsed: l3 } = await this.requestInternal({ body: s3, customDataProxyFetch: i3, interactiveTransaction: o, traceparent: r });
      return a.map((u) => ("errors" in u) && u.errors.length > 0 ? ot(u.errors[0], this.clientVersion, this.config.activeProvider) : { data: u, elapsed: l3 });
    }
    requestInternal({ body: t, traceparent: r, customDataProxyFetch: n, interactiveTransaction: i3 }) {
      return this.withRetry({ actionGerund: "querying", callback: async ({ logHttpCall: o }) => {
        let s3 = i3 ? `${i3.payload.endpoint}/graphql` : await this.url("graphql");
        o(s3);
        let a = await ut(s3, { method: "POST", headers: this.headerBuilder.build({ traceparent: r, interactiveTransaction: i3 }), body: JSON.stringify(t), clientVersion: this.clientVersion }, n);
        a.ok || Ji("graphql response status", a.status), await this.handleError(await xr(a, this.clientVersion));
        let l3 = await a.json(), u = l3.extensions;
        if (u && this.propagateResponseExtensions(u), l3.errors)
          throw l3.errors.length === 1 ? ot(l3.errors[0], this.config.clientVersion, this.config.activeProvider) : new B(l3.errors, { clientVersion: this.config.clientVersion });
        return l3;
      } });
    }
    async transaction(t, r, n) {
      let i3 = { start: "starting", commit: "committing", rollback: "rolling back" };
      return this.withRetry({ actionGerund: `${i3[t]} transaction`, callback: async ({ logHttpCall: o }) => {
        if (t === "start") {
          let s3 = JSON.stringify({ max_wait: n.maxWait, timeout: n.timeout, isolation_level: n.isolationLevel }), a = await this.url("transaction/start");
          o(a);
          let l3 = await ut(a, { method: "POST", headers: this.headerBuilder.build({ traceparent: r.traceparent }), body: s3, clientVersion: this.clientVersion });
          await this.handleError(await xr(l3, this.clientVersion));
          let u = await l3.json(), c3 = u.extensions;
          c3 && this.propagateResponseExtensions(c3);
          let p3 = u.id, d3 = u["data-proxy"].endpoint;
          return { id: p3, payload: { endpoint: d3 } };
        } else {
          let s3 = `${n.payload.endpoint}/${t}`;
          o(s3);
          let a = await ut(s3, { method: "POST", headers: this.headerBuilder.build({ traceparent: r.traceparent }), clientVersion: this.clientVersion });
          await this.handleError(await xr(a, this.clientVersion));
          let u = (await a.json()).extensions;
          u && this.propagateResponseExtensions(u);
          return;
        }
      } });
    }
    extractHostAndApiKey() {
      let t = { clientVersion: this.clientVersion }, r = Object.keys(this.inlineDatasources)[0], n = Dt({ inlineDatasources: this.inlineDatasources, overrideDatasources: this.config.overrideDatasources, clientVersion: this.clientVersion, env: this.env }), i3;
      try {
        i3 = new URL(n);
      } catch {
        throw new st(`Error validating datasource \`${r}\`: the URL must start with the protocol \`prisma://\``, t);
      }
      let { protocol: o, host: s3, searchParams: a } = i3;
      if (o !== "prisma:")
        throw new st(`Error validating datasource \`${r}\`: the URL must start with the protocol \`prisma://\``, t);
      let l3 = a.get("api_key");
      if (l3 === null || l3.length < 1)
        throw new st(`Error validating datasource \`${r}\`: the URL must contain a valid API key`, t);
      return [s3, l3];
    }
    metrics() {
      throw new at("Metrics are not yet supported for Accelerate", { clientVersion: this.clientVersion });
    }
    async withRetry(t) {
      for (let r = 0;; r++) {
        let n = (i3) => {
          this.logEmitter.emit("info", { message: `Calling ${i3} (n=${r})`, timestamp: new Date, target: "" });
        };
        try {
          return await t.callback({ logHttpCall: n });
        } catch (i3) {
          if (!(i3 instanceof se) || !i3.isRetryable)
            throw i3;
          if (r >= Ma)
            throw i3 instanceof _t ? i3.cause : i3;
          this.logEmitter.emit("warn", { message: `Attempt ${r + 1}/${Ma} failed for ${t.actionGerund}: ${i3.message ?? "(unknown)"}`, timestamp: new Date, target: "" });
          let o = await Oa(r);
          this.logEmitter.emit("warn", { message: `Retrying after ${o}ms`, timestamp: new Date, target: "" });
        }
      }
    }
    async handleError(t) {
      if (t instanceof lt)
        throw await this.uploadSchema(), new _t({ clientVersion: this.clientVersion, cause: t });
      if (t)
        throw t;
    }
    applyPendingMigrations() {
      throw new Error("Method not implemented.");
    }
  };
  var Ki = k(import.meta.require("os"));
  var qa = k(import.meta.require("path"));
  var Hi = Symbol("PrismaLibraryEngineCache");
  var ja = { async loadLibrary(e3) {
    let t = await Jn(), r = await va("library", e3);
    try {
      return e3.tracingHelper.runInChildSpan({ name: "loadLibrary", internal: true }, () => gd(r));
    } catch (n) {
      let i3 = ii({ e: n, platformInfo: t, id: r });
      throw new R(i3, e3.clientVersion);
    }
  } };
  var zi;
  var Va = { async loadLibrary(e3) {
    let { clientVersion: t, adapter: r, engineWasm: n } = e3;
    if (r === undefined)
      throw new R(`The \`adapter\` option for \`PrismaClient\` is required in this context (${wn().prettyName})`, t);
    if (n === undefined)
      throw new R("WASM engine was unexpectedly `undefined`", t);
    zi === undefined && (zi = (async () => {
      let o = n.getRuntime(), s3 = await n.getQueryEngineWasmModule();
      if (s3 == null)
        throw new R("The loaded wasm module was unexpectedly `undefined` or `null` once loaded", t);
      let a = { "./query_engine_bg.js": o }, l3 = new WebAssembly.Instance(s3, a);
      return o.__wbg_set_wasm(l3.exports), o.QueryEngine;
    })());
    let i3 = await zi;
    return { debugPanic() {
      return Promise.reject("{}");
    }, dmmf() {
      return Promise.resolve("{}");
    }, version() {
      return { commit: "unknown", version: "unknown" };
    }, QueryEngine: i3 };
  } };
  var hd = "P2036";
  var Ce = F("prisma:client:libraryEngine");
  var Ba = [...Vn, "native"];
  var Tr = class {
    constructor(t, r) {
      this.name = "LibraryEngine";
      this.libraryLoader = r ?? ja, t.engineWasm !== undefined && (this.libraryLoader = r ?? Va), this.config = t, this.libraryStarted = false, this.logQueries = t.logQueries ?? false, this.logLevel = t.logLevel ?? "error", this.logEmitter = t.logEmitter, this.datamodel = t.inlineSchema, t.enableDebugLogs && (this.logLevel = "debug");
      let n = Object.keys(t.overrideDatasources)[0], i3 = t.overrideDatasources[n]?.url;
      n !== undefined && i3 !== undefined && (this.datasourceOverrides = { [n]: i3 }), this.libraryInstantiationPromise = this.instantiateLibrary();
    }
    async applyPendingMigrations() {
      throw new Error("Cannot call this method from this type of engine instance");
    }
    async transaction(t, r, n) {
      await this.start();
      let i3 = JSON.stringify(r), o;
      if (t === "start") {
        let a = JSON.stringify({ max_wait: n.maxWait, timeout: n.timeout, isolation_level: n.isolationLevel });
        o = await this.engine?.startTransaction(a, i3);
      } else
        t === "commit" ? o = await this.engine?.commitTransaction(n.id, i3) : t === "rollback" && (o = await this.engine?.rollbackTransaction(n.id, i3));
      let s3 = this.parseEngineResponse(o);
      if (Ed(s3)) {
        let a = this.getExternalAdapterError(s3);
        throw a ? a.error : new V(s3.message, { code: s3.error_code, clientVersion: this.config.clientVersion, meta: s3.meta });
      }
      return s3;
    }
    async instantiateLibrary() {
      if (Ce("internalSetup"), this.libraryInstantiationPromise)
        return this.libraryInstantiationPromise;
      jn(), this.binaryTarget = await this.getCurrentBinaryTarget(), await this.loadEngine(), this.version();
    }
    async getCurrentBinaryTarget() {
      {
        if (this.binaryTarget)
          return this.binaryTarget;
        let t = await tt();
        if (!Ba.includes(t))
          throw new R(`Unknown ${ce("PRISMA_QUERY_ENGINE_LIBRARY")} ${ce(W(t))}. Possible binaryTargets: ${Me(Ba.join(", "))} or a path to the query engine library.
You may have to run ${Me("prisma generate")} for your changes to take effect.`, this.config.clientVersion);
        return t;
      }
    }
    parseEngineResponse(t) {
      if (!t)
        throw new B("Response from the Engine was empty", { clientVersion: this.config.clientVersion });
      try {
        return JSON.parse(t);
      } catch {
        throw new B("Unable to JSON.parse response from engine", { clientVersion: this.config.clientVersion });
      }
    }
    async loadEngine() {
      if (!this.engine) {
        this.QueryEngineConstructor || (this.library = await this.libraryLoader.loadLibrary(this.config), this.QueryEngineConstructor = this.library.QueryEngine);
        try {
          let t = new WeakRef(this), { adapter: r } = this.config;
          r && Ce("Using driver adapter: %O", r), this.engine = new this.QueryEngineConstructor({ datamodel: this.datamodel, env: process.env, logQueries: this.config.logQueries ?? false, ignoreEnvVarErrors: true, datasourceOverrides: this.datasourceOverrides ?? {}, logLevel: this.logLevel, configDir: this.config.cwd, engineProtocol: "json" }, (n) => {
            t.deref()?.logger(n);
          }, r);
        } catch (t) {
          let r = t, n = this.parseInitError(r.message);
          throw typeof n == "string" ? r : new R(n.message, this.config.clientVersion, n.error_code);
        }
      }
    }
    logger(t) {
      let r = this.parseEngineResponse(t);
      if (r) {
        if ("span" in r) {
          this.config.tracingHelper.createEngineSpan(r);
          return;
        }
        r.level = r?.level.toLowerCase() ?? "unknown", yd(r) ? this.logEmitter.emit("query", { timestamp: new Date, query: r.query, params: r.params, duration: Number(r.duration_ms), target: r.module_path }) : bd(r) ? this.loggerRustPanic = new le(Yi(this, `${r.message}: ${r.reason} in ${r.file}:${r.line}:${r.column}`), this.config.clientVersion) : this.logEmitter.emit(r.level, { timestamp: new Date, message: r.message, target: r.module_path });
      }
    }
    parseInitError(t) {
      try {
        return JSON.parse(t);
      } catch {
      }
      return t;
    }
    parseRequestError(t) {
      try {
        return JSON.parse(t);
      } catch {
      }
      return t;
    }
    onBeforeExit() {
      throw new Error('"beforeExit" hook is not applicable to the library engine since Prisma 5.0.0, it is only relevant and implemented for the binary engine. Please add your event listener to the `process` object directly instead.');
    }
    async start() {
      if (await this.libraryInstantiationPromise, await this.libraryStoppingPromise, this.libraryStartingPromise)
        return Ce(`library already starting, this.libraryStarted: ${this.libraryStarted}`), this.libraryStartingPromise;
      if (this.libraryStarted)
        return;
      let t = async () => {
        Ce("library starting");
        try {
          let r = { traceparent: this.config.tracingHelper.getTraceParent() };
          await this.engine?.connect(JSON.stringify(r)), this.libraryStarted = true, Ce("library started");
        } catch (r) {
          let n = this.parseInitError(r.message);
          throw typeof n == "string" ? r : new R(n.message, this.config.clientVersion, n.error_code);
        } finally {
          this.libraryStartingPromise = undefined;
        }
      };
      return this.libraryStartingPromise = this.config.tracingHelper.runInChildSpan("connect", t), this.libraryStartingPromise;
    }
    async stop() {
      if (await this.libraryStartingPromise, await this.executingQueryPromise, this.libraryStoppingPromise)
        return Ce("library is already stopping"), this.libraryStoppingPromise;
      if (!this.libraryStarted)
        return;
      let t = async () => {
        await new Promise((n) => setTimeout(n, 5)), Ce("library stopping");
        let r = { traceparent: this.config.tracingHelper.getTraceParent() };
        await this.engine?.disconnect(JSON.stringify(r)), this.libraryStarted = false, this.libraryStoppingPromise = undefined, Ce("library stopped");
      };
      return this.libraryStoppingPromise = this.config.tracingHelper.runInChildSpan("disconnect", t), this.libraryStoppingPromise;
    }
    version() {
      return this.versionInfo = this.library?.version(), this.versionInfo?.version ?? "unknown";
    }
    debugPanic(t) {
      return this.library?.debugPanic(t);
    }
    async request(t, { traceparent: r, interactiveTransaction: n }) {
      Ce(`sending request, this.libraryStarted: ${this.libraryStarted}`);
      let i3 = JSON.stringify({ traceparent: r }), o = JSON.stringify(t);
      try {
        await this.start(), this.executingQueryPromise = this.engine?.query(o, i3, n?.id), this.lastQuery = o;
        let s3 = this.parseEngineResponse(await this.executingQueryPromise);
        if (s3.errors)
          throw s3.errors.length === 1 ? this.buildQueryError(s3.errors[0]) : new B(JSON.stringify(s3.errors), { clientVersion: this.config.clientVersion });
        if (this.loggerRustPanic)
          throw this.loggerRustPanic;
        return { data: s3, elapsed: 0 };
      } catch (s3) {
        if (s3 instanceof R)
          throw s3;
        if (s3.code === "GenericFailure" && s3.message?.startsWith("PANIC:"))
          throw new le(Yi(this, s3.message), this.config.clientVersion);
        let a = this.parseRequestError(s3.message);
        throw typeof a == "string" ? s3 : new B(`${a.message}
${a.backtrace}`, { clientVersion: this.config.clientVersion });
      }
    }
    async requestBatch(t, { transaction: r, traceparent: n }) {
      Ce("requestBatch");
      let i3 = Et(t, r);
      await this.start(), this.lastQuery = JSON.stringify(i3), this.executingQueryPromise = this.engine.query(this.lastQuery, JSON.stringify({ traceparent: n }), $a(r));
      let o = await this.executingQueryPromise, s3 = this.parseEngineResponse(o);
      if (s3.errors)
        throw s3.errors.length === 1 ? this.buildQueryError(s3.errors[0]) : new B(JSON.stringify(s3.errors), { clientVersion: this.config.clientVersion });
      let { batchResult: a, errors: l3 } = s3;
      if (Array.isArray(a))
        return a.map((u) => u.errors && u.errors.length > 0 ? this.loggerRustPanic ?? this.buildQueryError(u.errors[0]) : { data: u, elapsed: 0 });
      throw l3 && l3.length === 1 ? new Error(l3[0].error) : new Error(JSON.stringify(s3));
    }
    buildQueryError(t) {
      if (t.user_facing_error.is_panic)
        return new le(Yi(this, t.user_facing_error.message), this.config.clientVersion);
      let r = this.getExternalAdapterError(t.user_facing_error);
      return r ? r.error : ot(t, this.config.clientVersion, this.config.activeProvider);
    }
    getExternalAdapterError(t) {
      if (t.error_code === hd && this.config.adapter) {
        let r = t.meta?.id;
        Wr(typeof r == "number", "Malformed external JS error received from the engine");
        let n = this.config.adapter.errorRegistry.consumeError(r);
        return Wr(n, "External error with reported id was not registered"), n;
      }
    }
    async metrics(t) {
      await this.start();
      let r = await this.engine.metrics(JSON.stringify(t));
      return t.format === "prometheus" ? r : this.parseEngineResponse(r);
    }
  };
  var Ka = k(Zi());
  var ue = class {
    constructor(t, r) {
      this.name = t;
      this.value = r;
      this.isRequired = false;
    }
    makeRequired() {
      return this.isRequired = true, this;
    }
    write(t) {
      let { colors: { green: r } } = t.context;
      t.addMarginSymbol(r(this.isRequired ? "+" : "?")), t.write(r(this.name)), this.isRequired || t.write(r("?")), t.write(r(": ")), typeof this.value == "string" ? t.write(r(this.value)) : t.write(this.value);
    }
  };
  var Rr = class {
    constructor() {
      this.fields = [];
    }
    addField(t, r) {
      return this.fields.push({ write(n) {
        let { green: i3, dim: o } = n.context.colors;
        n.write(i3(o(`${t}: ${r}`))).addMarginSymbol(i3(o("+")));
      } }), this;
    }
    write(t) {
      let { colors: { green: r } } = t.context;
      t.writeLine(r("{")).withIndent(() => {
        t.writeJoined(Ct, this.fields).newLine();
      }).write(r("}")).addMarginSymbol(r("+"));
    }
  };
  var Vd = 3;
  var Ud = { findUnique: "findUnique", findUniqueOrThrow: "findUniqueOrThrow", findFirst: "findFirst", findFirstOrThrow: "findFirstOrThrow", findMany: "findMany", count: "aggregate", create: "createOne", createMany: "createMany", createManyAndReturn: "createManyAndReturn", update: "updateOne", updateMany: "updateMany", upsert: "upsertOne", delete: "deleteOne", deleteMany: "deleteMany", executeRaw: "executeRaw", queryRaw: "queryRaw", aggregate: "aggregate", groupBy: "groupBy", runCommandRaw: "runCommandRaw", findRaw: "findRaw", aggregateRaw: "aggregateRaw" };
  var Xi = class e3 {
    constructor(t) {
      this.params = t;
      this.params.modelName && (this.modelOrType = this.params.runtimeDataModel.models[this.params.modelName] ?? this.params.runtimeDataModel.types[this.params.modelName]);
    }
    throwValidationError(t) {
      An({ errors: [t], originalMethod: this.params.originalMethod, args: this.params.rootArgs ?? {}, callsite: this.params.callsite, errorFormat: this.params.errorFormat, clientVersion: this.params.clientVersion, globalOmit: this.params.globalOmit });
    }
    getSelectionPath() {
      return this.params.selectionPath;
    }
    getArgumentPath() {
      return this.params.argumentPath;
    }
    getArgumentName() {
      return this.params.argumentPath[this.params.argumentPath.length - 1];
    }
    getOutputTypeDescription() {
      if (!(!this.params.modelName || !this.modelOrType))
        return { name: this.params.modelName, fields: this.modelOrType.fields.map((t) => ({ name: t.name, typeName: "boolean", isRelation: t.kind === "object" })) };
    }
    isRawAction() {
      return ["executeRaw", "queryRaw", "runCommandRaw", "findRaw", "aggregateRaw"].includes(this.params.action);
    }
    isPreviewFeatureOn(t) {
      return this.params.previewFeatures.includes(t);
    }
    getComputedFields() {
      if (this.params.modelName)
        return this.params.extensions.getAllComputedFields(this.params.modelName);
    }
    findField(t) {
      return this.modelOrType?.fields.find((r) => r.name === t);
    }
    nestSelection(t) {
      let r = this.findField(t), n = r?.kind === "object" ? r.type : undefined;
      return new e3({ ...this.params, modelName: n, selectionPath: this.params.selectionPath.concat(t) });
    }
    getGlobalOmit() {
      return this.params.modelName && this.shouldApplyGlobalOmit() ? this.params.globalOmit?.[Nt(this.params.modelName)] ?? {} : {};
    }
    shouldApplyGlobalOmit() {
      switch (this.params.action) {
        case "findFirst":
        case "findFirstOrThrow":
        case "findUniqueOrThrow":
        case "findMany":
        case "upsert":
        case "findUnique":
        case "createManyAndReturn":
        case "create":
        case "update":
        case "delete":
          return true;
        case "executeRaw":
        case "aggregateRaw":
        case "runCommandRaw":
        case "findRaw":
        case "createMany":
        case "deleteMany":
        case "groupBy":
        case "updateMany":
        case "count":
        case "aggregate":
        case "queryRaw":
          return false;
        default:
          De(this.params.action, "Unknown action");
      }
    }
    nestArgument(t) {
      return new e3({ ...this.params, argumentPath: this.params.argumentPath.concat(t) });
    }
  };
  var nl = (e3) => ({ command: e3 });
  var il = (e3) => e3.strings.reduce((t, r, n) => `${t}@P${n}${r}`);
  var em = /^(\s*alter\s)/i;
  var ll = F("prisma:client");
  var to = ({ clientMethod: e3, activeProvider: t }) => (r) => {
    let n = "", i3;
    if (Array.isArray(r)) {
      let [o, ...s3] = r;
      n = o, i3 = { values: Ir(s3 || []), __prismaRawParameters__: true };
    } else
      switch (t) {
        case "sqlite":
        case "mysql": {
          n = r.sql, i3 = { values: Ir(r.values), __prismaRawParameters__: true };
          break;
        }
        case "cockroachdb":
        case "postgresql":
        case "postgres": {
          n = r.text, i3 = { values: Ir(r.values), __prismaRawParameters__: true };
          break;
        }
        case "sqlserver": {
          n = il(r), i3 = { values: Ir(r.values), __prismaRawParameters__: true };
          break;
        }
        default:
          throw new Error(`The ${t} provider does not support ${e3}`);
      }
    return i3?.values ? ll(`prisma.${e3}(${n}, ${i3.values})`) : ll(`prisma.${e3}(${n})`), { query: n, parameters: i3 };
  };
  var ul = { requestArgsToMiddlewareArgs(e3) {
    return [e3.strings, ...e3.values];
  }, middlewareArgsToRequestArgs(e3) {
    let [t, ...r] = e3;
    return new ie(t, r);
  } };
  var cl = { requestArgsToMiddlewareArgs(e3) {
    return [e3];
  }, middlewareArgsToRequestArgs(e3) {
    return e3[0];
  } };
  var dl = { isEnabled() {
    return false;
  }, getTraceParent() {
    return "00-10-10-00";
  }, async createEngineSpan() {
  }, getActiveContext() {
  }, runInChildSpan(e3, t) {
    return t();
  } };
  var no = class {
    isEnabled() {
      return this.getGlobalTracingHelper().isEnabled();
    }
    getTraceParent(t) {
      return this.getGlobalTracingHelper().getTraceParent(t);
    }
    createEngineSpan(t) {
      return this.getGlobalTracingHelper().createEngineSpan(t);
    }
    getActiveContext() {
      return this.getGlobalTracingHelper().getActiveContext();
    }
    runInChildSpan(t, r) {
      return this.getGlobalTracingHelper().runInChildSpan(t, r);
    }
    getGlobalTracingHelper() {
      return globalThis.PRISMA_INSTRUMENTATION?.helper ?? dl;
    }
  };
  var tm = ["$connect", "$disconnect", "$on", "$transaction", "$use", "$extends"];
  var gl = tm;
  var In = class {
    constructor() {
      this._middlewares = [];
    }
    use(t) {
      this._middlewares.push(t);
    }
    get(t) {
      return this._middlewares[t];
    }
    has(t) {
      return !!this._middlewares[t];
    }
    length() {
      return this._middlewares.length;
    }
  };
  var El = k(mi());
  var im = { aggregate: false, aggregateRaw: false, createMany: true, createManyAndReturn: true, createOne: true, deleteMany: true, deleteOne: true, executeRaw: true, findFirst: false, findFirstOrThrow: false, findMany: false, findRaw: false, findUnique: false, findUniqueOrThrow: false, groupBy: false, queryRaw: false, runCommandRaw: true, updateMany: true, updateOne: true, upsertOne: true };
  var Dn = class {
    constructor(t) {
      this.options = t;
      this.tickActive = false;
      this.batches = {};
    }
    request(t) {
      let r = this.options.batchBy(t);
      return r ? (this.batches[r] || (this.batches[r] = [], this.tickActive || (this.tickActive = true, process.nextTick(() => {
        this.dispatchBatches(), this.tickActive = false;
      }))), new Promise((n, i3) => {
        this.batches[r].push({ request: t, resolve: n, reject: i3 });
      })) : this.options.singleLoader(t);
    }
    dispatchBatches() {
      for (let t in this.batches) {
        let r = this.batches[t];
        delete this.batches[t], r.length === 1 ? this.options.singleLoader(r[0].request).then((n) => {
          n instanceof Error ? r[0].reject(n) : r[0].resolve(n);
        }).catch((n) => {
          r[0].reject(n);
        }) : (r.sort((n, i3) => this.options.batchOrder(n.request, i3.request)), this.options.batchLoader(r.map((n) => n.request)).then((n) => {
          if (n instanceof Error)
            for (let i3 = 0;i3 < r.length; i3++)
              r[i3].reject(n);
          else
            for (let i3 = 0;i3 < r.length; i3++) {
              let o = n[i3];
              o instanceof Error ? r[i3].reject(o) : r[i3].resolve(o);
            }
        }).catch((n) => {
          for (let i3 = 0;i3 < r.length; i3++)
            r[i3].reject(n);
        }));
      }
    }
    get [Symbol.toStringTag]() {
      return "DataLoader";
    }
  };
  var sm = F("prisma:client:request_handler");
  var _n = class {
    constructor(t, r) {
      this.logEmitter = r, this.client = t, this.dataloader = new Dn({ batchLoader: sa(async ({ requests: n, customDataProxyFetch: i3 }) => {
        let { transaction: o, otelParentCtx: s3 } = n[0], a = n.map((p3) => p3.protocolQuery), l3 = this.client._tracingHelper.getTraceParent(s3), u = n.some((p3) => oo(p3.protocolQuery.action));
        return (await this.client._engine.requestBatch(a, { traceparent: l3, transaction: am(o), containsWrite: u, customDataProxyFetch: i3 })).map((p3, d3) => {
          if (p3 instanceof Error)
            return p3;
          try {
            return this.mapQueryEngineResult(n[d3], p3);
          } catch (f3) {
            return f3;
          }
        });
      }), singleLoader: async (n) => {
        let i3 = n.transaction?.kind === "itx" ? wl(n.transaction) : undefined, o = await this.client._engine.request(n.protocolQuery, { traceparent: this.client._tracingHelper.getTraceParent(), interactiveTransaction: i3, isWrite: oo(n.protocolQuery.action), customDataProxyFetch: n.customDataProxyFetch });
        return this.mapQueryEngineResult(n, o);
      }, batchBy: (n) => n.transaction?.id ? `transaction-${n.transaction.id}` : yl(n.protocolQuery), batchOrder(n, i3) {
        return n.transaction?.kind === "batch" && i3.transaction?.kind === "batch" ? n.transaction.index - i3.transaction.index : 0;
      } });
    }
    async request(t) {
      try {
        return await this.dataloader.request(t);
      } catch (r) {
        let { clientMethod: n, callsite: i3, transaction: o, args: s3, modelName: a } = t;
        this.handleAndLogRequestError({ error: r, clientMethod: n, callsite: i3, transaction: o, args: s3, modelName: a, globalOmit: t.globalOmit });
      }
    }
    mapQueryEngineResult({ dataPath: t, unpacker: r }, n) {
      let i3 = n?.data, o = n?.elapsed, s3 = this.unpack(i3, t, r);
      return process.env.PRISMA_CLIENT_GET_TIME ? { data: s3, elapsed: o } : s3;
    }
    handleAndLogRequestError(t) {
      try {
        this.handleRequestError(t);
      } catch (r) {
        throw this.logEmitter && this.logEmitter.emit("error", { message: r.message, target: t.clientMethod, timestamp: new Date }), r;
      }
    }
    handleRequestError({ error: t, clientMethod: r, callsite: n, transaction: i3, args: o, modelName: s3, globalOmit: a }) {
      if (sm(t), lm(t, i3) || t instanceof _e)
        throw t;
      if (t instanceof V && um(t)) {
        let u = xl(t.meta);
        An({ args: o, errors: [u], callsite: n, errorFormat: this.client._errorFormat, originalMethod: r, clientVersion: this.client._clientVersion, globalOmit: a });
      }
      let l3 = t.message;
      if (n && (l3 = kt({ callsite: n, originalMethod: r, isPanic: t.isPanic, showColors: this.client._errorFormat === "pretty", message: l3 })), l3 = this.sanitizeMessage(l3), t.code) {
        let u = s3 ? { modelName: s3, ...t.meta } : t.meta;
        throw new V(l3, { code: t.code, clientVersion: this.client._clientVersion, meta: u, batchRequestIdx: t.batchRequestIdx });
      } else {
        if (t.isPanic)
          throw new le(l3, this.client._clientVersion);
        if (t instanceof B)
          throw new B(l3, { clientVersion: this.client._clientVersion, batchRequestIdx: t.batchRequestIdx });
        if (t instanceof R)
          throw new R(l3, this.client._clientVersion);
        if (t instanceof le)
          throw new le(l3, this.client._clientVersion);
      }
      throw t.clientVersion = this.client._clientVersion, t;
    }
    sanitizeMessage(t) {
      return this.client._errorFormat && this.client._errorFormat !== "pretty" ? (0, El.default)(t) : t;
    }
    unpack(t, r, n) {
      if (!t || (t.data && (t = t.data), !t))
        return t;
      let i3 = Object.keys(t)[0], o = Object.values(t)[0], s3 = r.filter((u) => u !== "select" && u !== "include"), a = _i(o, s3), l3 = i3 === "queryRaw" ? bl(a) : kn(a);
      return n ? n(l3) : l3;
    }
    get [Symbol.toStringTag]() {
      return "RequestHandler";
    }
  };
  var Pl = "5.18.0";
  var vl = Pl;
  var Al = k(Zi());
  var L3 = class extends Error {
    constructor(t) {
      super(t + `
Read more at https://pris.ly/d/client-constructor`), this.name = "PrismaClientConstructorValidationError";
    }
    get [Symbol.toStringTag]() {
      return "PrismaClientConstructorValidationError";
    }
  };
  w(L3, "PrismaClientConstructorValidationError");
  var Tl = ["datasources", "datasourceUrl", "errorFormat", "adapter", "log", "transactionOptions", "omit", "__internal"];
  var Rl = ["pretty", "colorless", "minimal"];
  var Cl = ["info", "query", "warn", "error"];
  var pm = { datasources: (e3, { datasourceNames: t }) => {
    if (e3) {
      if (typeof e3 != "object" || Array.isArray(e3))
        throw new L3(`Invalid value ${JSON.stringify(e3)} for "datasources" provided to PrismaClient constructor`);
      for (let [r, n] of Object.entries(e3)) {
        if (!t.includes(r)) {
          let i3 = Mt(r, t) || ` Available datasources: ${t.join(", ")}`;
          throw new L3(`Unknown datasource ${r} provided to PrismaClient constructor.${i3}`);
        }
        if (typeof n != "object" || Array.isArray(n))
          throw new L3(`Invalid value ${JSON.stringify(e3)} for datasource "${r}" provided to PrismaClient constructor.
It should have this form: { url: "CONNECTION_STRING" }`);
        if (n && typeof n == "object")
          for (let [i3, o] of Object.entries(n)) {
            if (i3 !== "url")
              throw new L3(`Invalid value ${JSON.stringify(e3)} for datasource "${r}" provided to PrismaClient constructor.
It should have this form: { url: "CONNECTION_STRING" }`);
            if (typeof o != "string")
              throw new L3(`Invalid value ${JSON.stringify(o)} for datasource "${r}" provided to PrismaClient constructor.
It should have this form: { url: "CONNECTION_STRING" }`);
          }
      }
    }
  }, adapter: (e3, t) => {
    if (e3 === null)
      return;
    if (e3 === undefined)
      throw new L3('"adapter" property must not be undefined, use null to conditionally disable driver adapters.');
    if (!Rn(t).includes("driverAdapters"))
      throw new L3('"adapter" property can only be provided to PrismaClient constructor when "driverAdapters" preview feature is enabled.');
    if (Wt() === "binary")
      throw new L3('Cannot use a driver adapter with the "binary" Query Engine. Please use the "library" Query Engine.');
  }, datasourceUrl: (e3) => {
    if (typeof e3 < "u" && typeof e3 != "string")
      throw new L3(`Invalid value ${JSON.stringify(e3)} for "datasourceUrl" provided to PrismaClient constructor.
Expected string or undefined.`);
  }, errorFormat: (e3) => {
    if (e3) {
      if (typeof e3 != "string")
        throw new L3(`Invalid value ${JSON.stringify(e3)} for "errorFormat" provided to PrismaClient constructor.`);
      if (!Rl.includes(e3)) {
        let t = Mt(e3, Rl);
        throw new L3(`Invalid errorFormat ${e3} provided to PrismaClient constructor.${t}`);
      }
    }
  }, log: (e3) => {
    if (!e3)
      return;
    if (!Array.isArray(e3))
      throw new L3(`Invalid value ${JSON.stringify(e3)} for "log" provided to PrismaClient constructor.`);
    function t(r) {
      if (typeof r == "string" && !Cl.includes(r)) {
        let n = Mt(r, Cl);
        throw new L3(`Invalid log level "${r}" provided to PrismaClient constructor.${n}`);
      }
    }
    for (let r of e3) {
      t(r);
      let n = { level: t, emit: (i3) => {
        let o = ["stdout", "event"];
        if (!o.includes(i3)) {
          let s3 = Mt(i3, o);
          throw new L3(`Invalid value ${JSON.stringify(i3)} for "emit" in logLevel provided to PrismaClient constructor.${s3}`);
        }
      } };
      if (r && typeof r == "object")
        for (let [i3, o] of Object.entries(r))
          if (n[i3])
            n[i3](o);
          else
            throw new L3(`Invalid property ${i3} for "log" provided to PrismaClient constructor`);
    }
  }, transactionOptions: (e3) => {
    if (!e3)
      return;
    let t = e3.maxWait;
    if (t != null && t <= 0)
      throw new L3(`Invalid value ${t} for maxWait in "transactionOptions" provided to PrismaClient constructor. maxWait needs to be greater than 0`);
    let r = e3.timeout;
    if (r != null && r <= 0)
      throw new L3(`Invalid value ${r} for timeout in "transactionOptions" provided to PrismaClient constructor. timeout needs to be greater than 0`);
  }, omit: (e3, t) => {
    if (typeof e3 != "object")
      throw new L3('"omit" option is expected to be an object.');
    if (e3 === null)
      throw new L3('"omit" option can not be `null`');
    let r = [];
    for (let [n, i3] of Object.entries(e3)) {
      let o = mm(n, t.runtimeDataModel);
      if (!o) {
        r.push({ kind: "UnknownModel", modelKey: n });
        continue;
      }
      for (let [s3, a] of Object.entries(i3)) {
        let l3 = o.fields.find((u) => u.name === s3);
        if (!l3) {
          r.push({ kind: "UnknownField", modelKey: n, fieldName: s3 });
          continue;
        }
        if (l3.relationName) {
          r.push({ kind: "RelationInOmit", modelKey: n, fieldName: s3 });
          continue;
        }
        typeof a != "boolean" && r.push({ kind: "InvalidFieldValue", modelKey: n, fieldName: s3 });
      }
    }
    if (r.length > 0)
      throw new L3(fm(e3, r));
  }, __internal: (e3) => {
    if (!e3)
      return;
    let t = ["debug", "engine", "configOverride"];
    if (typeof e3 != "object")
      throw new L3(`Invalid value ${JSON.stringify(e3)} for "__internal" to PrismaClient constructor`);
    for (let [r] of Object.entries(e3))
      if (!t.includes(r)) {
        let n = Mt(r, t);
        throw new L3(`Invalid property ${JSON.stringify(r)} for "__internal" provided to PrismaClient constructor.${n}`);
      }
  } };
  var Xe = F("prisma:client");
  typeof globalThis == "object" && (globalThis.NODE_CLIENT = true);
  var gm = { requestArgsToMiddlewareArgs: (e3) => e3, middlewareArgsToRequestArgs: (e3) => e3 };
  var hm = Symbol.for("prisma.client.transaction.id");
  var ym = { id: 0, nextId() {
    return ++this.id;
  } };
  var Em = new Set(["toJSON", "$$typeof", "asymmetricMatch", Symbol.iterator, Symbol.toStringTag, Symbol.isConcatSpreadable, Symbol.toPrimitive]);
  /*! Bundled license information:
  
  decimal.js/decimal.mjs:
    (*!
     *  decimal.js v10.4.3
     *  An arbitrary-precision Decimal type for JavaScript.
     *  https://github.com/MikeMcl/decimal.js
     *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>
     *  MIT Licence
     *)
  */
});

// node_modules/.prisma/client/index.js
var require_client = __commonJS((exports) => {
  var __dirname = "/root/dev/prisma-test/node_modules/.prisma/client";
  Object.defineProperty(exports, "__esModule", { value: true });
  var {
    PrismaClientKnownRequestError: PrismaClientKnownRequestError2,
    PrismaClientUnknownRequestError: PrismaClientUnknownRequestError2,
    PrismaClientRustPanicError: PrismaClientRustPanicError2,
    PrismaClientInitializationError: PrismaClientInitializationError2,
    PrismaClientValidationError: PrismaClientValidationError2,
    NotFoundError: NotFoundError2,
    getPrismaClient: getPrismaClient2,
    sqltag: sqltag2,
    empty: empty2,
    join: join2,
    raw: raw2,
    Decimal: Decimal2,
    Debug: Debug2,
    objectEnumValues: objectEnumValues2,
    makeStrictEnum: makeStrictEnum2,
    Extensions: Extensions2,
    warnOnce: warnOnce2,
    defineDmmfProperty: defineDmmfProperty2,
    Public: Public2,
    getRuntime: getRuntime2
  } = require_library();
  var Prisma = {};
  exports.Prisma = Prisma;
  exports.$Enums = {};
  Prisma.prismaVersion = {
    client: "5.18.0",
    engine: "4c784e32044a8a016d99474bd02a3b6123742169"
  };
  Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError2;
  Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError2;
  Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError2;
  Prisma.PrismaClientInitializationError = PrismaClientInitializationError2;
  Prisma.PrismaClientValidationError = PrismaClientValidationError2;
  Prisma.NotFoundError = NotFoundError2;
  Prisma.Decimal = Decimal2;
  Prisma.sql = sqltag2;
  Prisma.empty = empty2;
  Prisma.join = join2;
  Prisma.raw = raw2;
  Prisma.validator = Public2.validator;
  Prisma.getExtensionContext = Extensions2.getExtensionContext;
  Prisma.defineExtension = Extensions2.defineExtension;
  Prisma.DbNull = objectEnumValues2.instances.DbNull;
  Prisma.JsonNull = objectEnumValues2.instances.JsonNull;
  Prisma.AnyNull = objectEnumValues2.instances.AnyNull;
  Prisma.NullTypes = {
    DbNull: objectEnumValues2.classes.DbNull,
    JsonNull: objectEnumValues2.classes.JsonNull,
    AnyNull: objectEnumValues2.classes.AnyNull
  };
  var path = import.meta.require("path");
  exports.Prisma.PostScalarFieldEnum = {
    id: "id",
    slug: "slug",
    title: "title",
    body: "body",
    authorId: "authorId"
  };
  exports.Prisma.UserScalarFieldEnum = {
    id: "id",
    passwordHash: "passwordHash",
    email: "email",
    name: "name"
  };
  exports.Prisma.SessionScalarFieldEnum = {
    id: "id",
    userId: "userId",
    expiresAt: "expiresAt"
  };
  exports.Prisma.CommentScalarFieldEnum = {
    id: "id",
    comment: "comment",
    postId: "postId"
  };
  exports.Prisma.SortOrder = {
    asc: "asc",
    desc: "desc"
  };
  exports.Prisma.QueryMode = {
    default: "default",
    insensitive: "insensitive"
  };
  exports.Prisma.ModelName = {
    Post: "Post",
    User: "User",
    Session: "Session",
    Comment: "Comment"
  };
  var config2 = {
    generator: {
      name: "client",
      provider: {
        fromEnvVar: null,
        value: "prisma-client-js"
      },
      output: {
        value: "/root/dev/prisma-test/node_modules/@prisma/client",
        fromEnvVar: null
      },
      config: {
        engineType: "library"
      },
      binaryTargets: [
        {
          fromEnvVar: null,
          value: "debian-openssl-3.0.x",
          native: true
        }
      ],
      previewFeatures: [],
      sourceFilePath: "/root/dev/prisma-test/prisma/schema.prisma"
    },
    relativeEnvPaths: {
      rootEnvPath: null,
      schemaEnvPath: "../../../.env"
    },
    relativePath: "../../../prisma",
    clientVersion: "5.18.0",
    engineVersion: "4c784e32044a8a016d99474bd02a3b6123742169",
    datasourceNames: [
      "db"
    ],
    activeProvider: "mongodb",
    postinstall: false,
    inlineDatasources: {
      db: {
        url: {
          fromEnvVar: "DATABASE_URL",
          value: null
        }
      }
    },
    inlineSchema: "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Post {\n  id       String    @id @default(auto()) @map(\"_id\") @db.ObjectId\n  slug     String    @unique\n  title    String\n  body     String\n  author   User      @relation(fields: [authorId], references: [id])\n  authorId String    @db.ObjectId\n  comments Comment[]\n}\n\nmodel User {\n  id           String    @id @default(auto()) @map(\"_id\") @db.ObjectId\n  passwordHash String\n  email        String    @unique\n  name         String?\n  address      Address?\n  posts        Post[]\n  sessions     Session[]\n}\n\nmodel Session {\n  id        String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  userId    String   @db.ObjectId\n  expiresAt DateTime\n  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)\n}\n\nmodel Comment {\n  id      String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  comment String\n  post    Post   @relation(fields: [postId], references: [id])\n  postId  String @db.ObjectId\n}\n\n// Address is an embedded document\ntype Address {\n  street String\n  city   String\n  state  String\n  zip    String\n}\n",
    inlineSchemaHash: "9590300a0a33a60f780a91ff68ef3bc990597515306160b169c3b3322ae07402",
    copyEngine: true
  };
  var fs = import.meta.require("fs");
  config2.dirname = __dirname;
  if (!fs.existsSync(path.join(__dirname, "schema.prisma"))) {
    const alternativePaths = [
      "node_modules/.prisma/client",
      ".prisma/client"
    ];
    const alternativePath = alternativePaths.find((altPath) => {
      return fs.existsSync(path.join(process.cwd(), altPath, "schema.prisma"));
    }) ?? alternativePaths[0];
    config2.dirname = path.join(process.cwd(), alternativePath);
    config2.isBundled = true;
  }
  config2.runtimeDataModel = JSON.parse("{\"models\":{\"Post\":{\"dbName\":null,\"fields\":[{\"name\":\"id\",\"dbName\":\"_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"default\":{\"name\":\"auto\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"slug\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":true,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"title\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"body\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"author\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"User\",\"relationName\":\"PostToUser\",\"relationFromFields\":[\"authorId\"],\"relationToFields\":[\"id\"],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"authorId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"comments\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Comment\",\"relationName\":\"CommentToPost\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"User\":{\"dbName\":null,\"fields\":[{\"name\":\"id\",\"dbName\":\"_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"default\":{\"name\":\"auto\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"email\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":true,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"name\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"address\",\"kind\":\"object\",\"isList\":false,\"isRequired\":false,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Address\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"posts\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Post\",\"relationName\":\"PostToUser\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"sessions\",\"kind\":\"object\",\"isList\":true,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Session\",\"relationName\":\"SessionToUser\",\"relationFromFields\":[],\"relationToFields\":[],\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"Session\":{\"dbName\":null,\"fields\":[{\"name\":\"id\",\"dbName\":\"_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"default\":{\"name\":\"auto\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"userId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"DateTime\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"user\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"User\",\"relationName\":\"SessionToUser\",\"relationFromFields\":[\"userId\"],\"relationToFields\":[\"id\"],\"relationOnDelete\":\"Cascade\",\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false},\"Comment\":{\"dbName\":null,\"fields\":[{\"name\":\"id\",\"dbName\":\"_id\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":true,\"isReadOnly\":false,\"hasDefaultValue\":true,\"type\":\"String\",\"default\":{\"name\":\"auto\",\"args\":[]},\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"comment\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"post\",\"kind\":\"object\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"Post\",\"relationName\":\"CommentToPost\",\"relationFromFields\":[\"postId\"],\"relationToFields\":[\"id\"],\"isGenerated\":false,\"isUpdatedAt\":false},{\"name\":\"postId\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":true,\"hasDefaultValue\":false,\"type\":\"String\",\"isGenerated\":false,\"isUpdatedAt\":false}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[],\"isGenerated\":false}},\"enums\":{},\"types\":{\"Address\":{\"dbName\":null,\"fields\":[{\"name\":\"street\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\"},{\"name\":\"city\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\"},{\"name\":\"state\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\"},{\"name\":\"zip\",\"kind\":\"scalar\",\"isList\":false,\"isRequired\":true,\"isUnique\":false,\"isId\":false,\"isReadOnly\":false,\"hasDefaultValue\":false,\"type\":\"String\"}],\"primaryKey\":null,\"uniqueFields\":[],\"uniqueIndexes\":[]}}}");
  defineDmmfProperty2(exports.Prisma, config2.runtimeDataModel);
  config2.engineWasm = undefined;
  var { warnEnvConflicts: warnEnvConflicts2 } = require_library();
  warnEnvConflicts2({
    rootEnvPath: config2.relativeEnvPaths.rootEnvPath && path.resolve(config2.dirname, config2.relativeEnvPaths.rootEnvPath),
    schemaEnvPath: config2.relativeEnvPaths.schemaEnvPath && path.resolve(config2.dirname, config2.relativeEnvPaths.schemaEnvPath)
  });
  var PrismaClient = getPrismaClient2(config2);
  exports.PrismaClient = PrismaClient;
  Object.assign(exports, Prisma);
  path.join(__dirname, "libquery_engine-debian-openssl-3.0.x.so.node");
  path.join(process.cwd(), "node_modules/.prisma/client/libquery_engine-debian-openssl-3.0.x.so.node");
  path.join(__dirname, "schema.prisma");
  path.join(process.cwd(), "node_modules/.prisma/client/schema.prisma");
});

// node_modules/.prisma/client/default.js
var require_default = __commonJS((exports, module) => {
  module.exports = { ...require_client() };
});

// node_modules/@prisma/client/default.js
var require_default2 = __commonJS((exports, module) => {
  module.exports = {
    ...require_default()
  };
});

// node_modules/@sinclair/typebox/build/esm/value/guard/guard.mjs
function IsAsyncIterator(value) {
  return IsObject(value) && Symbol.asyncIterator in value;
}
function IsIterator(value) {
  return IsObject(value) && Symbol.iterator in value;
}
function IsStandardObject(value) {
  return IsObject(value) && (Object.getPrototypeOf(value) === Object.prototype || Object.getPrototypeOf(value) === null);
}
function IsPromise(value) {
  return value instanceof Promise;
}
function IsDate(value) {
  return value instanceof Date && Number.isFinite(value.getTime());
}
function IsTypedArray(value) {
  return ArrayBuffer.isView(value);
}
function IsUint8Array(value) {
  return value instanceof globalThis.Uint8Array;
}
function HasPropertyKey(value, key) {
  return key in value;
}
function IsObject(value) {
  return value !== null && typeof value === "object";
}
function IsArray(value) {
  return Array.isArray(value) && !ArrayBuffer.isView(value);
}
function IsUndefined(value) {
  return value === undefined;
}
function IsNull(value) {
  return value === null;
}
function IsBoolean(value) {
  return typeof value === "boolean";
}
function IsNumber(value) {
  return typeof value === "number";
}
function IsInteger(value) {
  return Number.isInteger(value);
}
function IsBigInt(value) {
  return typeof value === "bigint";
}
function IsString(value) {
  return typeof value === "string";
}
function IsFunction(value) {
  return typeof value === "function";
}
function IsSymbol(value) {
  return typeof value === "symbol";
}
function IsValueType(value) {
  return IsBigInt(value) || IsBoolean(value) || IsNull(value) || IsNumber(value) || IsString(value) || IsSymbol(value) || IsUndefined(value);
}
// node_modules/@sinclair/typebox/build/esm/system/policy.mjs
var TypeSystemPolicy;
(function(TypeSystemPolicy2) {
  TypeSystemPolicy2.ExactOptionalPropertyTypes = false;
  TypeSystemPolicy2.AllowArrayObject = false;
  TypeSystemPolicy2.AllowNaN = false;
  TypeSystemPolicy2.AllowNullVoid = false;
  function IsExactOptionalProperty(value, key) {
    return TypeSystemPolicy2.ExactOptionalPropertyTypes ? key in value : value[key] !== undefined;
  }
  TypeSystemPolicy2.IsExactOptionalProperty = IsExactOptionalProperty;
  function IsObjectLike(value) {
    const isObject = IsObject(value);
    return TypeSystemPolicy2.AllowArrayObject ? isObject : isObject && !IsArray(value);
  }
  TypeSystemPolicy2.IsObjectLike = IsObjectLike;
  function IsRecordLike(value) {
    return IsObjectLike(value) && !(value instanceof Date) && !(value instanceof Uint8Array);
  }
  TypeSystemPolicy2.IsRecordLike = IsRecordLike;
  function IsNumberLike(value) {
    return TypeSystemPolicy2.AllowNaN ? IsNumber(value) : Number.isFinite(value);
  }
  TypeSystemPolicy2.IsNumberLike = IsNumberLike;
  function IsVoidLike(value) {
    const isUndefined = IsUndefined(value);
    return TypeSystemPolicy2.AllowNullVoid ? isUndefined || value === null : isUndefined;
  }
  TypeSystemPolicy2.IsVoidLike = IsVoidLike;
})(TypeSystemPolicy || (TypeSystemPolicy = {}));
// node_modules/@sinclair/typebox/build/esm/type/registry/format.mjs
var exports_format = {};
__export(exports_format, {
  Set: () => Set2,
  Has: () => Has,
  Get: () => Get,
  Entries: () => Entries,
  Delete: () => Delete,
  Clear: () => Clear
});
function Entries() {
  return new Map(map);
}
function Clear() {
  return map.clear();
}
function Delete(format) {
  return map.delete(format);
}
function Has(format) {
  return map.has(format);
}
function Set2(format, func) {
  map.set(format, func);
}
function Get(format) {
  return map.get(format);
}
var map = new Map;
// node_modules/@sinclair/typebox/build/esm/type/registry/type.mjs
var exports_type = {};
__export(exports_type, {
  Set: () => Set3,
  Has: () => Has2,
  Get: () => Get2,
  Entries: () => Entries2,
  Delete: () => Delete2,
  Clear: () => Clear2
});
function Entries2() {
  return new Map(map2);
}
function Clear2() {
  return map2.clear();
}
function Delete2(kind) {
  return map2.delete(kind);
}
function Has2(kind) {
  return map2.has(kind);
}
function Set3(kind, func) {
  map2.set(kind, func);
}
function Get2(kind) {
  return map2.get(kind);
}
var map2 = new Map;
// node_modules/@sinclair/typebox/build/esm/type/symbols/symbols.mjs
var TransformKind = Symbol.for("TypeBox.Transform");
var ReadonlyKind = Symbol.for("TypeBox.Readonly");
var OptionalKind = Symbol.for("TypeBox.Optional");
var Hint = Symbol.for("TypeBox.Hint");
var Kind = Symbol.for("TypeBox.Kind");
// node_modules/@sinclair/typebox/build/esm/type/unsafe/unsafe.mjs
function Unsafe(options = {}) {
  return {
    ...options,
    [Kind]: options[Kind] ?? "Unsafe"
  };
}
// node_modules/@sinclair/typebox/build/esm/type/error/error.mjs
class TypeBoxError extends Error {
  constructor(message) {
    super(message);
  }
}
// node_modules/@sinclair/typebox/build/esm/system/system.mjs
class TypeSystemDuplicateTypeKind extends TypeBoxError {
  constructor(kind) {
    super(`Duplicate type kind '${kind}' detected`);
  }
}

class TypeSystemDuplicateFormat extends TypeBoxError {
  constructor(kind) {
    super(`Duplicate string format '${kind}' detected`);
  }
}
var TypeSystem;
(function(TypeSystem2) {
  function Type(kind, check) {
    if (exports_type.Has(kind))
      throw new TypeSystemDuplicateTypeKind(kind);
    exports_type.Set(kind, check);
    return (options = {}) => Unsafe({ ...options, [Kind]: kind });
  }
  TypeSystem2.Type = Type;
  function Format(format, check) {
    if (exports_format.Has(format))
      throw new TypeSystemDuplicateFormat(format);
    exports_format.Set(format, check);
    return format;
  }
  TypeSystem2.Format = Format;
})(TypeSystem || (TypeSystem = {}));
// node_modules/@sinclair/typebox/build/esm/type/mapped/mapped-result.mjs
function MappedResult(properties) {
  return {
    [Kind]: "MappedResult",
    properties
  };
}
// node_modules/@sinclair/typebox/build/esm/type/guard/value.mjs
var exports_value = {};
__export(exports_value, {
  IsUndefined: () => IsUndefined2,
  IsUint8Array: () => IsUint8Array2,
  IsSymbol: () => IsSymbol2,
  IsString: () => IsString2,
  IsRegExp: () => IsRegExp,
  IsObject: () => IsObject2,
  IsNumber: () => IsNumber2,
  IsNull: () => IsNull2,
  IsIterator: () => IsIterator2,
  IsFunction: () => IsFunction2,
  IsDate: () => IsDate2,
  IsBoolean: () => IsBoolean2,
  IsBigInt: () => IsBigInt2,
  IsAsyncIterator: () => IsAsyncIterator2,
  IsArray: () => IsArray2
});
function IsAsyncIterator2(value) {
  return IsObject2(value) && !IsArray2(value) && !IsUint8Array2(value) && Symbol.asyncIterator in value;
}
function IsArray2(value) {
  return Array.isArray(value);
}
function IsBigInt2(value) {
  return typeof value === "bigint";
}
function IsBoolean2(value) {
  return typeof value === "boolean";
}
function IsDate2(value) {
  return value instanceof globalThis.Date;
}
function IsFunction2(value) {
  return typeof value === "function";
}
function IsIterator2(value) {
  return IsObject2(value) && !IsArray2(value) && !IsUint8Array2(value) && Symbol.iterator in value;
}
function IsNull2(value) {
  return value === null;
}
function IsNumber2(value) {
  return typeof value === "number";
}
function IsObject2(value) {
  return typeof value === "object" && value !== null;
}
function IsRegExp(value) {
  return value instanceof globalThis.RegExp;
}
function IsString2(value) {
  return typeof value === "string";
}
function IsSymbol2(value) {
  return typeof value === "symbol";
}
function IsUint8Array2(value) {
  return value instanceof globalThis.Uint8Array;
}
function IsUndefined2(value) {
  return value === undefined;
}

// node_modules/@sinclair/typebox/build/esm/type/clone/value.mjs
function ArrayType(value) {
  return value.map((value2) => Visit(value2));
}
function DateType(value) {
  return new Date(value.getTime());
}
function Uint8ArrayType(value) {
  return new Uint8Array(value);
}
function RegExpType(value) {
  return new RegExp(value.source, value.flags);
}
function ObjectType(value) {
  const result = {};
  for (const key of Object.getOwnPropertyNames(value)) {
    result[key] = Visit(value[key]);
  }
  for (const key of Object.getOwnPropertySymbols(value)) {
    result[key] = Visit(value[key]);
  }
  return result;
}
function Visit(value) {
  return IsArray2(value) ? ArrayType(value) : IsDate2(value) ? DateType(value) : IsUint8Array2(value) ? Uint8ArrayType(value) : IsRegExp(value) ? RegExpType(value) : IsObject2(value) ? ObjectType(value) : value;
}
function Clone(value) {
  return Visit(value);
}

// node_modules/@sinclair/typebox/build/esm/type/clone/type.mjs
function CloneRest(schemas) {
  return schemas.map((schema) => CloneType(schema));
}
function CloneType(schema, options = {}) {
  return { ...Clone(schema), ...options };
}

// node_modules/@sinclair/typebox/build/esm/type/discard/discard.mjs
function DiscardKey(value2, key) {
  const { [key]: _, ...rest } = value2;
  return rest;
}
function Discard(value2, keys) {
  return keys.reduce((acc, key) => DiscardKey(acc, key), value2);
}
// node_modules/@sinclair/typebox/build/esm/type/array/array.mjs
function Array2(schema, options = {}) {
  return {
    ...options,
    [Kind]: "Array",
    type: "array",
    items: CloneType(schema)
  };
}
// node_modules/@sinclair/typebox/build/esm/type/async-iterator/async-iterator.mjs
function AsyncIterator(items, options = {}) {
  return {
    ...options,
    [Kind]: "AsyncIterator",
    type: "AsyncIterator",
    items: CloneType(items)
  };
}
// node_modules/@sinclair/typebox/build/esm/type/constructor/constructor.mjs
function Constructor(parameters, returns, options) {
  return {
    ...options,
    [Kind]: "Constructor",
    type: "Constructor",
    parameters: CloneRest(parameters),
    returns: CloneType(returns)
  };
}
// node_modules/@sinclair/typebox/build/esm/type/function/function.mjs
function Function2(parameters, returns, options) {
  return {
    ...options,
    [Kind]: "Function",
    type: "Function",
    parameters: CloneRest(parameters),
    returns: CloneType(returns)
  };
}
// node_modules/@sinclair/typebox/build/esm/type/never/never.mjs
function Never(options = {}) {
  return {
    ...options,
    [Kind]: "Never",
    not: {}
  };
}
// node_modules/@sinclair/typebox/build/esm/type/guard/kind.mjs
function IsReadonly(value2) {
  return IsObject2(value2) && value2[ReadonlyKind] === "Readonly";
}
function IsOptional(value2) {
  return IsObject2(value2) && value2[OptionalKind] === "Optional";
}
function IsAny(value2) {
  return IsKindOf(value2, "Any");
}
function IsArray3(value2) {
  return IsKindOf(value2, "Array");
}
function IsAsyncIterator3(value2) {
  return IsKindOf(value2, "AsyncIterator");
}
function IsBigInt3(value2) {
  return IsKindOf(value2, "BigInt");
}
function IsBoolean3(value2) {
  return IsKindOf(value2, "Boolean");
}
function IsConstructor(value2) {
  return IsKindOf(value2, "Constructor");
}
function IsDate3(value2) {
  return IsKindOf(value2, "Date");
}
function IsFunction3(value2) {
  return IsKindOf(value2, "Function");
}
function IsInteger2(value2) {
  return IsKindOf(value2, "Integer");
}
function IsIntersect(value2) {
  return IsKindOf(value2, "Intersect");
}
function IsIterator3(value2) {
  return IsKindOf(value2, "Iterator");
}
function IsKindOf(value2, kind) {
  return IsObject2(value2) && Kind in value2 && value2[Kind] === kind;
}
function IsLiteral(value2) {
  return IsKindOf(value2, "Literal");
}
function IsMappedKey(value2) {
  return IsKindOf(value2, "MappedKey");
}
function IsMappedResult(value2) {
  return IsKindOf(value2, "MappedResult");
}
function IsNever(value2) {
  return IsKindOf(value2, "Never");
}
function IsNot(value2) {
  return IsKindOf(value2, "Not");
}
function IsNull3(value2) {
  return IsKindOf(value2, "Null");
}
function IsNumber3(value2) {
  return IsKindOf(value2, "Number");
}
function IsObject3(value2) {
  return IsKindOf(value2, "Object");
}
function IsPromise2(value2) {
  return IsKindOf(value2, "Promise");
}
function IsRecord(value2) {
  return IsKindOf(value2, "Record");
}
function IsRef(value2) {
  return IsKindOf(value2, "Ref");
}
function IsRegExp2(value2) {
  return IsKindOf(value2, "RegExp");
}
function IsString3(value2) {
  return IsKindOf(value2, "String");
}
function IsSymbol3(value2) {
  return IsKindOf(value2, "Symbol");
}
function IsTemplateLiteral(value2) {
  return IsKindOf(value2, "TemplateLiteral");
}
function IsThis(value2) {
  return IsKindOf(value2, "This");
}
function IsTransform(value2) {
  return IsObject2(value2) && TransformKind in value2;
}
function IsTuple(value2) {
  return IsKindOf(value2, "Tuple");
}
function IsUndefined3(value2) {
  return IsKindOf(value2, "Undefined");
}
function IsUnion(value2) {
  return IsKindOf(value2, "Union");
}
function IsUint8Array3(value2) {
  return IsKindOf(value2, "Uint8Array");
}
function IsUnknown(value2) {
  return IsKindOf(value2, "Unknown");
}
function IsUnsafe(value2) {
  return IsKindOf(value2, "Unsafe");
}
function IsVoid(value2) {
  return IsKindOf(value2, "Void");
}
function IsKind(value2) {
  return IsObject2(value2) && Kind in value2 && IsString2(value2[Kind]);
}
function IsSchema(value2) {
  return IsAny(value2) || IsArray3(value2) || IsBoolean3(value2) || IsBigInt3(value2) || IsAsyncIterator3(value2) || IsConstructor(value2) || IsDate3(value2) || IsFunction3(value2) || IsInteger2(value2) || IsIntersect(value2) || IsIterator3(value2) || IsLiteral(value2) || IsMappedKey(value2) || IsMappedResult(value2) || IsNever(value2) || IsNot(value2) || IsNull3(value2) || IsNumber3(value2) || IsObject3(value2) || IsPromise2(value2) || IsRecord(value2) || IsRef(value2) || IsRegExp2(value2) || IsString3(value2) || IsSymbol3(value2) || IsTemplateLiteral(value2) || IsThis(value2) || IsTuple(value2) || IsUndefined3(value2) || IsUnion(value2) || IsUint8Array3(value2) || IsUnknown(value2) || IsUnsafe(value2) || IsVoid(value2) || IsKind(value2);
}

// node_modules/@sinclair/typebox/build/esm/type/optional/optional.mjs
function RemoveOptional(schema) {
  return Discard(CloneType(schema), [OptionalKind]);
}
function AddOptional(schema) {
  return { ...CloneType(schema), [OptionalKind]: "Optional" };
}
function OptionalWithFlag(schema, F) {
  return F === false ? RemoveOptional(schema) : AddOptional(schema);
}
function Optional(schema, enable) {
  const F = enable ?? true;
  return IsMappedResult(schema) ? OptionalFromMappedResult(schema, F) : OptionalWithFlag(schema, F);
}

// node_modules/@sinclair/typebox/build/esm/type/optional/optional-from-mapped-result.mjs
function FromProperties(P, F) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(P))
    Acc[K2] = Optional(P[K2], F);
  return Acc;
}
function FromMappedResult(R, F) {
  return FromProperties(R.properties, F);
}
function OptionalFromMappedResult(R, F) {
  const P = FromMappedResult(R, F);
  return MappedResult(P);
}
// node_modules/@sinclair/typebox/build/esm/type/intersect/intersect-create.mjs
function IntersectCreate(T, options) {
  const allObjects = T.every((schema) => IsObject3(schema));
  const clonedUnevaluatedProperties = IsSchema(options.unevaluatedProperties) ? { unevaluatedProperties: CloneType(options.unevaluatedProperties) } : {};
  return options.unevaluatedProperties === false || IsSchema(options.unevaluatedProperties) || allObjects ? { ...options, ...clonedUnevaluatedProperties, [Kind]: "Intersect", type: "object", allOf: CloneRest(T) } : { ...options, ...clonedUnevaluatedProperties, [Kind]: "Intersect", allOf: CloneRest(T) };
}

// node_modules/@sinclair/typebox/build/esm/type/intersect/intersect-evaluated.mjs
function IsIntersectOptional(T) {
  return T.every((L) => IsOptional(L));
}
function RemoveOptionalFromType(T) {
  return Discard(T, [OptionalKind]);
}
function RemoveOptionalFromRest(T) {
  return T.map((L) => IsOptional(L) ? RemoveOptionalFromType(L) : L);
}
function ResolveIntersect(T, options) {
  return IsIntersectOptional(T) ? Optional(IntersectCreate(RemoveOptionalFromRest(T), options)) : IntersectCreate(RemoveOptionalFromRest(T), options);
}
function IntersectEvaluated(T, options = {}) {
  if (T.length === 0)
    return Never(options);
  if (T.length === 1)
    return CloneType(T[0], options);
  if (T.some((schema) => IsTransform(schema)))
    throw new Error("Cannot intersect transform types");
  return ResolveIntersect(T, options);
}
// node_modules/@sinclair/typebox/build/esm/type/intersect/intersect.mjs
function Intersect(T, options = {}) {
  if (T.length === 0)
    return Never(options);
  if (T.length === 1)
    return CloneType(T[0], options);
  if (T.some((schema) => IsTransform(schema)))
    throw new Error("Cannot intersect transform types");
  return IntersectCreate(T, options);
}
// node_modules/@sinclair/typebox/build/esm/type/union/union-create.mjs
function UnionCreate(T, options) {
  return { ...options, [Kind]: "Union", anyOf: CloneRest(T) };
}

// node_modules/@sinclair/typebox/build/esm/type/union/union-evaluated.mjs
function IsUnionOptional(T) {
  return T.some((L) => IsOptional(L));
}
function RemoveOptionalFromRest2(T) {
  return T.map((L) => IsOptional(L) ? RemoveOptionalFromType2(L) : L);
}
function RemoveOptionalFromType2(T) {
  return Discard(T, [OptionalKind]);
}
function ResolveUnion(T, options) {
  return IsUnionOptional(T) ? Optional(UnionCreate(RemoveOptionalFromRest2(T), options)) : UnionCreate(RemoveOptionalFromRest2(T), options);
}
function UnionEvaluated(T, options = {}) {
  return T.length === 0 ? Never(options) : T.length === 1 ? CloneType(T[0], options) : ResolveUnion(T, options);
}
// node_modules/@sinclair/typebox/build/esm/type/union/union.mjs
function Union(T, options = {}) {
  return T.length === 0 ? Never(options) : T.length === 1 ? CloneType(T[0], options) : UnionCreate(T, options);
}
// node_modules/@sinclair/typebox/build/esm/type/template-literal/parse.mjs
function Unescape(pattern) {
  return pattern.replace(/\\\$/g, "$").replace(/\\\*/g, "*").replace(/\\\^/g, "^").replace(/\\\|/g, "|").replace(/\\\(/g, "(").replace(/\\\)/g, ")");
}
function IsNonEscaped(pattern, index, char) {
  return pattern[index] === char && pattern.charCodeAt(index - 1) !== 92;
}
function IsOpenParen(pattern, index) {
  return IsNonEscaped(pattern, index, "(");
}
function IsCloseParen(pattern, index) {
  return IsNonEscaped(pattern, index, ")");
}
function IsSeparator(pattern, index) {
  return IsNonEscaped(pattern, index, "|");
}
function IsGroup(pattern) {
  if (!(IsOpenParen(pattern, 0) && IsCloseParen(pattern, pattern.length - 1)))
    return false;
  let count = 0;
  for (let index = 0;index < pattern.length; index++) {
    if (IsOpenParen(pattern, index))
      count += 1;
    if (IsCloseParen(pattern, index))
      count -= 1;
    if (count === 0 && index !== pattern.length - 1)
      return false;
  }
  return true;
}
function InGroup(pattern) {
  return pattern.slice(1, pattern.length - 1);
}
function IsPrecedenceOr(pattern) {
  let count = 0;
  for (let index = 0;index < pattern.length; index++) {
    if (IsOpenParen(pattern, index))
      count += 1;
    if (IsCloseParen(pattern, index))
      count -= 1;
    if (IsSeparator(pattern, index) && count === 0)
      return true;
  }
  return false;
}
function IsPrecedenceAnd(pattern) {
  for (let index = 0;index < pattern.length; index++) {
    if (IsOpenParen(pattern, index))
      return true;
  }
  return false;
}
function Or(pattern) {
  let [count, start] = [0, 0];
  const expressions = [];
  for (let index = 0;index < pattern.length; index++) {
    if (IsOpenParen(pattern, index))
      count += 1;
    if (IsCloseParen(pattern, index))
      count -= 1;
    if (IsSeparator(pattern, index) && count === 0) {
      const range2 = pattern.slice(start, index);
      if (range2.length > 0)
        expressions.push(TemplateLiteralParse(range2));
      start = index + 1;
    }
  }
  const range = pattern.slice(start);
  if (range.length > 0)
    expressions.push(TemplateLiteralParse(range));
  if (expressions.length === 0)
    return { type: "const", const: "" };
  if (expressions.length === 1)
    return expressions[0];
  return { type: "or", expr: expressions };
}
function And(pattern) {
  function Group(value2, index) {
    if (!IsOpenParen(value2, index))
      throw new TemplateLiteralParserError(`TemplateLiteralParser: Index must point to open parens`);
    let count = 0;
    for (let scan = index;scan < value2.length; scan++) {
      if (IsOpenParen(value2, scan))
        count += 1;
      if (IsCloseParen(value2, scan))
        count -= 1;
      if (count === 0)
        return [index, scan];
    }
    throw new TemplateLiteralParserError(`TemplateLiteralParser: Unclosed group parens in expression`);
  }
  function Range(pattern2, index) {
    for (let scan = index;scan < pattern2.length; scan++) {
      if (IsOpenParen(pattern2, scan))
        return [index, scan];
    }
    return [index, pattern2.length];
  }
  const expressions = [];
  for (let index = 0;index < pattern.length; index++) {
    if (IsOpenParen(pattern, index)) {
      const [start, end] = Group(pattern, index);
      const range = pattern.slice(start, end + 1);
      expressions.push(TemplateLiteralParse(range));
      index = end;
    } else {
      const [start, end] = Range(pattern, index);
      const range = pattern.slice(start, end);
      if (range.length > 0)
        expressions.push(TemplateLiteralParse(range));
      index = end - 1;
    }
  }
  return expressions.length === 0 ? { type: "const", const: "" } : expressions.length === 1 ? expressions[0] : { type: "and", expr: expressions };
}
function TemplateLiteralParse(pattern) {
  return IsGroup(pattern) ? TemplateLiteralParse(InGroup(pattern)) : IsPrecedenceOr(pattern) ? Or(pattern) : IsPrecedenceAnd(pattern) ? And(pattern) : { type: "const", const: Unescape(pattern) };
}
function TemplateLiteralParseExact(pattern) {
  return TemplateLiteralParse(pattern.slice(1, pattern.length - 1));
}

class TemplateLiteralParserError extends TypeBoxError {
}

// node_modules/@sinclair/typebox/build/esm/type/template-literal/finite.mjs
function IsNumberExpression(expression) {
  return expression.type === "or" && expression.expr.length === 2 && expression.expr[0].type === "const" && expression.expr[0].const === "0" && expression.expr[1].type === "const" && expression.expr[1].const === "[1-9][0-9]*";
}
function IsBooleanExpression(expression) {
  return expression.type === "or" && expression.expr.length === 2 && expression.expr[0].type === "const" && expression.expr[0].const === "true" && expression.expr[1].type === "const" && expression.expr[1].const === "false";
}
function IsStringExpression(expression) {
  return expression.type === "const" && expression.const === ".*";
}
function IsTemplateLiteralExpressionFinite(expression) {
  return IsNumberExpression(expression) || IsStringExpression(expression) ? false : IsBooleanExpression(expression) ? true : expression.type === "and" ? expression.expr.every((expr) => IsTemplateLiteralExpressionFinite(expr)) : expression.type === "or" ? expression.expr.every((expr) => IsTemplateLiteralExpressionFinite(expr)) : expression.type === "const" ? true : (() => {
    throw new TemplateLiteralFiniteError(`Unknown expression type`);
  })();
}
function IsTemplateLiteralFinite(schema) {
  const expression = TemplateLiteralParseExact(schema.pattern);
  return IsTemplateLiteralExpressionFinite(expression);
}

class TemplateLiteralFiniteError extends TypeBoxError {
}
// node_modules/@sinclair/typebox/build/esm/type/template-literal/generate.mjs
function* GenerateReduce(buffer) {
  if (buffer.length === 1)
    return yield* buffer[0];
  for (const left of buffer[0]) {
    for (const right of GenerateReduce(buffer.slice(1))) {
      yield `${left}${right}`;
    }
  }
}
function* GenerateAnd(expression) {
  return yield* GenerateReduce(expression.expr.map((expr) => [...TemplateLiteralExpressionGenerate(expr)]));
}
function* GenerateOr(expression) {
  for (const expr of expression.expr)
    yield* TemplateLiteralExpressionGenerate(expr);
}
function* GenerateConst(expression) {
  return yield expression.const;
}
function* TemplateLiteralExpressionGenerate(expression) {
  return expression.type === "and" ? yield* GenerateAnd(expression) : expression.type === "or" ? yield* GenerateOr(expression) : expression.type === "const" ? yield* GenerateConst(expression) : (() => {
    throw new TemplateLiteralGenerateError("Unknown expression");
  })();
}
function TemplateLiteralGenerate(schema) {
  const expression = TemplateLiteralParseExact(schema.pattern);
  return IsTemplateLiteralExpressionFinite(expression) ? [...TemplateLiteralExpressionGenerate(expression)] : [];
}

class TemplateLiteralGenerateError extends TypeBoxError {
}
// node_modules/@sinclair/typebox/build/esm/type/literal/literal.mjs
function Literal(value2, options = {}) {
  return {
    ...options,
    [Kind]: "Literal",
    const: value2,
    type: typeof value2
  };
}
// node_modules/@sinclair/typebox/build/esm/type/boolean/boolean.mjs
function Boolean2(options = {}) {
  return {
    ...options,
    [Kind]: "Boolean",
    type: "boolean"
  };
}
// node_modules/@sinclair/typebox/build/esm/type/bigint/bigint.mjs
function BigInt2(options = {}) {
  return {
    ...options,
    [Kind]: "BigInt",
    type: "bigint"
  };
}
// node_modules/@sinclair/typebox/build/esm/type/number/number.mjs
function Number2(options = {}) {
  return {
    ...options,
    [Kind]: "Number",
    type: "number"
  };
}
// node_modules/@sinclair/typebox/build/esm/type/string/string.mjs
function String2(options = {}) {
  return { ...options, [Kind]: "String", type: "string" };
}
// node_modules/@sinclair/typebox/build/esm/type/template-literal/syntax.mjs
function* FromUnion(syntax) {
  const trim = syntax.trim().replace(/"|'/g, "");
  return trim === "boolean" ? yield Boolean2() : trim === "number" ? yield Number2() : trim === "bigint" ? yield BigInt2() : trim === "string" ? yield String2() : yield (() => {
    const literals = trim.split("|").map((literal3) => Literal(literal3.trim()));
    return literals.length === 0 ? Never() : literals.length === 1 ? literals[0] : UnionEvaluated(literals);
  })();
}
function* FromTerminal(syntax) {
  if (syntax[1] !== "{") {
    const L = Literal("$");
    const R = FromSyntax(syntax.slice(1));
    return yield* [L, ...R];
  }
  for (let i = 2;i < syntax.length; i++) {
    if (syntax[i] === "}") {
      const L = FromUnion(syntax.slice(2, i));
      const R = FromSyntax(syntax.slice(i + 1));
      return yield* [...L, ...R];
    }
  }
  yield Literal(syntax);
}
function* FromSyntax(syntax) {
  for (let i = 0;i < syntax.length; i++) {
    if (syntax[i] === "$") {
      const L = Literal(syntax.slice(0, i));
      const R = FromTerminal(syntax.slice(i));
      return yield* [L, ...R];
    }
  }
  yield Literal(syntax);
}
function TemplateLiteralSyntax(syntax) {
  return [...FromSyntax(syntax)];
}
// node_modules/@sinclair/typebox/build/esm/type/patterns/patterns.mjs
var PatternBoolean = "(true|false)";
var PatternNumber = "(0|[1-9][0-9]*)";
var PatternString = "(.*)";
var PatternBooleanExact = `^${PatternBoolean}\$`;
var PatternNumberExact = `^${PatternNumber}\$`;
var PatternStringExact = `^${PatternString}\$`;
// node_modules/@sinclair/typebox/build/esm/type/template-literal/pattern.mjs
function Escape(value2) {
  return value2.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
function Visit2(schema, acc) {
  return IsTemplateLiteral(schema) ? schema.pattern.slice(1, schema.pattern.length - 1) : IsUnion(schema) ? `(${schema.anyOf.map((schema2) => Visit2(schema2, acc)).join("|")})` : IsNumber3(schema) ? `${acc}${PatternNumber}` : IsInteger2(schema) ? `${acc}${PatternNumber}` : IsBigInt3(schema) ? `${acc}${PatternNumber}` : IsString3(schema) ? `${acc}${PatternString}` : IsLiteral(schema) ? `${acc}${Escape(schema.const.toString())}` : IsBoolean3(schema) ? `${acc}${PatternBoolean}` : (() => {
    throw new TemplateLiteralPatternError(`Unexpected Kind '${schema[Kind]}'`);
  })();
}
function TemplateLiteralPattern(kinds) {
  return `^${kinds.map((schema) => Visit2(schema, "")).join("")}$`;
}

class TemplateLiteralPatternError extends TypeBoxError {
}
// node_modules/@sinclair/typebox/build/esm/type/template-literal/union.mjs
function TemplateLiteralToUnion(schema) {
  const R = TemplateLiteralGenerate(schema);
  const L = R.map((S) => Literal(S));
  return UnionEvaluated(L);
}
// node_modules/@sinclair/typebox/build/esm/type/template-literal/template-literal.mjs
function TemplateLiteral(unresolved, options = {}) {
  const pattern2 = IsString2(unresolved) ? TemplateLiteralPattern(TemplateLiteralSyntax(unresolved)) : TemplateLiteralPattern(unresolved);
  return { ...options, [Kind]: "TemplateLiteral", type: "string", pattern: pattern2 };
}
// node_modules/@sinclair/typebox/build/esm/type/indexed/indexed-property-keys.mjs
function FromTemplateLiteral(T) {
  const R = TemplateLiteralGenerate(T);
  return R.map((S) => S.toString());
}
function FromUnion2(T) {
  const Acc = [];
  for (const L of T)
    Acc.push(...IndexPropertyKeys(L));
  return Acc;
}
function FromLiteral(T) {
  return [T.toString()];
}
function IndexPropertyKeys(T) {
  return [...new Set(IsTemplateLiteral(T) ? FromTemplateLiteral(T) : IsUnion(T) ? FromUnion2(T.anyOf) : IsLiteral(T) ? FromLiteral(T.const) : IsNumber3(T) ? ["[number]"] : IsInteger2(T) ? ["[number]"] : [])];
}

// node_modules/@sinclair/typebox/build/esm/type/indexed/indexed-from-mapped-result.mjs
function FromProperties2(T, P, options) {
  const Acc = {};
  for (const K2 of Object.getOwnPropertyNames(P)) {
    Acc[K2] = Index(T, IndexPropertyKeys(P[K2]), options);
  }
  return Acc;
}
function FromMappedResult2(T, R, options) {
  return FromProperties2(T, R.properties, options);
}
function IndexFromMappedResult(T, R, options) {
  const P = FromMappedResult2(T, R, options);
  return MappedResult(P);
}

// node_modules/@sinclair/typebox/build/esm/type/indexed/indexed.mjs
function FromRest(T, K) {
  return T.map((L) => IndexFromPropertyKey(L, K));
}
function FromIntersectRest(T) {
  return T.filter((L) => !IsNever(L));
}
function FromIntersect(T, K) {
  return IntersectEvaluated(FromIntersectRest(FromRest(T, K)));
}
function FromUnionRest(T) {
  return T.some((L) => IsNever(L)) ? [] : T;
}
function FromUnion3(T, K) {
  return UnionEvaluated(FromUnionRest(FromRest(T, K)));
}
function FromTuple(T, K) {
  return K in T ? T[K] : K === "[number]" ? UnionEvaluated(T) : Never();
}
function FromArray(T, K) {
  return K === "[number]" ? T : Never();
}
function FromProperty(T, K) {
  return K in T ? T[K] : Never();
}
function IndexFromPropertyKey(T, K) {
  return IsIntersect(T) ? FromIntersect(T.allOf, K) : IsUnion(T) ? FromUnion3(T.anyOf, K) : IsTuple(T) ? FromTuple(T.items ?? [], K) : IsArray3(T) ? FromArray(T.items, K) : IsObject3(T) ? FromProperty(T.properties, K) : Never();
}
function IndexFromPropertyKeys(T, K) {
  return K.map((L) => IndexFromPropertyKey(T, L));
}
function FromSchema(T, K) {
  return UnionEvaluated(IndexFromPropertyKeys(T, K));
}
function Index(T, K, options = {}) {
  return IsMappedResult(K) ? CloneType(IndexFromMappedResult(T, K, options)) : IsMappedKey(K) ? CloneType(IndexFromMappedKey(T, K, options)) : IsSchema(K) ? CloneType(FromSchema(T, IndexPropertyKeys(K)), options) : CloneType(FromSchema(T, K), options);
}

// node_modules/@sinclair/typebox/build/esm/type/indexed/indexed-from-mapped-key.mjs
function MappedIndexPropertyKey(T, K, options) {
  return { [K]: Index(T, [K], options) };
}
function MappedIndexPropertyKeys(T, K, options) {
  return K.reduce((Acc, L) => {
    return { ...Acc, ...MappedIndexPropertyKey(T, L, options) };
  }, {});
}
function MappedIndexProperties(T, K, options) {
  return MappedIndexPropertyKeys(T, K.keys, options);
}
function IndexFromMappedKey(T, K, options) {
  const P = MappedIndexProperties(T, K, options);
  return MappedResult(P);
}
// node_modules/@sinclair/typebox/build/esm/type/iterator/iterator.mjs
function Iterator(items, options = {}) {
  return {
    ...options,
    [Kind]: "Iterator",
    type: "Iterator",
    items: CloneType(items)
  };
}
// node_modules/@sinclair/typebox/build/esm/type/object/object.mjs
function _Object(properties, options = {}) {
  const propertyKeys = globalThis.Object.getOwnPropertyNames(properties);
  const optionalKeys = propertyKeys.filter((key) => IsOptional(properties[key]));
  const requiredKeys = propertyKeys.filter((name) => !optionalKeys.includes(name));
  const clonedAdditionalProperties = IsSchema(options.additionalProperties) ? { additionalProperties: CloneType(options.additionalProperties) } : {};
  const clonedProperties = {};
  for (const key of propertyKeys)
    clonedProperties[key] = CloneType(properties[key]);
  return requiredKeys.length > 0 ? { ...options, ...clonedAdditionalProperties, [Kind]: "Object", type: "object", properties: clonedProperties, required: requiredKeys } : { ...options, ...clonedAdditionalProperties, [Kind]: "Object", type: "object", properties: clonedProperties };
}
var Object2 = _Object;
// node_modules/@sinclair/typebox/build/esm/type/promise/promise.mjs
function Promise2(item, options = {}) {
  return {
    ...options,
    [Kind]: "Promise",
    type: "Promise",
    item: CloneType(item)
  };
}
// node_modules/@sinclair/typebox/build/esm/type/readonly/readonly.mjs
function RemoveReadonly(schema) {
  return Discard(CloneType(schema), [ReadonlyKind]);
}
function AddReadonly(schema) {
  return { ...CloneType(schema), [ReadonlyKind]: "Readonly" };
}
function ReadonlyWithFlag(schema, F) {
  return F === false ? RemoveReadonly(schema) : AddReadonly(schema);
}
function Readonly(schema, enable) {
  const F = enable ?? true;
  return IsMappedResult(schema) ? ReadonlyFromMappedResult(schema, F) : ReadonlyWithFlag(schema, F);
}

// node_modules/@sinclair/typebox/build/esm/type/readonly/readonly-from-mapped-result.mjs
function FromProperties3(K, F) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(K))
    Acc[K2] = Readonly(K[K2], F);
  return Acc;
}
function FromMappedResult3(R, F) {
  return FromProperties3(R.properties, F);
}
function ReadonlyFromMappedResult(R, F) {
  const P = FromMappedResult3(R, F);
  return MappedResult(P);
}
// node_modules/@sinclair/typebox/build/esm/type/tuple/tuple.mjs
function Tuple(items, options = {}) {
  const [additionalItems, minItems, maxItems] = [false, items.length, items.length];
  return items.length > 0 ? { ...options, [Kind]: "Tuple", type: "array", items: CloneRest(items), additionalItems, minItems, maxItems } : { ...options, [Kind]: "Tuple", type: "array", minItems, maxItems };
}
// node_modules/@sinclair/typebox/build/esm/type/sets/set.mjs
function SetIncludes(T, S) {
  return T.includes(S);
}
function SetDistinct(T) {
  return [...new Set(T)];
}
function SetIntersect(T, S) {
  return T.filter((L) => S.includes(L));
}
function SetIntersectManyResolve(T, Init) {
  return T.reduce((Acc, L) => {
    return SetIntersect(Acc, L);
  }, Init);
}
function SetIntersectMany(T) {
  return T.length === 1 ? T[0] : T.length > 1 ? SetIntersectManyResolve(T.slice(1), T[0]) : [];
}
function SetUnionMany(T) {
  const Acc = [];
  for (const L of T)
    Acc.push(...L);
  return Acc;
}
// node_modules/@sinclair/typebox/build/esm/type/mapped/mapped.mjs
function FromMappedResult4(K, P) {
  return K in P ? FromSchemaType(K, P[K]) : MappedResult(P);
}
function MappedKeyToKnownMappedResultProperties(K) {
  return { [K]: Literal(K) };
}
function MappedKeyToUnknownMappedResultProperties(P) {
  const Acc = {};
  for (const L of P)
    Acc[L] = Literal(L);
  return Acc;
}
function MappedKeyToMappedResultProperties(K, P) {
  return SetIncludes(P, K) ? MappedKeyToKnownMappedResultProperties(K) : MappedKeyToUnknownMappedResultProperties(P);
}
function FromMappedKey(K, P) {
  const R = MappedKeyToMappedResultProperties(K, P);
  return FromMappedResult4(K, R);
}
function FromRest2(K, T) {
  return T.map((L) => FromSchemaType(K, L));
}
function FromProperties4(K, T) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(T))
    Acc[K2] = FromSchemaType(K, T[K2]);
  return Acc;
}
function FromSchemaType(K, T) {
  return IsOptional(T) ? Optional(FromSchemaType(K, Discard(T, [OptionalKind]))) : IsReadonly(T) ? Readonly(FromSchemaType(K, Discard(T, [ReadonlyKind]))) : IsMappedResult(T) ? FromMappedResult4(K, T.properties) : IsMappedKey(T) ? FromMappedKey(K, T.keys) : IsConstructor(T) ? Constructor(FromRest2(K, T.parameters), FromSchemaType(K, T.returns)) : IsFunction3(T) ? Function2(FromRest2(K, T.parameters), FromSchemaType(K, T.returns)) : IsAsyncIterator3(T) ? AsyncIterator(FromSchemaType(K, T.items)) : IsIterator3(T) ? Iterator(FromSchemaType(K, T.items)) : IsIntersect(T) ? Intersect(FromRest2(K, T.allOf)) : IsUnion(T) ? Union(FromRest2(K, T.anyOf)) : IsTuple(T) ? Tuple(FromRest2(K, T.items ?? [])) : IsObject3(T) ? Object2(FromProperties4(K, T.properties)) : IsArray3(T) ? Array2(FromSchemaType(K, T.items)) : IsPromise2(T) ? Promise2(FromSchemaType(K, T.item)) : T;
}
function MappedFunctionReturnType(K, T) {
  const Acc = {};
  for (const L of K)
    Acc[L] = FromSchemaType(L, T);
  return Acc;
}
function Mapped(key, map3, options = {}) {
  const K = IsSchema(key) ? IndexPropertyKeys(key) : key;
  const RT = map3({ [Kind]: "MappedKey", keys: K });
  const R = MappedFunctionReturnType(K, RT);
  return CloneType(Object2(R), options);
}
// node_modules/@sinclair/typebox/build/esm/type/keyof/keyof-property-keys.mjs
function FromRest3(T) {
  const Acc = [];
  for (const L of T)
    Acc.push(KeyOfPropertyKeys(L));
  return Acc;
}
function FromIntersect2(T) {
  const C = FromRest3(T);
  const R = SetUnionMany(C);
  return R;
}
function FromUnion4(T) {
  const C = FromRest3(T);
  const R = SetIntersectMany(C);
  return R;
}
function FromTuple2(T) {
  return T.map((_, I) => I.toString());
}
function FromArray2(_) {
  return ["[number]"];
}
function FromProperties5(T) {
  return globalThis.Object.getOwnPropertyNames(T);
}
function FromPatternProperties(patternProperties) {
  if (!includePatternProperties)
    return [];
  const patternPropertyKeys = globalThis.Object.getOwnPropertyNames(patternProperties);
  return patternPropertyKeys.map((key) => {
    return key[0] === "^" && key[key.length - 1] === "$" ? key.slice(1, key.length - 1) : key;
  });
}
function KeyOfPropertyKeys(T) {
  return IsIntersect(T) ? FromIntersect2(T.allOf) : IsUnion(T) ? FromUnion4(T.anyOf) : IsTuple(T) ? FromTuple2(T.items ?? []) : IsArray3(T) ? FromArray2(T.items) : IsObject3(T) ? FromProperties5(T.properties) : IsRecord(T) ? FromPatternProperties(T.patternProperties) : [];
}
function KeyOfPattern(schema) {
  includePatternProperties = true;
  const keys = KeyOfPropertyKeys(schema);
  includePatternProperties = false;
  const pattern3 = keys.map((key) => `(${key})`);
  return `^(${pattern3.join("|")})\$`;
}
var includePatternProperties = false;

// node_modules/@sinclair/typebox/build/esm/type/keyof/keyof.mjs
function KeyOfPropertyKeysToRest(T) {
  return T.map((L) => L === "[number]" ? Number2() : Literal(L));
}
function KeyOf(T, options = {}) {
  if (IsMappedResult(T)) {
    return KeyOfFromMappedResult(T, options);
  } else {
    const K = KeyOfPropertyKeys(T);
    const S = KeyOfPropertyKeysToRest(K);
    const U = UnionEvaluated(S);
    return CloneType(U, options);
  }
}

// node_modules/@sinclair/typebox/build/esm/type/keyof/keyof-from-mapped-result.mjs
function FromProperties6(K, options) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(K))
    Acc[K2] = KeyOf(K[K2], options);
  return Acc;
}
function FromMappedResult5(R, options) {
  return FromProperties6(R.properties, options);
}
function KeyOfFromMappedResult(R, options) {
  const P = FromMappedResult5(R, options);
  return MappedResult(P);
}
// node_modules/@sinclair/typebox/build/esm/type/keyof/keyof-property-entries.mjs
function KeyOfPropertyEntries(schema) {
  const keys = KeyOfPropertyKeys(schema);
  const schemas = IndexFromPropertyKeys(schema, keys);
  return keys.map((_, index) => [keys[index], schemas[index]]);
}
// node_modules/@sinclair/typebox/build/esm/type/extends/extends-undefined.mjs
function Intersect2(schema) {
  return schema.allOf.every((schema2) => ExtendsUndefinedCheck(schema2));
}
function Union2(schema) {
  return schema.anyOf.some((schema2) => ExtendsUndefinedCheck(schema2));
}
function Not(schema) {
  return !ExtendsUndefinedCheck(schema.not);
}
function ExtendsUndefinedCheck(schema) {
  return schema[Kind] === "Intersect" ? Intersect2(schema) : schema[Kind] === "Union" ? Union2(schema) : schema[Kind] === "Not" ? Not(schema) : schema[Kind] === "Undefined" ? true : false;
}

// node_modules/@sinclair/typebox/build/esm/errors/function.mjs
function DefaultErrorFunction(error7) {
  switch (error7.errorType) {
    case ValueErrorType.ArrayContains:
      return "Expected array to contain at least one matching value";
    case ValueErrorType.ArrayMaxContains:
      return `Expected array to contain no more than ${error7.schema.maxContains} matching values`;
    case ValueErrorType.ArrayMinContains:
      return `Expected array to contain at least ${error7.schema.minContains} matching values`;
    case ValueErrorType.ArrayMaxItems:
      return `Expected array length to be less or equal to ${error7.schema.maxItems}`;
    case ValueErrorType.ArrayMinItems:
      return `Expected array length to be greater or equal to ${error7.schema.minItems}`;
    case ValueErrorType.ArrayUniqueItems:
      return "Expected array elements to be unique";
    case ValueErrorType.Array:
      return "Expected array";
    case ValueErrorType.AsyncIterator:
      return "Expected AsyncIterator";
    case ValueErrorType.BigIntExclusiveMaximum:
      return `Expected bigint to be less than ${error7.schema.exclusiveMaximum}`;
    case ValueErrorType.BigIntExclusiveMinimum:
      return `Expected bigint to be greater than ${error7.schema.exclusiveMinimum}`;
    case ValueErrorType.BigIntMaximum:
      return `Expected bigint to be less or equal to ${error7.schema.maximum}`;
    case ValueErrorType.BigIntMinimum:
      return `Expected bigint to be greater or equal to ${error7.schema.minimum}`;
    case ValueErrorType.BigIntMultipleOf:
      return `Expected bigint to be a multiple of ${error7.schema.multipleOf}`;
    case ValueErrorType.BigInt:
      return "Expected bigint";
    case ValueErrorType.Boolean:
      return "Expected boolean";
    case ValueErrorType.DateExclusiveMinimumTimestamp:
      return `Expected Date timestamp to be greater than ${error7.schema.exclusiveMinimumTimestamp}`;
    case ValueErrorType.DateExclusiveMaximumTimestamp:
      return `Expected Date timestamp to be less than ${error7.schema.exclusiveMaximumTimestamp}`;
    case ValueErrorType.DateMinimumTimestamp:
      return `Expected Date timestamp to be greater or equal to ${error7.schema.minimumTimestamp}`;
    case ValueErrorType.DateMaximumTimestamp:
      return `Expected Date timestamp to be less or equal to ${error7.schema.maximumTimestamp}`;
    case ValueErrorType.DateMultipleOfTimestamp:
      return `Expected Date timestamp to be a multiple of ${error7.schema.multipleOfTimestamp}`;
    case ValueErrorType.Date:
      return "Expected Date";
    case ValueErrorType.Function:
      return "Expected function";
    case ValueErrorType.IntegerExclusiveMaximum:
      return `Expected integer to be less than ${error7.schema.exclusiveMaximum}`;
    case ValueErrorType.IntegerExclusiveMinimum:
      return `Expected integer to be greater than ${error7.schema.exclusiveMinimum}`;
    case ValueErrorType.IntegerMaximum:
      return `Expected integer to be less or equal to ${error7.schema.maximum}`;
    case ValueErrorType.IntegerMinimum:
      return `Expected integer to be greater or equal to ${error7.schema.minimum}`;
    case ValueErrorType.IntegerMultipleOf:
      return `Expected integer to be a multiple of ${error7.schema.multipleOf}`;
    case ValueErrorType.Integer:
      return "Expected integer";
    case ValueErrorType.IntersectUnevaluatedProperties:
      return "Unexpected property";
    case ValueErrorType.Intersect:
      return "Expected all values to match";
    case ValueErrorType.Iterator:
      return "Expected Iterator";
    case ValueErrorType.Literal:
      return `Expected ${typeof error7.schema.const === "string" ? `'${error7.schema.const}'` : error7.schema.const}`;
    case ValueErrorType.Never:
      return "Never";
    case ValueErrorType.Not:
      return "Value should not match";
    case ValueErrorType.Null:
      return "Expected null";
    case ValueErrorType.NumberExclusiveMaximum:
      return `Expected number to be less than ${error7.schema.exclusiveMaximum}`;
    case ValueErrorType.NumberExclusiveMinimum:
      return `Expected number to be greater than ${error7.schema.exclusiveMinimum}`;
    case ValueErrorType.NumberMaximum:
      return `Expected number to be less or equal to ${error7.schema.maximum}`;
    case ValueErrorType.NumberMinimum:
      return `Expected number to be greater or equal to ${error7.schema.minimum}`;
    case ValueErrorType.NumberMultipleOf:
      return `Expected number to be a multiple of ${error7.schema.multipleOf}`;
    case ValueErrorType.Number:
      return "Expected number";
    case ValueErrorType.Object:
      return "Expected object";
    case ValueErrorType.ObjectAdditionalProperties:
      return "Unexpected property";
    case ValueErrorType.ObjectMaxProperties:
      return `Expected object to have no more than ${error7.schema.maxProperties} properties`;
    case ValueErrorType.ObjectMinProperties:
      return `Expected object to have at least ${error7.schema.minProperties} properties`;
    case ValueErrorType.ObjectRequiredProperty:
      return "Required property";
    case ValueErrorType.Promise:
      return "Expected Promise";
    case ValueErrorType.RegExp:
      return "Expected string to match regular expression";
    case ValueErrorType.StringFormatUnknown:
      return `Unknown format '${error7.schema.format}'`;
    case ValueErrorType.StringFormat:
      return `Expected string to match '${error7.schema.format}' format`;
    case ValueErrorType.StringMaxLength:
      return `Expected string length less or equal to ${error7.schema.maxLength}`;
    case ValueErrorType.StringMinLength:
      return `Expected string length greater or equal to ${error7.schema.minLength}`;
    case ValueErrorType.StringPattern:
      return `Expected string to match '${error7.schema.pattern}'`;
    case ValueErrorType.String:
      return "Expected string";
    case ValueErrorType.Symbol:
      return "Expected symbol";
    case ValueErrorType.TupleLength:
      return `Expected tuple to have ${error7.schema.maxItems || 0} elements`;
    case ValueErrorType.Tuple:
      return "Expected tuple";
    case ValueErrorType.Uint8ArrayMaxByteLength:
      return `Expected byte length less or equal to ${error7.schema.maxByteLength}`;
    case ValueErrorType.Uint8ArrayMinByteLength:
      return `Expected byte length greater or equal to ${error7.schema.minByteLength}`;
    case ValueErrorType.Uint8Array:
      return "Expected Uint8Array";
    case ValueErrorType.Undefined:
      return "Expected undefined";
    case ValueErrorType.Union:
      return "Expected union value";
    case ValueErrorType.Void:
      return "Expected void";
    case ValueErrorType.Kind:
      return `Expected kind '${error7.schema[Kind]}'`;
    default:
      return "Unknown error type";
  }
}
function GetErrorFunction() {
  return errorFunction;
}
var errorFunction = DefaultErrorFunction;

// node_modules/@sinclair/typebox/build/esm/value/deref/deref.mjs
function Resolve(schema, references) {
  const target = references.find((target2) => target2.$id === schema.$ref);
  if (target === undefined)
    throw new TypeDereferenceError(schema);
  return Deref(target, references);
}
function Deref(schema, references) {
  return schema[Kind] === "This" || schema[Kind] === "Ref" ? Resolve(schema, references) : schema;
}

class TypeDereferenceError extends TypeBoxError {
  constructor(schema) {
    super(`Unable to dereference schema with \$id '${schema.$id}'`);
    this.schema = schema;
  }
}
// node_modules/@sinclair/typebox/build/esm/value/hash/hash.mjs
function* NumberToBytes(value3) {
  const byteCount = value3 === 0 ? 1 : Math.ceil(Math.floor(Math.log2(value3) + 1) / 8);
  for (let i = 0;i < byteCount; i++) {
    yield value3 >> 8 * (byteCount - 1 - i) & 255;
  }
}
function ArrayType2(value3) {
  FNV1A64(ByteMarker.Array);
  for (const item of value3) {
    Visit3(item);
  }
}
function BooleanType(value3) {
  FNV1A64(ByteMarker.Boolean);
  FNV1A64(value3 ? 1 : 0);
}
function BigIntType(value3) {
  FNV1A64(ByteMarker.BigInt);
  F64In.setBigInt64(0, value3);
  for (const byte of F64Out) {
    FNV1A64(byte);
  }
}
function DateType2(value3) {
  FNV1A64(ByteMarker.Date);
  Visit3(value3.getTime());
}
function NullType(value3) {
  FNV1A64(ByteMarker.Null);
}
function NumberType(value3) {
  FNV1A64(ByteMarker.Number);
  F64In.setFloat64(0, value3);
  for (const byte of F64Out) {
    FNV1A64(byte);
  }
}
function ObjectType2(value3) {
  FNV1A64(ByteMarker.Object);
  for (const key of globalThis.Object.getOwnPropertyNames(value3).sort()) {
    Visit3(key);
    Visit3(value3[key]);
  }
}
function StringType(value3) {
  FNV1A64(ByteMarker.String);
  for (let i = 0;i < value3.length; i++) {
    for (const byte of NumberToBytes(value3.charCodeAt(i))) {
      FNV1A64(byte);
    }
  }
}
function SymbolType(value3) {
  FNV1A64(ByteMarker.Symbol);
  Visit3(value3.description);
}
function Uint8ArrayType2(value3) {
  FNV1A64(ByteMarker.Uint8Array);
  for (let i = 0;i < value3.length; i++) {
    FNV1A64(value3[i]);
  }
}
function UndefinedType(value3) {
  return FNV1A64(ByteMarker.Undefined);
}
function Visit3(value3) {
  if (IsArray(value3))
    return ArrayType2(value3);
  if (IsBoolean(value3))
    return BooleanType(value3);
  if (IsBigInt(value3))
    return BigIntType(value3);
  if (IsDate(value3))
    return DateType2(value3);
  if (IsNull(value3))
    return NullType(value3);
  if (IsNumber(value3))
    return NumberType(value3);
  if (IsStandardObject(value3))
    return ObjectType2(value3);
  if (IsString(value3))
    return StringType(value3);
  if (IsSymbol(value3))
    return SymbolType(value3);
  if (IsUint8Array(value3))
    return Uint8ArrayType2(value3);
  if (IsUndefined(value3))
    return UndefinedType(value3);
  throw new ValueHashError(value3);
}
function FNV1A64(byte) {
  Accumulator = Accumulator ^ Bytes[byte];
  Accumulator = Accumulator * Prime % Size;
}
function Hash(value3) {
  Accumulator = BigInt("14695981039346656037");
  Visit3(value3);
  return Accumulator;
}

class ValueHashError extends TypeBoxError {
  constructor(value3) {
    super(`Unable to hash value`);
    this.value = value3;
  }
}
var ByteMarker;
(function(ByteMarker2) {
  ByteMarker2[ByteMarker2["Undefined"] = 0] = "Undefined";
  ByteMarker2[ByteMarker2["Null"] = 1] = "Null";
  ByteMarker2[ByteMarker2["Boolean"] = 2] = "Boolean";
  ByteMarker2[ByteMarker2["Number"] = 3] = "Number";
  ByteMarker2[ByteMarker2["String"] = 4] = "String";
  ByteMarker2[ByteMarker2["Object"] = 5] = "Object";
  ByteMarker2[ByteMarker2["Array"] = 6] = "Array";
  ByteMarker2[ByteMarker2["Date"] = 7] = "Date";
  ByteMarker2[ByteMarker2["Uint8Array"] = 8] = "Uint8Array";
  ByteMarker2[ByteMarker2["Symbol"] = 9] = "Symbol";
  ByteMarker2[ByteMarker2["BigInt"] = 10] = "BigInt";
})(ByteMarker || (ByteMarker = {}));
var Accumulator = BigInt("14695981039346656037");
var [Prime, Size] = [BigInt("1099511628211"), BigInt("2") ** BigInt("64")];
var Bytes = Array.from({ length: 256 }).map((_, i) => BigInt(i));
var F64 = new Float64Array(1);
var F64In = new DataView(F64.buffer);
var F64Out = new Uint8Array(F64.buffer);
// node_modules/@sinclair/typebox/build/esm/errors/errors.mjs
function EscapeKey(key) {
  return key.replace(/~/g, "~0").replace(/\//g, "~1");
}
function IsDefined(value3) {
  return value3 !== undefined;
}
function Create(errorType, schema, path, value3) {
  return { type: errorType, schema, path, value: value3, message: GetErrorFunction()({ errorType, path, schema, value: value3 }) };
}
function* FromAny(schema, references, path, value3) {
}
function* FromArray3(schema, references, path, value3) {
  if (!IsArray(value3)) {
    return yield Create(ValueErrorType.Array, schema, path, value3);
  }
  if (IsDefined(schema.minItems) && !(value3.length >= schema.minItems)) {
    yield Create(ValueErrorType.ArrayMinItems, schema, path, value3);
  }
  if (IsDefined(schema.maxItems) && !(value3.length <= schema.maxItems)) {
    yield Create(ValueErrorType.ArrayMaxItems, schema, path, value3);
  }
  for (let i = 0;i < value3.length; i++) {
    yield* Visit4(schema.items, references, `${path}/${i}`, value3[i]);
  }
  if (schema.uniqueItems === true && !function() {
    const set2 = new Set;
    for (const element of value3) {
      const hashed = Hash(element);
      if (set2.has(hashed)) {
        return false;
      } else {
        set2.add(hashed);
      }
    }
    return true;
  }()) {
    yield Create(ValueErrorType.ArrayUniqueItems, schema, path, value3);
  }
  if (!(IsDefined(schema.contains) || IsDefined(schema.minContains) || IsDefined(schema.maxContains))) {
    return;
  }
  const containsSchema = IsDefined(schema.contains) ? schema.contains : Never();
  const containsCount = value3.reduce((acc, value4, index) => Visit4(containsSchema, references, `${path}${index}`, value4).next().done === true ? acc + 1 : acc, 0);
  if (containsCount === 0) {
    yield Create(ValueErrorType.ArrayContains, schema, path, value3);
  }
  if (IsNumber(schema.minContains) && containsCount < schema.minContains) {
    yield Create(ValueErrorType.ArrayMinContains, schema, path, value3);
  }
  if (IsNumber(schema.maxContains) && containsCount > schema.maxContains) {
    yield Create(ValueErrorType.ArrayMaxContains, schema, path, value3);
  }
}
function* FromAsyncIterator(schema, references, path, value3) {
  if (!IsAsyncIterator(value3))
    yield Create(ValueErrorType.AsyncIterator, schema, path, value3);
}
function* FromBigInt(schema, references, path, value3) {
  if (!IsBigInt(value3))
    return yield Create(ValueErrorType.BigInt, schema, path, value3);
  if (IsDefined(schema.exclusiveMaximum) && !(value3 < schema.exclusiveMaximum)) {
    yield Create(ValueErrorType.BigIntExclusiveMaximum, schema, path, value3);
  }
  if (IsDefined(schema.exclusiveMinimum) && !(value3 > schema.exclusiveMinimum)) {
    yield Create(ValueErrorType.BigIntExclusiveMinimum, schema, path, value3);
  }
  if (IsDefined(schema.maximum) && !(value3 <= schema.maximum)) {
    yield Create(ValueErrorType.BigIntMaximum, schema, path, value3);
  }
  if (IsDefined(schema.minimum) && !(value3 >= schema.minimum)) {
    yield Create(ValueErrorType.BigIntMinimum, schema, path, value3);
  }
  if (IsDefined(schema.multipleOf) && !(value3 % schema.multipleOf === BigInt(0))) {
    yield Create(ValueErrorType.BigIntMultipleOf, schema, path, value3);
  }
}
function* FromBoolean(schema, references, path, value3) {
  if (!IsBoolean(value3))
    yield Create(ValueErrorType.Boolean, schema, path, value3);
}
function* FromConstructor(schema, references, path, value3) {
  yield* Visit4(schema.returns, references, path, value3.prototype);
}
function* FromDate(schema, references, path, value3) {
  if (!IsDate(value3))
    return yield Create(ValueErrorType.Date, schema, path, value3);
  if (IsDefined(schema.exclusiveMaximumTimestamp) && !(value3.getTime() < schema.exclusiveMaximumTimestamp)) {
    yield Create(ValueErrorType.DateExclusiveMaximumTimestamp, schema, path, value3);
  }
  if (IsDefined(schema.exclusiveMinimumTimestamp) && !(value3.getTime() > schema.exclusiveMinimumTimestamp)) {
    yield Create(ValueErrorType.DateExclusiveMinimumTimestamp, schema, path, value3);
  }
  if (IsDefined(schema.maximumTimestamp) && !(value3.getTime() <= schema.maximumTimestamp)) {
    yield Create(ValueErrorType.DateMaximumTimestamp, schema, path, value3);
  }
  if (IsDefined(schema.minimumTimestamp) && !(value3.getTime() >= schema.minimumTimestamp)) {
    yield Create(ValueErrorType.DateMinimumTimestamp, schema, path, value3);
  }
  if (IsDefined(schema.multipleOfTimestamp) && !(value3.getTime() % schema.multipleOfTimestamp === 0)) {
    yield Create(ValueErrorType.DateMultipleOfTimestamp, schema, path, value3);
  }
}
function* FromFunction(schema, references, path, value3) {
  if (!IsFunction(value3))
    yield Create(ValueErrorType.Function, schema, path, value3);
}
function* FromInteger(schema, references, path, value3) {
  if (!IsInteger(value3))
    return yield Create(ValueErrorType.Integer, schema, path, value3);
  if (IsDefined(schema.exclusiveMaximum) && !(value3 < schema.exclusiveMaximum)) {
    yield Create(ValueErrorType.IntegerExclusiveMaximum, schema, path, value3);
  }
  if (IsDefined(schema.exclusiveMinimum) && !(value3 > schema.exclusiveMinimum)) {
    yield Create(ValueErrorType.IntegerExclusiveMinimum, schema, path, value3);
  }
  if (IsDefined(schema.maximum) && !(value3 <= schema.maximum)) {
    yield Create(ValueErrorType.IntegerMaximum, schema, path, value3);
  }
  if (IsDefined(schema.minimum) && !(value3 >= schema.minimum)) {
    yield Create(ValueErrorType.IntegerMinimum, schema, path, value3);
  }
  if (IsDefined(schema.multipleOf) && !(value3 % schema.multipleOf === 0)) {
    yield Create(ValueErrorType.IntegerMultipleOf, schema, path, value3);
  }
}
function* FromIntersect3(schema, references, path, value3) {
  for (const inner of schema.allOf) {
    const next = Visit4(inner, references, path, value3).next();
    if (!next.done) {
      yield Create(ValueErrorType.Intersect, schema, path, value3);
      yield next.value;
    }
  }
  if (schema.unevaluatedProperties === false) {
    const keyCheck = new RegExp(KeyOfPattern(schema));
    for (const valueKey of Object.getOwnPropertyNames(value3)) {
      if (!keyCheck.test(valueKey)) {
        yield Create(ValueErrorType.IntersectUnevaluatedProperties, schema, `${path}/${valueKey}`, value3);
      }
    }
  }
  if (typeof schema.unevaluatedProperties === "object") {
    const keyCheck = new RegExp(KeyOfPattern(schema));
    for (const valueKey of Object.getOwnPropertyNames(value3)) {
      if (!keyCheck.test(valueKey)) {
        const next = Visit4(schema.unevaluatedProperties, references, `${path}/${valueKey}`, value3[valueKey]).next();
        if (!next.done)
          yield next.value;
      }
    }
  }
}
function* FromIterator(schema, references, path, value3) {
  if (!IsIterator(value3))
    yield Create(ValueErrorType.Iterator, schema, path, value3);
}
function* FromLiteral2(schema, references, path, value3) {
  if (!(value3 === schema.const))
    yield Create(ValueErrorType.Literal, schema, path, value3);
}
function* FromNever(schema, references, path, value3) {
  yield Create(ValueErrorType.Never, schema, path, value3);
}
function* FromNot(schema, references, path, value3) {
  if (Visit4(schema.not, references, path, value3).next().done === true)
    yield Create(ValueErrorType.Not, schema, path, value3);
}
function* FromNull(schema, references, path, value3) {
  if (!IsNull(value3))
    yield Create(ValueErrorType.Null, schema, path, value3);
}
function* FromNumber(schema, references, path, value3) {
  if (!TypeSystemPolicy.IsNumberLike(value3))
    return yield Create(ValueErrorType.Number, schema, path, value3);
  if (IsDefined(schema.exclusiveMaximum) && !(value3 < schema.exclusiveMaximum)) {
    yield Create(ValueErrorType.NumberExclusiveMaximum, schema, path, value3);
  }
  if (IsDefined(schema.exclusiveMinimum) && !(value3 > schema.exclusiveMinimum)) {
    yield Create(ValueErrorType.NumberExclusiveMinimum, schema, path, value3);
  }
  if (IsDefined(schema.maximum) && !(value3 <= schema.maximum)) {
    yield Create(ValueErrorType.NumberMaximum, schema, path, value3);
  }
  if (IsDefined(schema.minimum) && !(value3 >= schema.minimum)) {
    yield Create(ValueErrorType.NumberMinimum, schema, path, value3);
  }
  if (IsDefined(schema.multipleOf) && !(value3 % schema.multipleOf === 0)) {
    yield Create(ValueErrorType.NumberMultipleOf, schema, path, value3);
  }
}
function* FromObject(schema, references, path, value3) {
  if (!TypeSystemPolicy.IsObjectLike(value3))
    return yield Create(ValueErrorType.Object, schema, path, value3);
  if (IsDefined(schema.minProperties) && !(Object.getOwnPropertyNames(value3).length >= schema.minProperties)) {
    yield Create(ValueErrorType.ObjectMinProperties, schema, path, value3);
  }
  if (IsDefined(schema.maxProperties) && !(Object.getOwnPropertyNames(value3).length <= schema.maxProperties)) {
    yield Create(ValueErrorType.ObjectMaxProperties, schema, path, value3);
  }
  const requiredKeys = Array.isArray(schema.required) ? schema.required : [];
  const knownKeys = Object.getOwnPropertyNames(schema.properties);
  const unknownKeys = Object.getOwnPropertyNames(value3);
  for (const requiredKey of requiredKeys) {
    if (unknownKeys.includes(requiredKey))
      continue;
    yield Create(ValueErrorType.ObjectRequiredProperty, schema.properties[requiredKey], `${path}/${EscapeKey(requiredKey)}`, undefined);
  }
  if (schema.additionalProperties === false) {
    for (const valueKey of unknownKeys) {
      if (!knownKeys.includes(valueKey)) {
        yield Create(ValueErrorType.ObjectAdditionalProperties, schema, `${path}/${EscapeKey(valueKey)}`, value3[valueKey]);
      }
    }
  }
  if (typeof schema.additionalProperties === "object") {
    for (const valueKey of unknownKeys) {
      if (knownKeys.includes(valueKey))
        continue;
      yield* Visit4(schema.additionalProperties, references, `${path}/${EscapeKey(valueKey)}`, value3[valueKey]);
    }
  }
  for (const knownKey of knownKeys) {
    const property = schema.properties[knownKey];
    if (schema.required && schema.required.includes(knownKey)) {
      yield* Visit4(property, references, `${path}/${EscapeKey(knownKey)}`, value3[knownKey]);
      if (ExtendsUndefinedCheck(schema) && !(knownKey in value3)) {
        yield Create(ValueErrorType.ObjectRequiredProperty, property, `${path}/${EscapeKey(knownKey)}`, undefined);
      }
    } else {
      if (TypeSystemPolicy.IsExactOptionalProperty(value3, knownKey)) {
        yield* Visit4(property, references, `${path}/${EscapeKey(knownKey)}`, value3[knownKey]);
      }
    }
  }
}
function* FromPromise(schema, references, path, value3) {
  if (!IsPromise(value3))
    yield Create(ValueErrorType.Promise, schema, path, value3);
}
function* FromRecord(schema, references, path, value3) {
  if (!TypeSystemPolicy.IsRecordLike(value3))
    return yield Create(ValueErrorType.Object, schema, path, value3);
  if (IsDefined(schema.minProperties) && !(Object.getOwnPropertyNames(value3).length >= schema.minProperties)) {
    yield Create(ValueErrorType.ObjectMinProperties, schema, path, value3);
  }
  if (IsDefined(schema.maxProperties) && !(Object.getOwnPropertyNames(value3).length <= schema.maxProperties)) {
    yield Create(ValueErrorType.ObjectMaxProperties, schema, path, value3);
  }
  const [patternKey, patternSchema] = Object.entries(schema.patternProperties)[0];
  const regex = new RegExp(patternKey);
  for (const [propertyKey, propertyValue] of Object.entries(value3)) {
    if (regex.test(propertyKey))
      yield* Visit4(patternSchema, references, `${path}/${EscapeKey(propertyKey)}`, propertyValue);
  }
  if (typeof schema.additionalProperties === "object") {
    for (const [propertyKey, propertyValue] of Object.entries(value3)) {
      if (!regex.test(propertyKey))
        yield* Visit4(schema.additionalProperties, references, `${path}/${EscapeKey(propertyKey)}`, propertyValue);
    }
  }
  if (schema.additionalProperties === false) {
    for (const [propertyKey, propertyValue] of Object.entries(value3)) {
      if (regex.test(propertyKey))
        continue;
      return yield Create(ValueErrorType.ObjectAdditionalProperties, schema, `${path}/${EscapeKey(propertyKey)}`, propertyValue);
    }
  }
}
function* FromRef(schema, references, path, value3) {
  yield* Visit4(Deref(schema, references), references, path, value3);
}
function* FromRegExp(schema, references, path, value3) {
  if (!IsString(value3))
    return yield Create(ValueErrorType.String, schema, path, value3);
  if (IsDefined(schema.minLength) && !(value3.length >= schema.minLength)) {
    yield Create(ValueErrorType.StringMinLength, schema, path, value3);
  }
  if (IsDefined(schema.maxLength) && !(value3.length <= schema.maxLength)) {
    yield Create(ValueErrorType.StringMaxLength, schema, path, value3);
  }
  const regex = new RegExp(schema.source, schema.flags);
  if (!regex.test(value3)) {
    return yield Create(ValueErrorType.RegExp, schema, path, value3);
  }
}
function* FromString(schema, references, path, value3) {
  if (!IsString(value3))
    return yield Create(ValueErrorType.String, schema, path, value3);
  if (IsDefined(schema.minLength) && !(value3.length >= schema.minLength)) {
    yield Create(ValueErrorType.StringMinLength, schema, path, value3);
  }
  if (IsDefined(schema.maxLength) && !(value3.length <= schema.maxLength)) {
    yield Create(ValueErrorType.StringMaxLength, schema, path, value3);
  }
  if (IsString(schema.pattern)) {
    const regex = new RegExp(schema.pattern);
    if (!regex.test(value3)) {
      yield Create(ValueErrorType.StringPattern, schema, path, value3);
    }
  }
  if (IsString(schema.format)) {
    if (!exports_format.Has(schema.format)) {
      yield Create(ValueErrorType.StringFormatUnknown, schema, path, value3);
    } else {
      const format = exports_format.Get(schema.format);
      if (!format(value3)) {
        yield Create(ValueErrorType.StringFormat, schema, path, value3);
      }
    }
  }
}
function* FromSymbol(schema, references, path, value3) {
  if (!IsSymbol(value3))
    yield Create(ValueErrorType.Symbol, schema, path, value3);
}
function* FromTemplateLiteral2(schema, references, path, value3) {
  if (!IsString(value3))
    return yield Create(ValueErrorType.String, schema, path, value3);
  const regex = new RegExp(schema.pattern);
  if (!regex.test(value3)) {
    yield Create(ValueErrorType.StringPattern, schema, path, value3);
  }
}
function* FromThis(schema, references, path, value3) {
  yield* Visit4(Deref(schema, references), references, path, value3);
}
function* FromTuple3(schema, references, path, value3) {
  if (!IsArray(value3))
    return yield Create(ValueErrorType.Tuple, schema, path, value3);
  if (schema.items === undefined && !(value3.length === 0)) {
    return yield Create(ValueErrorType.TupleLength, schema, path, value3);
  }
  if (!(value3.length === schema.maxItems)) {
    return yield Create(ValueErrorType.TupleLength, schema, path, value3);
  }
  if (!schema.items) {
    return;
  }
  for (let i = 0;i < schema.items.length; i++) {
    yield* Visit4(schema.items[i], references, `${path}/${i}`, value3[i]);
  }
}
function* FromUndefined(schema, references, path, value3) {
  if (!IsUndefined(value3))
    yield Create(ValueErrorType.Undefined, schema, path, value3);
}
function* FromUnion5(schema, references, path, value3) {
  let count = 0;
  for (const subschema of schema.anyOf) {
    const errors2 = [...Visit4(subschema, references, path, value3)];
    if (errors2.length === 0)
      return;
    count += errors2.length;
  }
  if (count > 0) {
    yield Create(ValueErrorType.Union, schema, path, value3);
  }
}
function* FromUint8Array(schema, references, path, value3) {
  if (!IsUint8Array(value3))
    return yield Create(ValueErrorType.Uint8Array, schema, path, value3);
  if (IsDefined(schema.maxByteLength) && !(value3.length <= schema.maxByteLength)) {
    yield Create(ValueErrorType.Uint8ArrayMaxByteLength, schema, path, value3);
  }
  if (IsDefined(schema.minByteLength) && !(value3.length >= schema.minByteLength)) {
    yield Create(ValueErrorType.Uint8ArrayMinByteLength, schema, path, value3);
  }
}
function* FromUnknown(schema, references, path, value3) {
}
function* FromVoid(schema, references, path, value3) {
  if (!TypeSystemPolicy.IsVoidLike(value3))
    yield Create(ValueErrorType.Void, schema, path, value3);
}
function* FromKind(schema, references, path, value3) {
  const check = exports_type.Get(schema[Kind]);
  if (!check(schema, value3))
    yield Create(ValueErrorType.Kind, schema, path, value3);
}
function* Visit4(schema, references, path, value3) {
  const references_ = IsDefined(schema.$id) ? [...references, schema] : references;
  const schema_ = schema;
  switch (schema_[Kind]) {
    case "Any":
      return yield* FromAny(schema_, references_, path, value3);
    case "Array":
      return yield* FromArray3(schema_, references_, path, value3);
    case "AsyncIterator":
      return yield* FromAsyncIterator(schema_, references_, path, value3);
    case "BigInt":
      return yield* FromBigInt(schema_, references_, path, value3);
    case "Boolean":
      return yield* FromBoolean(schema_, references_, path, value3);
    case "Constructor":
      return yield* FromConstructor(schema_, references_, path, value3);
    case "Date":
      return yield* FromDate(schema_, references_, path, value3);
    case "Function":
      return yield* FromFunction(schema_, references_, path, value3);
    case "Integer":
      return yield* FromInteger(schema_, references_, path, value3);
    case "Intersect":
      return yield* FromIntersect3(schema_, references_, path, value3);
    case "Iterator":
      return yield* FromIterator(schema_, references_, path, value3);
    case "Literal":
      return yield* FromLiteral2(schema_, references_, path, value3);
    case "Never":
      return yield* FromNever(schema_, references_, path, value3);
    case "Not":
      return yield* FromNot(schema_, references_, path, value3);
    case "Null":
      return yield* FromNull(schema_, references_, path, value3);
    case "Number":
      return yield* FromNumber(schema_, references_, path, value3);
    case "Object":
      return yield* FromObject(schema_, references_, path, value3);
    case "Promise":
      return yield* FromPromise(schema_, references_, path, value3);
    case "Record":
      return yield* FromRecord(schema_, references_, path, value3);
    case "Ref":
      return yield* FromRef(schema_, references_, path, value3);
    case "RegExp":
      return yield* FromRegExp(schema_, references_, path, value3);
    case "String":
      return yield* FromString(schema_, references_, path, value3);
    case "Symbol":
      return yield* FromSymbol(schema_, references_, path, value3);
    case "TemplateLiteral":
      return yield* FromTemplateLiteral2(schema_, references_, path, value3);
    case "This":
      return yield* FromThis(schema_, references_, path, value3);
    case "Tuple":
      return yield* FromTuple3(schema_, references_, path, value3);
    case "Undefined":
      return yield* FromUndefined(schema_, references_, path, value3);
    case "Union":
      return yield* FromUnion5(schema_, references_, path, value3);
    case "Uint8Array":
      return yield* FromUint8Array(schema_, references_, path, value3);
    case "Unknown":
      return yield* FromUnknown(schema_, references_, path, value3);
    case "Void":
      return yield* FromVoid(schema_, references_, path, value3);
    default:
      if (!exports_type.Has(schema_[Kind]))
        throw new ValueErrorsUnknownTypeError(schema);
      return yield* FromKind(schema_, references_, path, value3);
  }
}
function Errors(...args) {
  const iterator3 = args.length === 3 ? Visit4(args[0], args[1], "", args[2]) : Visit4(args[0], [], "", args[1]);
  return new ValueErrorIterator(iterator3);
}
var ValueErrorType;
(function(ValueErrorType2) {
  ValueErrorType2[ValueErrorType2["ArrayContains"] = 0] = "ArrayContains";
  ValueErrorType2[ValueErrorType2["ArrayMaxContains"] = 1] = "ArrayMaxContains";
  ValueErrorType2[ValueErrorType2["ArrayMaxItems"] = 2] = "ArrayMaxItems";
  ValueErrorType2[ValueErrorType2["ArrayMinContains"] = 3] = "ArrayMinContains";
  ValueErrorType2[ValueErrorType2["ArrayMinItems"] = 4] = "ArrayMinItems";
  ValueErrorType2[ValueErrorType2["ArrayUniqueItems"] = 5] = "ArrayUniqueItems";
  ValueErrorType2[ValueErrorType2["Array"] = 6] = "Array";
  ValueErrorType2[ValueErrorType2["AsyncIterator"] = 7] = "AsyncIterator";
  ValueErrorType2[ValueErrorType2["BigIntExclusiveMaximum"] = 8] = "BigIntExclusiveMaximum";
  ValueErrorType2[ValueErrorType2["BigIntExclusiveMinimum"] = 9] = "BigIntExclusiveMinimum";
  ValueErrorType2[ValueErrorType2["BigIntMaximum"] = 10] = "BigIntMaximum";
  ValueErrorType2[ValueErrorType2["BigIntMinimum"] = 11] = "BigIntMinimum";
  ValueErrorType2[ValueErrorType2["BigIntMultipleOf"] = 12] = "BigIntMultipleOf";
  ValueErrorType2[ValueErrorType2["BigInt"] = 13] = "BigInt";
  ValueErrorType2[ValueErrorType2["Boolean"] = 14] = "Boolean";
  ValueErrorType2[ValueErrorType2["DateExclusiveMaximumTimestamp"] = 15] = "DateExclusiveMaximumTimestamp";
  ValueErrorType2[ValueErrorType2["DateExclusiveMinimumTimestamp"] = 16] = "DateExclusiveMinimumTimestamp";
  ValueErrorType2[ValueErrorType2["DateMaximumTimestamp"] = 17] = "DateMaximumTimestamp";
  ValueErrorType2[ValueErrorType2["DateMinimumTimestamp"] = 18] = "DateMinimumTimestamp";
  ValueErrorType2[ValueErrorType2["DateMultipleOfTimestamp"] = 19] = "DateMultipleOfTimestamp";
  ValueErrorType2[ValueErrorType2["Date"] = 20] = "Date";
  ValueErrorType2[ValueErrorType2["Function"] = 21] = "Function";
  ValueErrorType2[ValueErrorType2["IntegerExclusiveMaximum"] = 22] = "IntegerExclusiveMaximum";
  ValueErrorType2[ValueErrorType2["IntegerExclusiveMinimum"] = 23] = "IntegerExclusiveMinimum";
  ValueErrorType2[ValueErrorType2["IntegerMaximum"] = 24] = "IntegerMaximum";
  ValueErrorType2[ValueErrorType2["IntegerMinimum"] = 25] = "IntegerMinimum";
  ValueErrorType2[ValueErrorType2["IntegerMultipleOf"] = 26] = "IntegerMultipleOf";
  ValueErrorType2[ValueErrorType2["Integer"] = 27] = "Integer";
  ValueErrorType2[ValueErrorType2["IntersectUnevaluatedProperties"] = 28] = "IntersectUnevaluatedProperties";
  ValueErrorType2[ValueErrorType2["Intersect"] = 29] = "Intersect";
  ValueErrorType2[ValueErrorType2["Iterator"] = 30] = "Iterator";
  ValueErrorType2[ValueErrorType2["Kind"] = 31] = "Kind";
  ValueErrorType2[ValueErrorType2["Literal"] = 32] = "Literal";
  ValueErrorType2[ValueErrorType2["Never"] = 33] = "Never";
  ValueErrorType2[ValueErrorType2["Not"] = 34] = "Not";
  ValueErrorType2[ValueErrorType2["Null"] = 35] = "Null";
  ValueErrorType2[ValueErrorType2["NumberExclusiveMaximum"] = 36] = "NumberExclusiveMaximum";
  ValueErrorType2[ValueErrorType2["NumberExclusiveMinimum"] = 37] = "NumberExclusiveMinimum";
  ValueErrorType2[ValueErrorType2["NumberMaximum"] = 38] = "NumberMaximum";
  ValueErrorType2[ValueErrorType2["NumberMinimum"] = 39] = "NumberMinimum";
  ValueErrorType2[ValueErrorType2["NumberMultipleOf"] = 40] = "NumberMultipleOf";
  ValueErrorType2[ValueErrorType2["Number"] = 41] = "Number";
  ValueErrorType2[ValueErrorType2["ObjectAdditionalProperties"] = 42] = "ObjectAdditionalProperties";
  ValueErrorType2[ValueErrorType2["ObjectMaxProperties"] = 43] = "ObjectMaxProperties";
  ValueErrorType2[ValueErrorType2["ObjectMinProperties"] = 44] = "ObjectMinProperties";
  ValueErrorType2[ValueErrorType2["ObjectRequiredProperty"] = 45] = "ObjectRequiredProperty";
  ValueErrorType2[ValueErrorType2["Object"] = 46] = "Object";
  ValueErrorType2[ValueErrorType2["Promise"] = 47] = "Promise";
  ValueErrorType2[ValueErrorType2["RegExp"] = 48] = "RegExp";
  ValueErrorType2[ValueErrorType2["StringFormatUnknown"] = 49] = "StringFormatUnknown";
  ValueErrorType2[ValueErrorType2["StringFormat"] = 50] = "StringFormat";
  ValueErrorType2[ValueErrorType2["StringMaxLength"] = 51] = "StringMaxLength";
  ValueErrorType2[ValueErrorType2["StringMinLength"] = 52] = "StringMinLength";
  ValueErrorType2[ValueErrorType2["StringPattern"] = 53] = "StringPattern";
  ValueErrorType2[ValueErrorType2["String"] = 54] = "String";
  ValueErrorType2[ValueErrorType2["Symbol"] = 55] = "Symbol";
  ValueErrorType2[ValueErrorType2["TupleLength"] = 56] = "TupleLength";
  ValueErrorType2[ValueErrorType2["Tuple"] = 57] = "Tuple";
  ValueErrorType2[ValueErrorType2["Uint8ArrayMaxByteLength"] = 58] = "Uint8ArrayMaxByteLength";
  ValueErrorType2[ValueErrorType2["Uint8ArrayMinByteLength"] = 59] = "Uint8ArrayMinByteLength";
  ValueErrorType2[ValueErrorType2["Uint8Array"] = 60] = "Uint8Array";
  ValueErrorType2[ValueErrorType2["Undefined"] = 61] = "Undefined";
  ValueErrorType2[ValueErrorType2["Union"] = 62] = "Union";
  ValueErrorType2[ValueErrorType2["Void"] = 63] = "Void";
})(ValueErrorType || (ValueErrorType = {}));

class ValueErrorsUnknownTypeError extends TypeBoxError {
  constructor(schema) {
    super("Unknown type");
    this.schema = schema;
  }
}

class ValueErrorIterator {
  constructor(iterator3) {
    this.iterator = iterator3;
  }
  [Symbol.iterator]() {
    return this.iterator;
  }
  First() {
    const next = this.iterator.next();
    return next.done ? undefined : next.value;
  }
}
// node_modules/@sinclair/typebox/build/esm/type/any/any.mjs
function Any(options = {}) {
  return { ...options, [Kind]: "Any" };
}
// node_modules/@sinclair/typebox/build/esm/type/unknown/unknown.mjs
function Unknown(options = {}) {
  return {
    ...options,
    [Kind]: "Unknown"
  };
}
// node_modules/@sinclair/typebox/build/esm/type/guard/type.mjs
var exports_type2 = {};
__export(exports_type2, {
  TypeGuardUnknownTypeError: () => TypeGuardUnknownTypeError,
  IsVoid: () => IsVoid2,
  IsUnsafe: () => IsUnsafe2,
  IsUnknown: () => IsUnknown2,
  IsUnionLiteral: () => IsUnionLiteral,
  IsUnion: () => IsUnion2,
  IsUndefined: () => IsUndefined4,
  IsUint8Array: () => IsUint8Array4,
  IsTuple: () => IsTuple2,
  IsTransform: () => IsTransform2,
  IsThis: () => IsThis2,
  IsTemplateLiteral: () => IsTemplateLiteral2,
  IsSymbol: () => IsSymbol4,
  IsString: () => IsString4,
  IsSchema: () => IsSchema2,
  IsRegExp: () => IsRegExp3,
  IsRef: () => IsRef2,
  IsRecursive: () => IsRecursive,
  IsRecord: () => IsRecord2,
  IsReadonly: () => IsReadonly2,
  IsProperties: () => IsProperties,
  IsPromise: () => IsPromise3,
  IsOptional: () => IsOptional2,
  IsObject: () => IsObject4,
  IsNumber: () => IsNumber4,
  IsNull: () => IsNull4,
  IsNot: () => IsNot2,
  IsNever: () => IsNever2,
  IsMappedResult: () => IsMappedResult2,
  IsMappedKey: () => IsMappedKey2,
  IsLiteralValue: () => IsLiteralValue,
  IsLiteralString: () => IsLiteralString,
  IsLiteralNumber: () => IsLiteralNumber,
  IsLiteralBoolean: () => IsLiteralBoolean,
  IsLiteral: () => IsLiteral2,
  IsKindOf: () => IsKindOf2,
  IsKind: () => IsKind2,
  IsIterator: () => IsIterator4,
  IsIntersect: () => IsIntersect2,
  IsInteger: () => IsInteger3,
  IsFunction: () => IsFunction4,
  IsDate: () => IsDate4,
  IsConstructor: () => IsConstructor2,
  IsBoolean: () => IsBoolean4,
  IsBigInt: () => IsBigInt4,
  IsAsyncIterator: () => IsAsyncIterator4,
  IsArray: () => IsArray4,
  IsAny: () => IsAny2
});
function IsPattern(value3) {
  try {
    new RegExp(value3);
    return true;
  } catch {
    return false;
  }
}
function IsControlCharacterFree(value3) {
  if (!IsString2(value3))
    return false;
  for (let i = 0;i < value3.length; i++) {
    const code = value3.charCodeAt(i);
    if (code >= 7 && code <= 13 || code === 27 || code === 127) {
      return false;
    }
  }
  return true;
}
function IsAdditionalProperties(value3) {
  return IsOptionalBoolean(value3) || IsSchema2(value3);
}
function IsOptionalBigInt(value3) {
  return IsUndefined2(value3) || IsBigInt2(value3);
}
function IsOptionalNumber(value3) {
  return IsUndefined2(value3) || IsNumber2(value3);
}
function IsOptionalBoolean(value3) {
  return IsUndefined2(value3) || IsBoolean2(value3);
}
function IsOptionalString(value3) {
  return IsUndefined2(value3) || IsString2(value3);
}
function IsOptionalPattern(value3) {
  return IsUndefined2(value3) || IsString2(value3) && IsControlCharacterFree(value3) && IsPattern(value3);
}
function IsOptionalFormat(value3) {
  return IsUndefined2(value3) || IsString2(value3) && IsControlCharacterFree(value3);
}
function IsOptionalSchema(value3) {
  return IsUndefined2(value3) || IsSchema2(value3);
}
function IsReadonly2(value3) {
  return IsObject2(value3) && value3[ReadonlyKind] === "Readonly";
}
function IsOptional2(value3) {
  return IsObject2(value3) && value3[OptionalKind] === "Optional";
}
function IsAny2(value3) {
  return IsKindOf2(value3, "Any") && IsOptionalString(value3.$id);
}
function IsArray4(value3) {
  return IsKindOf2(value3, "Array") && value3.type === "array" && IsOptionalString(value3.$id) && IsSchema2(value3.items) && IsOptionalNumber(value3.minItems) && IsOptionalNumber(value3.maxItems) && IsOptionalBoolean(value3.uniqueItems) && IsOptionalSchema(value3.contains) && IsOptionalNumber(value3.minContains) && IsOptionalNumber(value3.maxContains);
}
function IsAsyncIterator4(value3) {
  return IsKindOf2(value3, "AsyncIterator") && value3.type === "AsyncIterator" && IsOptionalString(value3.$id) && IsSchema2(value3.items);
}
function IsBigInt4(value3) {
  return IsKindOf2(value3, "BigInt") && value3.type === "bigint" && IsOptionalString(value3.$id) && IsOptionalBigInt(value3.exclusiveMaximum) && IsOptionalBigInt(value3.exclusiveMinimum) && IsOptionalBigInt(value3.maximum) && IsOptionalBigInt(value3.minimum) && IsOptionalBigInt(value3.multipleOf);
}
function IsBoolean4(value3) {
  return IsKindOf2(value3, "Boolean") && value3.type === "boolean" && IsOptionalString(value3.$id);
}
function IsConstructor2(value3) {
  return IsKindOf2(value3, "Constructor") && value3.type === "Constructor" && IsOptionalString(value3.$id) && IsArray2(value3.parameters) && value3.parameters.every((schema) => IsSchema2(schema)) && IsSchema2(value3.returns);
}
function IsDate4(value3) {
  return IsKindOf2(value3, "Date") && value3.type === "Date" && IsOptionalString(value3.$id) && IsOptionalNumber(value3.exclusiveMaximumTimestamp) && IsOptionalNumber(value3.exclusiveMinimumTimestamp) && IsOptionalNumber(value3.maximumTimestamp) && IsOptionalNumber(value3.minimumTimestamp) && IsOptionalNumber(value3.multipleOfTimestamp);
}
function IsFunction4(value3) {
  return IsKindOf2(value3, "Function") && value3.type === "Function" && IsOptionalString(value3.$id) && IsArray2(value3.parameters) && value3.parameters.every((schema) => IsSchema2(schema)) && IsSchema2(value3.returns);
}
function IsInteger3(value3) {
  return IsKindOf2(value3, "Integer") && value3.type === "integer" && IsOptionalString(value3.$id) && IsOptionalNumber(value3.exclusiveMaximum) && IsOptionalNumber(value3.exclusiveMinimum) && IsOptionalNumber(value3.maximum) && IsOptionalNumber(value3.minimum) && IsOptionalNumber(value3.multipleOf);
}
function IsProperties(value3) {
  return IsObject2(value3) && Object.entries(value3).every(([key, schema]) => IsControlCharacterFree(key) && IsSchema2(schema));
}
function IsIntersect2(value3) {
  return IsKindOf2(value3, "Intersect") && (IsString2(value3.type) && value3.type !== "object" ? false : true) && IsArray2(value3.allOf) && value3.allOf.every((schema) => IsSchema2(schema) && !IsTransform2(schema)) && IsOptionalString(value3.type) && (IsOptionalBoolean(value3.unevaluatedProperties) || IsOptionalSchema(value3.unevaluatedProperties)) && IsOptionalString(value3.$id);
}
function IsIterator4(value3) {
  return IsKindOf2(value3, "Iterator") && value3.type === "Iterator" && IsOptionalString(value3.$id) && IsSchema2(value3.items);
}
function IsKindOf2(value3, kind14) {
  return IsObject2(value3) && Kind in value3 && value3[Kind] === kind14;
}
function IsLiteralString(value3) {
  return IsLiteral2(value3) && IsString2(value3.const);
}
function IsLiteralNumber(value3) {
  return IsLiteral2(value3) && IsNumber2(value3.const);
}
function IsLiteralBoolean(value3) {
  return IsLiteral2(value3) && IsBoolean2(value3.const);
}
function IsLiteral2(value3) {
  return IsKindOf2(value3, "Literal") && IsOptionalString(value3.$id) && IsLiteralValue(value3.const);
}
function IsLiteralValue(value3) {
  return IsBoolean2(value3) || IsNumber2(value3) || IsString2(value3);
}
function IsMappedKey2(value3) {
  return IsKindOf2(value3, "MappedKey") && IsArray2(value3.keys) && value3.keys.every((key) => IsNumber2(key) || IsString2(key));
}
function IsMappedResult2(value3) {
  return IsKindOf2(value3, "MappedResult") && IsProperties(value3.properties);
}
function IsNever2(value3) {
  return IsKindOf2(value3, "Never") && IsObject2(value3.not) && Object.getOwnPropertyNames(value3.not).length === 0;
}
function IsNot2(value3) {
  return IsKindOf2(value3, "Not") && IsSchema2(value3.not);
}
function IsNull4(value3) {
  return IsKindOf2(value3, "Null") && value3.type === "null" && IsOptionalString(value3.$id);
}
function IsNumber4(value3) {
  return IsKindOf2(value3, "Number") && value3.type === "number" && IsOptionalString(value3.$id) && IsOptionalNumber(value3.exclusiveMaximum) && IsOptionalNumber(value3.exclusiveMinimum) && IsOptionalNumber(value3.maximum) && IsOptionalNumber(value3.minimum) && IsOptionalNumber(value3.multipleOf);
}
function IsObject4(value3) {
  return IsKindOf2(value3, "Object") && value3.type === "object" && IsOptionalString(value3.$id) && IsProperties(value3.properties) && IsAdditionalProperties(value3.additionalProperties) && IsOptionalNumber(value3.minProperties) && IsOptionalNumber(value3.maxProperties);
}
function IsPromise3(value3) {
  return IsKindOf2(value3, "Promise") && value3.type === "Promise" && IsOptionalString(value3.$id) && IsSchema2(value3.item);
}
function IsRecord2(value3) {
  return IsKindOf2(value3, "Record") && value3.type === "object" && IsOptionalString(value3.$id) && IsAdditionalProperties(value3.additionalProperties) && IsObject2(value3.patternProperties) && ((schema) => {
    const keys = Object.getOwnPropertyNames(schema.patternProperties);
    return keys.length === 1 && IsPattern(keys[0]) && IsObject2(schema.patternProperties) && IsSchema2(schema.patternProperties[keys[0]]);
  })(value3);
}
function IsRecursive(value3) {
  return IsObject2(value3) && Hint in value3 && value3[Hint] === "Recursive";
}
function IsRef2(value3) {
  return IsKindOf2(value3, "Ref") && IsOptionalString(value3.$id) && IsString2(value3.$ref);
}
function IsRegExp3(value3) {
  return IsKindOf2(value3, "RegExp") && IsOptionalString(value3.$id) && IsString2(value3.source) && IsString2(value3.flags) && IsOptionalNumber(value3.maxLength) && IsOptionalNumber(value3.minLength);
}
function IsString4(value3) {
  return IsKindOf2(value3, "String") && value3.type === "string" && IsOptionalString(value3.$id) && IsOptionalNumber(value3.minLength) && IsOptionalNumber(value3.maxLength) && IsOptionalPattern(value3.pattern) && IsOptionalFormat(value3.format);
}
function IsSymbol4(value3) {
  return IsKindOf2(value3, "Symbol") && value3.type === "symbol" && IsOptionalString(value3.$id);
}
function IsTemplateLiteral2(value3) {
  return IsKindOf2(value3, "TemplateLiteral") && value3.type === "string" && IsString2(value3.pattern) && value3.pattern[0] === "^" && value3.pattern[value3.pattern.length - 1] === "$";
}
function IsThis2(value3) {
  return IsKindOf2(value3, "This") && IsOptionalString(value3.$id) && IsString2(value3.$ref);
}
function IsTransform2(value3) {
  return IsObject2(value3) && TransformKind in value3;
}
function IsTuple2(value3) {
  return IsKindOf2(value3, "Tuple") && value3.type === "array" && IsOptionalString(value3.$id) && IsNumber2(value3.minItems) && IsNumber2(value3.maxItems) && value3.minItems === value3.maxItems && (IsUndefined2(value3.items) && IsUndefined2(value3.additionalItems) && value3.minItems === 0 || IsArray2(value3.items) && value3.items.every((schema) => IsSchema2(schema)));
}
function IsUndefined4(value3) {
  return IsKindOf2(value3, "Undefined") && value3.type === "undefined" && IsOptionalString(value3.$id);
}
function IsUnionLiteral(value3) {
  return IsUnion2(value3) && value3.anyOf.every((schema) => IsLiteralString(schema) || IsLiteralNumber(schema));
}
function IsUnion2(value3) {
  return IsKindOf2(value3, "Union") && IsOptionalString(value3.$id) && IsObject2(value3) && IsArray2(value3.anyOf) && value3.anyOf.every((schema) => IsSchema2(schema));
}
function IsUint8Array4(value3) {
  return IsKindOf2(value3, "Uint8Array") && value3.type === "Uint8Array" && IsOptionalString(value3.$id) && IsOptionalNumber(value3.minByteLength) && IsOptionalNumber(value3.maxByteLength);
}
function IsUnknown2(value3) {
  return IsKindOf2(value3, "Unknown") && IsOptionalString(value3.$id);
}
function IsUnsafe2(value3) {
  return IsKindOf2(value3, "Unsafe");
}
function IsVoid2(value3) {
  return IsKindOf2(value3, "Void") && value3.type === "void" && IsOptionalString(value3.$id);
}
function IsKind2(value3) {
  return IsObject2(value3) && Kind in value3 && IsString2(value3[Kind]) && !KnownTypes.includes(value3[Kind]);
}
function IsSchema2(value3) {
  return IsObject2(value3) && (IsAny2(value3) || IsArray4(value3) || IsBoolean4(value3) || IsBigInt4(value3) || IsAsyncIterator4(value3) || IsConstructor2(value3) || IsDate4(value3) || IsFunction4(value3) || IsInteger3(value3) || IsIntersect2(value3) || IsIterator4(value3) || IsLiteral2(value3) || IsMappedKey2(value3) || IsMappedResult2(value3) || IsNever2(value3) || IsNot2(value3) || IsNull4(value3) || IsNumber4(value3) || IsObject4(value3) || IsPromise3(value3) || IsRecord2(value3) || IsRef2(value3) || IsRegExp3(value3) || IsString4(value3) || IsSymbol4(value3) || IsTemplateLiteral2(value3) || IsThis2(value3) || IsTuple2(value3) || IsUndefined4(value3) || IsUnion2(value3) || IsUint8Array4(value3) || IsUnknown2(value3) || IsUnsafe2(value3) || IsVoid2(value3) || IsKind2(value3));
}

class TypeGuardUnknownTypeError extends TypeBoxError {
}
var KnownTypes = [
  "Any",
  "Array",
  "AsyncIterator",
  "BigInt",
  "Boolean",
  "Constructor",
  "Date",
  "Enum",
  "Function",
  "Integer",
  "Intersect",
  "Iterator",
  "Literal",
  "MappedKey",
  "MappedResult",
  "Not",
  "Null",
  "Number",
  "Object",
  "Promise",
  "Record",
  "Ref",
  "RegExp",
  "String",
  "Symbol",
  "TemplateLiteral",
  "This",
  "Tuple",
  "Undefined",
  "Union",
  "Uint8Array",
  "Unknown",
  "Void"
];
// node_modules/@sinclair/typebox/build/esm/type/extends/extends-check.mjs
function IntoBooleanResult(result) {
  return result === ExtendsResult.False ? result : ExtendsResult.True;
}
function Throw(message) {
  throw new ExtendsResolverError(message);
}
function IsStructuralRight(right) {
  return exports_type2.IsNever(right) || exports_type2.IsIntersect(right) || exports_type2.IsUnion(right) || exports_type2.IsUnknown(right) || exports_type2.IsAny(right);
}
function StructuralRight(left, right) {
  return exports_type2.IsNever(right) ? FromNeverRight(left, right) : exports_type2.IsIntersect(right) ? FromIntersectRight(left, right) : exports_type2.IsUnion(right) ? FromUnionRight(left, right) : exports_type2.IsUnknown(right) ? FromUnknownRight(left, right) : exports_type2.IsAny(right) ? FromAnyRight(left, right) : Throw("StructuralRight");
}
function FromAnyRight(left, right) {
  return ExtendsResult.True;
}
function FromAny2(left, right) {
  return exports_type2.IsIntersect(right) ? FromIntersectRight(left, right) : exports_type2.IsUnion(right) && right.anyOf.some((schema) => exports_type2.IsAny(schema) || exports_type2.IsUnknown(schema)) ? ExtendsResult.True : exports_type2.IsUnion(right) ? ExtendsResult.Union : exports_type2.IsUnknown(right) ? ExtendsResult.True : exports_type2.IsAny(right) ? ExtendsResult.True : ExtendsResult.Union;
}
function FromArrayRight(left, right) {
  return exports_type2.IsUnknown(left) ? ExtendsResult.False : exports_type2.IsAny(left) ? ExtendsResult.Union : exports_type2.IsNever(left) ? ExtendsResult.True : ExtendsResult.False;
}
function FromArray4(left, right) {
  return exports_type2.IsObject(right) && IsObjectArrayLike(right) ? ExtendsResult.True : IsStructuralRight(right) ? StructuralRight(left, right) : !exports_type2.IsArray(right) ? ExtendsResult.False : IntoBooleanResult(Visit5(left.items, right.items));
}
function FromAsyncIterator2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : !exports_type2.IsAsyncIterator(right) ? ExtendsResult.False : IntoBooleanResult(Visit5(left.items, right.items));
}
function FromBigInt2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsRecord(right) ? FromRecordRight(left, right) : exports_type2.IsBigInt(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromBooleanRight(left, right) {
  return exports_type2.IsLiteralBoolean(left) ? ExtendsResult.True : exports_type2.IsBoolean(left) ? ExtendsResult.True : ExtendsResult.False;
}
function FromBoolean2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsRecord(right) ? FromRecordRight(left, right) : exports_type2.IsBoolean(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromConstructor2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : !exports_type2.IsConstructor(right) ? ExtendsResult.False : left.parameters.length > right.parameters.length ? ExtendsResult.False : !left.parameters.every((schema, index) => IntoBooleanResult(Visit5(right.parameters[index], schema)) === ExtendsResult.True) ? ExtendsResult.False : IntoBooleanResult(Visit5(left.returns, right.returns));
}
function FromDate2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsRecord(right) ? FromRecordRight(left, right) : exports_type2.IsDate(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromFunction2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : !exports_type2.IsFunction(right) ? ExtendsResult.False : left.parameters.length > right.parameters.length ? ExtendsResult.False : !left.parameters.every((schema, index) => IntoBooleanResult(Visit5(right.parameters[index], schema)) === ExtendsResult.True) ? ExtendsResult.False : IntoBooleanResult(Visit5(left.returns, right.returns));
}
function FromIntegerRight(left, right) {
  return exports_type2.IsLiteral(left) && exports_value.IsNumber(left.const) ? ExtendsResult.True : exports_type2.IsNumber(left) || exports_type2.IsInteger(left) ? ExtendsResult.True : ExtendsResult.False;
}
function FromInteger2(left, right) {
  return exports_type2.IsInteger(right) || exports_type2.IsNumber(right) ? ExtendsResult.True : IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsRecord(right) ? FromRecordRight(left, right) : ExtendsResult.False;
}
function FromIntersectRight(left, right) {
  return right.allOf.every((schema) => Visit5(left, schema) === ExtendsResult.True) ? ExtendsResult.True : ExtendsResult.False;
}
function FromIntersect4(left, right) {
  return left.allOf.some((schema) => Visit5(schema, right) === ExtendsResult.True) ? ExtendsResult.True : ExtendsResult.False;
}
function FromIterator2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : !exports_type2.IsIterator(right) ? ExtendsResult.False : IntoBooleanResult(Visit5(left.items, right.items));
}
function FromLiteral3(left, right) {
  return exports_type2.IsLiteral(right) && right.const === left.const ? ExtendsResult.True : IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsRecord(right) ? FromRecordRight(left, right) : exports_type2.IsString(right) ? FromStringRight(left, right) : exports_type2.IsNumber(right) ? FromNumberRight(left, right) : exports_type2.IsInteger(right) ? FromIntegerRight(left, right) : exports_type2.IsBoolean(right) ? FromBooleanRight(left, right) : ExtendsResult.False;
}
function FromNeverRight(left, right) {
  return ExtendsResult.False;
}
function FromNever2(left, right) {
  return ExtendsResult.True;
}
function UnwrapTNot(schema) {
  let [current, depth] = [schema, 0];
  while (true) {
    if (!exports_type2.IsNot(current))
      break;
    current = current.not;
    depth += 1;
  }
  return depth % 2 === 0 ? current : Unknown();
}
function FromNot2(left, right) {
  return exports_type2.IsNot(left) ? Visit5(UnwrapTNot(left), right) : exports_type2.IsNot(right) ? Visit5(left, UnwrapTNot(right)) : Throw("Invalid fallthrough for Not");
}
function FromNull2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsRecord(right) ? FromRecordRight(left, right) : exports_type2.IsNull(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromNumberRight(left, right) {
  return exports_type2.IsLiteralNumber(left) ? ExtendsResult.True : exports_type2.IsNumber(left) || exports_type2.IsInteger(left) ? ExtendsResult.True : ExtendsResult.False;
}
function FromNumber2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsRecord(right) ? FromRecordRight(left, right) : exports_type2.IsInteger(right) || exports_type2.IsNumber(right) ? ExtendsResult.True : ExtendsResult.False;
}
function IsObjectPropertyCount(schema, count) {
  return Object.getOwnPropertyNames(schema.properties).length === count;
}
function IsObjectStringLike(schema) {
  return IsObjectArrayLike(schema);
}
function IsObjectSymbolLike(schema) {
  return IsObjectPropertyCount(schema, 0) || IsObjectPropertyCount(schema, 1) && "description" in schema.properties && exports_type2.IsUnion(schema.properties.description) && schema.properties.description.anyOf.length === 2 && (exports_type2.IsString(schema.properties.description.anyOf[0]) && exports_type2.IsUndefined(schema.properties.description.anyOf[1]) || exports_type2.IsString(schema.properties.description.anyOf[1]) && exports_type2.IsUndefined(schema.properties.description.anyOf[0]));
}
function IsObjectNumberLike(schema) {
  return IsObjectPropertyCount(schema, 0);
}
function IsObjectBooleanLike(schema) {
  return IsObjectPropertyCount(schema, 0);
}
function IsObjectBigIntLike(schema) {
  return IsObjectPropertyCount(schema, 0);
}
function IsObjectDateLike(schema) {
  return IsObjectPropertyCount(schema, 0);
}
function IsObjectUint8ArrayLike(schema) {
  return IsObjectArrayLike(schema);
}
function IsObjectFunctionLike(schema) {
  const length = Number2();
  return IsObjectPropertyCount(schema, 0) || IsObjectPropertyCount(schema, 1) && "length" in schema.properties && IntoBooleanResult(Visit5(schema.properties["length"], length)) === ExtendsResult.True;
}
function IsObjectConstructorLike(schema) {
  return IsObjectPropertyCount(schema, 0);
}
function IsObjectArrayLike(schema) {
  const length = Number2();
  return IsObjectPropertyCount(schema, 0) || IsObjectPropertyCount(schema, 1) && "length" in schema.properties && IntoBooleanResult(Visit5(schema.properties["length"], length)) === ExtendsResult.True;
}
function IsObjectPromiseLike(schema) {
  const then = Function2([Any()], Any());
  return IsObjectPropertyCount(schema, 0) || IsObjectPropertyCount(schema, 1) && "then" in schema.properties && IntoBooleanResult(Visit5(schema.properties["then"], then)) === ExtendsResult.True;
}
function Property(left, right) {
  return Visit5(left, right) === ExtendsResult.False ? ExtendsResult.False : exports_type2.IsOptional(left) && !exports_type2.IsOptional(right) ? ExtendsResult.False : ExtendsResult.True;
}
function FromObjectRight(left, right) {
  return exports_type2.IsUnknown(left) ? ExtendsResult.False : exports_type2.IsAny(left) ? ExtendsResult.Union : exports_type2.IsNever(left) || exports_type2.IsLiteralString(left) && IsObjectStringLike(right) || exports_type2.IsLiteralNumber(left) && IsObjectNumberLike(right) || exports_type2.IsLiteralBoolean(left) && IsObjectBooleanLike(right) || exports_type2.IsSymbol(left) && IsObjectSymbolLike(right) || exports_type2.IsBigInt(left) && IsObjectBigIntLike(right) || exports_type2.IsString(left) && IsObjectStringLike(right) || exports_type2.IsSymbol(left) && IsObjectSymbolLike(right) || exports_type2.IsNumber(left) && IsObjectNumberLike(right) || exports_type2.IsInteger(left) && IsObjectNumberLike(right) || exports_type2.IsBoolean(left) && IsObjectBooleanLike(right) || exports_type2.IsUint8Array(left) && IsObjectUint8ArrayLike(right) || exports_type2.IsDate(left) && IsObjectDateLike(right) || exports_type2.IsConstructor(left) && IsObjectConstructorLike(right) || exports_type2.IsFunction(left) && IsObjectFunctionLike(right) ? ExtendsResult.True : exports_type2.IsRecord(left) && exports_type2.IsString(RecordKey(left)) ? (() => {
    return right[Hint] === "Record" ? ExtendsResult.True : ExtendsResult.False;
  })() : exports_type2.IsRecord(left) && exports_type2.IsNumber(RecordKey(left)) ? (() => {
    return IsObjectPropertyCount(right, 0) ? ExtendsResult.True : ExtendsResult.False;
  })() : ExtendsResult.False;
}
function FromObject2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsRecord(right) ? FromRecordRight(left, right) : !exports_type2.IsObject(right) ? ExtendsResult.False : (() => {
    for (const key of Object.getOwnPropertyNames(right.properties)) {
      if (!(key in left.properties) && !exports_type2.IsOptional(right.properties[key])) {
        return ExtendsResult.False;
      }
      if (exports_type2.IsOptional(right.properties[key])) {
        return ExtendsResult.True;
      }
      if (Property(left.properties[key], right.properties[key]) === ExtendsResult.False) {
        return ExtendsResult.False;
      }
    }
    return ExtendsResult.True;
  })();
}
function FromPromise2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) && IsObjectPromiseLike(right) ? ExtendsResult.True : !exports_type2.IsPromise(right) ? ExtendsResult.False : IntoBooleanResult(Visit5(left.item, right.item));
}
function RecordKey(schema) {
  return PatternNumberExact in schema.patternProperties ? Number2() : (PatternStringExact in schema.patternProperties) ? String2() : Throw("Unknown record key pattern");
}
function RecordValue(schema) {
  return PatternNumberExact in schema.patternProperties ? schema.patternProperties[PatternNumberExact] : (PatternStringExact in schema.patternProperties) ? schema.patternProperties[PatternStringExact] : Throw("Unable to get record value schema");
}
function FromRecordRight(left, right) {
  const [Key, Value] = [RecordKey(right), RecordValue(right)];
  return exports_type2.IsLiteralString(left) && exports_type2.IsNumber(Key) && IntoBooleanResult(Visit5(left, Value)) === ExtendsResult.True ? ExtendsResult.True : exports_type2.IsUint8Array(left) && exports_type2.IsNumber(Key) ? Visit5(left, Value) : exports_type2.IsString(left) && exports_type2.IsNumber(Key) ? Visit5(left, Value) : exports_type2.IsArray(left) && exports_type2.IsNumber(Key) ? Visit5(left, Value) : exports_type2.IsObject(left) ? (() => {
    for (const key of Object.getOwnPropertyNames(left.properties)) {
      if (Property(Value, left.properties[key]) === ExtendsResult.False) {
        return ExtendsResult.False;
      }
    }
    return ExtendsResult.True;
  })() : ExtendsResult.False;
}
function FromRecord2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : !exports_type2.IsRecord(right) ? ExtendsResult.False : Visit5(RecordValue(left), RecordValue(right));
}
function FromRegExp2(left, right) {
  const L = exports_type2.IsRegExp(left) ? String2() : left;
  const R = exports_type2.IsRegExp(right) ? String2() : right;
  return Visit5(L, R);
}
function FromStringRight(left, right) {
  return exports_type2.IsLiteral(left) && exports_value.IsString(left.const) ? ExtendsResult.True : exports_type2.IsString(left) ? ExtendsResult.True : ExtendsResult.False;
}
function FromString2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsRecord(right) ? FromRecordRight(left, right) : exports_type2.IsString(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromSymbol2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsRecord(right) ? FromRecordRight(left, right) : exports_type2.IsSymbol(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromTemplateLiteral3(left, right) {
  return exports_type2.IsTemplateLiteral(left) ? Visit5(TemplateLiteralToUnion(left), right) : exports_type2.IsTemplateLiteral(right) ? Visit5(left, TemplateLiteralToUnion(right)) : Throw("Invalid fallthrough for TemplateLiteral");
}
function IsArrayOfTuple(left, right) {
  return exports_type2.IsArray(right) && left.items !== undefined && left.items.every((schema) => Visit5(schema, right.items) === ExtendsResult.True);
}
function FromTupleRight(left, right) {
  return exports_type2.IsNever(left) ? ExtendsResult.True : exports_type2.IsUnknown(left) ? ExtendsResult.False : exports_type2.IsAny(left) ? ExtendsResult.Union : ExtendsResult.False;
}
function FromTuple4(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) && IsObjectArrayLike(right) ? ExtendsResult.True : exports_type2.IsArray(right) && IsArrayOfTuple(left, right) ? ExtendsResult.True : !exports_type2.IsTuple(right) ? ExtendsResult.False : exports_value.IsUndefined(left.items) && !exports_value.IsUndefined(right.items) || !exports_value.IsUndefined(left.items) && exports_value.IsUndefined(right.items) ? ExtendsResult.False : exports_value.IsUndefined(left.items) && !exports_value.IsUndefined(right.items) ? ExtendsResult.True : left.items.every((schema, index) => Visit5(schema, right.items[index]) === ExtendsResult.True) ? ExtendsResult.True : ExtendsResult.False;
}
function FromUint8Array2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsRecord(right) ? FromRecordRight(left, right) : exports_type2.IsUint8Array(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromUndefined2(left, right) {
  return IsStructuralRight(right) ? StructuralRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsRecord(right) ? FromRecordRight(left, right) : exports_type2.IsVoid(right) ? FromVoidRight(left, right) : exports_type2.IsUndefined(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromUnionRight(left, right) {
  return right.anyOf.some((schema) => Visit5(left, schema) === ExtendsResult.True) ? ExtendsResult.True : ExtendsResult.False;
}
function FromUnion6(left, right) {
  return left.anyOf.every((schema) => Visit5(schema, right) === ExtendsResult.True) ? ExtendsResult.True : ExtendsResult.False;
}
function FromUnknownRight(left, right) {
  return ExtendsResult.True;
}
function FromUnknown2(left, right) {
  return exports_type2.IsNever(right) ? FromNeverRight(left, right) : exports_type2.IsIntersect(right) ? FromIntersectRight(left, right) : exports_type2.IsUnion(right) ? FromUnionRight(left, right) : exports_type2.IsAny(right) ? FromAnyRight(left, right) : exports_type2.IsString(right) ? FromStringRight(left, right) : exports_type2.IsNumber(right) ? FromNumberRight(left, right) : exports_type2.IsInteger(right) ? FromIntegerRight(left, right) : exports_type2.IsBoolean(right) ? FromBooleanRight(left, right) : exports_type2.IsArray(right) ? FromArrayRight(left, right) : exports_type2.IsTuple(right) ? FromTupleRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsUnknown(right) ? ExtendsResult.True : ExtendsResult.False;
}
function FromVoidRight(left, right) {
  return exports_type2.IsUndefined(left) ? ExtendsResult.True : exports_type2.IsUndefined(left) ? ExtendsResult.True : ExtendsResult.False;
}
function FromVoid2(left, right) {
  return exports_type2.IsIntersect(right) ? FromIntersectRight(left, right) : exports_type2.IsUnion(right) ? FromUnionRight(left, right) : exports_type2.IsUnknown(right) ? FromUnknownRight(left, right) : exports_type2.IsAny(right) ? FromAnyRight(left, right) : exports_type2.IsObject(right) ? FromObjectRight(left, right) : exports_type2.IsVoid(right) ? ExtendsResult.True : ExtendsResult.False;
}
function Visit5(left, right) {
  return exports_type2.IsTemplateLiteral(left) || exports_type2.IsTemplateLiteral(right) ? FromTemplateLiteral3(left, right) : exports_type2.IsRegExp(left) || exports_type2.IsRegExp(right) ? FromRegExp2(left, right) : exports_type2.IsNot(left) || exports_type2.IsNot(right) ? FromNot2(left, right) : exports_type2.IsAny(left) ? FromAny2(left, right) : exports_type2.IsArray(left) ? FromArray4(left, right) : exports_type2.IsBigInt(left) ? FromBigInt2(left, right) : exports_type2.IsBoolean(left) ? FromBoolean2(left, right) : exports_type2.IsAsyncIterator(left) ? FromAsyncIterator2(left, right) : exports_type2.IsConstructor(left) ? FromConstructor2(left, right) : exports_type2.IsDate(left) ? FromDate2(left, right) : exports_type2.IsFunction(left) ? FromFunction2(left, right) : exports_type2.IsInteger(left) ? FromInteger2(left, right) : exports_type2.IsIntersect(left) ? FromIntersect4(left, right) : exports_type2.IsIterator(left) ? FromIterator2(left, right) : exports_type2.IsLiteral(left) ? FromLiteral3(left, right) : exports_type2.IsNever(left) ? FromNever2(left, right) : exports_type2.IsNull(left) ? FromNull2(left, right) : exports_type2.IsNumber(left) ? FromNumber2(left, right) : exports_type2.IsObject(left) ? FromObject2(left, right) : exports_type2.IsRecord(left) ? FromRecord2(left, right) : exports_type2.IsString(left) ? FromString2(left, right) : exports_type2.IsSymbol(left) ? FromSymbol2(left, right) : exports_type2.IsTuple(left) ? FromTuple4(left, right) : exports_type2.IsPromise(left) ? FromPromise2(left, right) : exports_type2.IsUint8Array(left) ? FromUint8Array2(left, right) : exports_type2.IsUndefined(left) ? FromUndefined2(left, right) : exports_type2.IsUnion(left) ? FromUnion6(left, right) : exports_type2.IsUnknown(left) ? FromUnknown2(left, right) : exports_type2.IsVoid(left) ? FromVoid2(left, right) : Throw(`Unknown left type operand '${left[Kind]}'`);
}
function ExtendsCheck(left, right) {
  return Visit5(left, right);
}

class ExtendsResolverError extends TypeBoxError {
}
var ExtendsResult;
(function(ExtendsResult2) {
  ExtendsResult2[ExtendsResult2["Union"] = 0] = "Union";
  ExtendsResult2[ExtendsResult2["True"] = 1] = "True";
  ExtendsResult2[ExtendsResult2["False"] = 2] = "False";
})(ExtendsResult || (ExtendsResult = {}));
// node_modules/@sinclair/typebox/build/esm/type/extends/extends-from-mapped-result.mjs
function FromProperties7(P, Right, True, False, options) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(P))
    Acc[K2] = Extends(P[K2], Right, True, False, options);
  return Acc;
}
function FromMappedResult6(Left, Right, True, False, options) {
  return FromProperties7(Left.properties, Right, True, False, options);
}
function ExtendsFromMappedResult(Left, Right, True, False, options) {
  const P = FromMappedResult6(Left, Right, True, False, options);
  return MappedResult(P);
}

// node_modules/@sinclair/typebox/build/esm/type/extends/extends.mjs
function ExtendsResolve(left, right, trueType, falseType) {
  const R = ExtendsCheck(left, right);
  return R === ExtendsResult.Union ? Union([trueType, falseType]) : R === ExtendsResult.True ? trueType : falseType;
}
function Extends(L, R, T, F, options = {}) {
  return IsMappedResult(L) ? ExtendsFromMappedResult(L, R, T, F, options) : IsMappedKey(L) ? CloneType(ExtendsFromMappedKey(L, R, T, F, options)) : CloneType(ExtendsResolve(L, R, T, F), options);
}

// node_modules/@sinclair/typebox/build/esm/type/extends/extends-from-mapped-key.mjs
function FromPropertyKey(K, U, L, R, options) {
  return {
    [K]: Extends(Literal(K), U, L, R, options)
  };
}
function FromPropertyKeys(K, U, L, R, options) {
  return K.reduce((Acc, LK) => {
    return { ...Acc, ...FromPropertyKey(LK, U, L, R, options) };
  }, {});
}
function FromMappedKey2(K, U, L, R, options) {
  return FromPropertyKeys(K.keys, U, L, R, options);
}
function ExtendsFromMappedKey(T, U, L, R, options) {
  const P = FromMappedKey2(T, U, L, R, options);
  return MappedResult(P);
}
// node_modules/@sinclair/typebox/build/esm/value/check/check.mjs
function IsAnyOrUnknown(schema) {
  return schema[Kind] === "Any" || schema[Kind] === "Unknown";
}
function IsDefined2(value3) {
  return value3 !== undefined;
}
function FromAny3(schema, references, value3) {
  return true;
}
function FromArray5(schema, references, value3) {
  if (!IsArray(value3))
    return false;
  if (IsDefined2(schema.minItems) && !(value3.length >= schema.minItems)) {
    return false;
  }
  if (IsDefined2(schema.maxItems) && !(value3.length <= schema.maxItems)) {
    return false;
  }
  if (!value3.every((value4) => Visit6(schema.items, references, value4))) {
    return false;
  }
  if (schema.uniqueItems === true && !function() {
    const set2 = new Set;
    for (const element of value3) {
      const hashed = Hash(element);
      if (set2.has(hashed)) {
        return false;
      } else {
        set2.add(hashed);
      }
    }
    return true;
  }()) {
    return false;
  }
  if (!(IsDefined2(schema.contains) || IsNumber(schema.minContains) || IsNumber(schema.maxContains))) {
    return true;
  }
  const containsSchema = IsDefined2(schema.contains) ? schema.contains : Never();
  const containsCount = value3.reduce((acc, value4) => Visit6(containsSchema, references, value4) ? acc + 1 : acc, 0);
  if (containsCount === 0) {
    return false;
  }
  if (IsNumber(schema.minContains) && containsCount < schema.minContains) {
    return false;
  }
  if (IsNumber(schema.maxContains) && containsCount > schema.maxContains) {
    return false;
  }
  return true;
}
function FromAsyncIterator3(schema, references, value3) {
  return IsAsyncIterator(value3);
}
function FromBigInt3(schema, references, value3) {
  if (!IsBigInt(value3))
    return false;
  if (IsDefined2(schema.exclusiveMaximum) && !(value3 < schema.exclusiveMaximum)) {
    return false;
  }
  if (IsDefined2(schema.exclusiveMinimum) && !(value3 > schema.exclusiveMinimum)) {
    return false;
  }
  if (IsDefined2(schema.maximum) && !(value3 <= schema.maximum)) {
    return false;
  }
  if (IsDefined2(schema.minimum) && !(value3 >= schema.minimum)) {
    return false;
  }
  if (IsDefined2(schema.multipleOf) && !(value3 % schema.multipleOf === BigInt(0))) {
    return false;
  }
  return true;
}
function FromBoolean3(schema, references, value3) {
  return IsBoolean(value3);
}
function FromConstructor3(schema, references, value3) {
  return Visit6(schema.returns, references, value3.prototype);
}
function FromDate3(schema, references, value3) {
  if (!IsDate(value3))
    return false;
  if (IsDefined2(schema.exclusiveMaximumTimestamp) && !(value3.getTime() < schema.exclusiveMaximumTimestamp)) {
    return false;
  }
  if (IsDefined2(schema.exclusiveMinimumTimestamp) && !(value3.getTime() > schema.exclusiveMinimumTimestamp)) {
    return false;
  }
  if (IsDefined2(schema.maximumTimestamp) && !(value3.getTime() <= schema.maximumTimestamp)) {
    return false;
  }
  if (IsDefined2(schema.minimumTimestamp) && !(value3.getTime() >= schema.minimumTimestamp)) {
    return false;
  }
  if (IsDefined2(schema.multipleOfTimestamp) && !(value3.getTime() % schema.multipleOfTimestamp === 0)) {
    return false;
  }
  return true;
}
function FromFunction3(schema, references, value3) {
  return IsFunction(value3);
}
function FromInteger3(schema, references, value3) {
  if (!IsInteger(value3)) {
    return false;
  }
  if (IsDefined2(schema.exclusiveMaximum) && !(value3 < schema.exclusiveMaximum)) {
    return false;
  }
  if (IsDefined2(schema.exclusiveMinimum) && !(value3 > schema.exclusiveMinimum)) {
    return false;
  }
  if (IsDefined2(schema.maximum) && !(value3 <= schema.maximum)) {
    return false;
  }
  if (IsDefined2(schema.minimum) && !(value3 >= schema.minimum)) {
    return false;
  }
  if (IsDefined2(schema.multipleOf) && !(value3 % schema.multipleOf === 0)) {
    return false;
  }
  return true;
}
function FromIntersect5(schema, references, value3) {
  const check1 = schema.allOf.every((schema2) => Visit6(schema2, references, value3));
  if (schema.unevaluatedProperties === false) {
    const keyPattern = new RegExp(KeyOfPattern(schema));
    const check2 = Object.getOwnPropertyNames(value3).every((key) => keyPattern.test(key));
    return check1 && check2;
  } else if (IsSchema2(schema.unevaluatedProperties)) {
    const keyCheck = new RegExp(KeyOfPattern(schema));
    const check2 = Object.getOwnPropertyNames(value3).every((key) => keyCheck.test(key) || Visit6(schema.unevaluatedProperties, references, value3[key]));
    return check1 && check2;
  } else {
    return check1;
  }
}
function FromIterator3(schema, references, value3) {
  return IsIterator(value3);
}
function FromLiteral4(schema, references, value3) {
  return value3 === schema.const;
}
function FromNever3(schema, references, value3) {
  return false;
}
function FromNot3(schema, references, value3) {
  return !Visit6(schema.not, references, value3);
}
function FromNull3(schema, references, value3) {
  return IsNull(value3);
}
function FromNumber3(schema, references, value3) {
  if (!TypeSystemPolicy.IsNumberLike(value3))
    return false;
  if (IsDefined2(schema.exclusiveMaximum) && !(value3 < schema.exclusiveMaximum)) {
    return false;
  }
  if (IsDefined2(schema.exclusiveMinimum) && !(value3 > schema.exclusiveMinimum)) {
    return false;
  }
  if (IsDefined2(schema.minimum) && !(value3 >= schema.minimum)) {
    return false;
  }
  if (IsDefined2(schema.maximum) && !(value3 <= schema.maximum)) {
    return false;
  }
  if (IsDefined2(schema.multipleOf) && !(value3 % schema.multipleOf === 0)) {
    return false;
  }
  return true;
}
function FromObject3(schema, references, value3) {
  if (!TypeSystemPolicy.IsObjectLike(value3))
    return false;
  if (IsDefined2(schema.minProperties) && !(Object.getOwnPropertyNames(value3).length >= schema.minProperties)) {
    return false;
  }
  if (IsDefined2(schema.maxProperties) && !(Object.getOwnPropertyNames(value3).length <= schema.maxProperties)) {
    return false;
  }
  const knownKeys = Object.getOwnPropertyNames(schema.properties);
  for (const knownKey of knownKeys) {
    const property = schema.properties[knownKey];
    if (schema.required && schema.required.includes(knownKey)) {
      if (!Visit6(property, references, value3[knownKey])) {
        return false;
      }
      if ((ExtendsUndefinedCheck(property) || IsAnyOrUnknown(property)) && !(knownKey in value3)) {
        return false;
      }
    } else {
      if (TypeSystemPolicy.IsExactOptionalProperty(value3, knownKey) && !Visit6(property, references, value3[knownKey])) {
        return false;
      }
    }
  }
  if (schema.additionalProperties === false) {
    const valueKeys = Object.getOwnPropertyNames(value3);
    if (schema.required && schema.required.length === knownKeys.length && valueKeys.length === knownKeys.length) {
      return true;
    } else {
      return valueKeys.every((valueKey) => knownKeys.includes(valueKey));
    }
  } else if (typeof schema.additionalProperties === "object") {
    const valueKeys = Object.getOwnPropertyNames(value3);
    return valueKeys.every((key) => knownKeys.includes(key) || Visit6(schema.additionalProperties, references, value3[key]));
  } else {
    return true;
  }
}
function FromPromise3(schema, references, value3) {
  return IsPromise(value3);
}
function FromRecord3(schema, references, value3) {
  if (!TypeSystemPolicy.IsRecordLike(value3)) {
    return false;
  }
  if (IsDefined2(schema.minProperties) && !(Object.getOwnPropertyNames(value3).length >= schema.minProperties)) {
    return false;
  }
  if (IsDefined2(schema.maxProperties) && !(Object.getOwnPropertyNames(value3).length <= schema.maxProperties)) {
    return false;
  }
  const [patternKey, patternSchema] = Object.entries(schema.patternProperties)[0];
  const regex = new RegExp(patternKey);
  const check1 = Object.entries(value3).every(([key, value4]) => {
    return regex.test(key) ? Visit6(patternSchema, references, value4) : true;
  });
  const check2 = typeof schema.additionalProperties === "object" ? Object.entries(value3).every(([key, value4]) => {
    return !regex.test(key) ? Visit6(schema.additionalProperties, references, value4) : true;
  }) : true;
  const check3 = schema.additionalProperties === false ? Object.getOwnPropertyNames(value3).every((key) => {
    return regex.test(key);
  }) : true;
  return check1 && check2 && check3;
}
function FromRef2(schema, references, value3) {
  return Visit6(Deref(schema, references), references, value3);
}
function FromRegExp3(schema, references, value3) {
  const regex = new RegExp(schema.source, schema.flags);
  if (IsDefined2(schema.minLength)) {
    if (!(value3.length >= schema.minLength))
      return false;
  }
  if (IsDefined2(schema.maxLength)) {
    if (!(value3.length <= schema.maxLength))
      return false;
  }
  return regex.test(value3);
}
function FromString3(schema, references, value3) {
  if (!IsString(value3)) {
    return false;
  }
  if (IsDefined2(schema.minLength)) {
    if (!(value3.length >= schema.minLength))
      return false;
  }
  if (IsDefined2(schema.maxLength)) {
    if (!(value3.length <= schema.maxLength))
      return false;
  }
  if (IsDefined2(schema.pattern)) {
    const regex = new RegExp(schema.pattern);
    if (!regex.test(value3))
      return false;
  }
  if (IsDefined2(schema.format)) {
    if (!exports_format.Has(schema.format))
      return false;
    const func = exports_format.Get(schema.format);
    return func(value3);
  }
  return true;
}
function FromSymbol3(schema, references, value3) {
  return IsSymbol(value3);
}
function FromTemplateLiteral4(schema, references, value3) {
  return IsString(value3) && new RegExp(schema.pattern).test(value3);
}
function FromThis2(schema, references, value3) {
  return Visit6(Deref(schema, references), references, value3);
}
function FromTuple5(schema, references, value3) {
  if (!IsArray(value3)) {
    return false;
  }
  if (schema.items === undefined && !(value3.length === 0)) {
    return false;
  }
  if (!(value3.length === schema.maxItems)) {
    return false;
  }
  if (!schema.items) {
    return true;
  }
  for (let i = 0;i < schema.items.length; i++) {
    if (!Visit6(schema.items[i], references, value3[i]))
      return false;
  }
  return true;
}
function FromUndefined3(schema, references, value3) {
  return IsUndefined(value3);
}
function FromUnion7(schema, references, value3) {
  return schema.anyOf.some((inner) => Visit6(inner, references, value3));
}
function FromUint8Array3(schema, references, value3) {
  if (!IsUint8Array(value3)) {
    return false;
  }
  if (IsDefined2(schema.maxByteLength) && !(value3.length <= schema.maxByteLength)) {
    return false;
  }
  if (IsDefined2(schema.minByteLength) && !(value3.length >= schema.minByteLength)) {
    return false;
  }
  return true;
}
function FromUnknown3(schema, references, value3) {
  return true;
}
function FromVoid3(schema, references, value3) {
  return TypeSystemPolicy.IsVoidLike(value3);
}
function FromKind2(schema, references, value3) {
  if (!exports_type.Has(schema[Kind]))
    return false;
  const func = exports_type.Get(schema[Kind]);
  return func(schema, value3);
}
function Visit6(schema, references, value3) {
  const references_ = IsDefined2(schema.$id) ? [...references, schema] : references;
  const schema_ = schema;
  switch (schema_[Kind]) {
    case "Any":
      return FromAny3(schema_, references_, value3);
    case "Array":
      return FromArray5(schema_, references_, value3);
    case "AsyncIterator":
      return FromAsyncIterator3(schema_, references_, value3);
    case "BigInt":
      return FromBigInt3(schema_, references_, value3);
    case "Boolean":
      return FromBoolean3(schema_, references_, value3);
    case "Constructor":
      return FromConstructor3(schema_, references_, value3);
    case "Date":
      return FromDate3(schema_, references_, value3);
    case "Function":
      return FromFunction3(schema_, references_, value3);
    case "Integer":
      return FromInteger3(schema_, references_, value3);
    case "Intersect":
      return FromIntersect5(schema_, references_, value3);
    case "Iterator":
      return FromIterator3(schema_, references_, value3);
    case "Literal":
      return FromLiteral4(schema_, references_, value3);
    case "Never":
      return FromNever3(schema_, references_, value3);
    case "Not":
      return FromNot3(schema_, references_, value3);
    case "Null":
      return FromNull3(schema_, references_, value3);
    case "Number":
      return FromNumber3(schema_, references_, value3);
    case "Object":
      return FromObject3(schema_, references_, value3);
    case "Promise":
      return FromPromise3(schema_, references_, value3);
    case "Record":
      return FromRecord3(schema_, references_, value3);
    case "Ref":
      return FromRef2(schema_, references_, value3);
    case "RegExp":
      return FromRegExp3(schema_, references_, value3);
    case "String":
      return FromString3(schema_, references_, value3);
    case "Symbol":
      return FromSymbol3(schema_, references_, value3);
    case "TemplateLiteral":
      return FromTemplateLiteral4(schema_, references_, value3);
    case "This":
      return FromThis2(schema_, references_, value3);
    case "Tuple":
      return FromTuple5(schema_, references_, value3);
    case "Undefined":
      return FromUndefined3(schema_, references_, value3);
    case "Union":
      return FromUnion7(schema_, references_, value3);
    case "Uint8Array":
      return FromUint8Array3(schema_, references_, value3);
    case "Unknown":
      return FromUnknown3(schema_, references_, value3);
    case "Void":
      return FromVoid3(schema_, references_, value3);
    default:
      if (!exports_type.Has(schema_[Kind]))
        throw new ValueCheckUnknownTypeError(schema_);
      return FromKind2(schema_, references_, value3);
  }
}
function Check(...args) {
  return args.length === 3 ? Visit6(args[0], args[1], args[2]) : Visit6(args[0], [], args[1]);
}

class ValueCheckUnknownTypeError extends TypeBoxError {
  constructor(schema) {
    super(`Unknown type`);
    this.schema = schema;
  }
}
// node_modules/@sinclair/typebox/build/esm/value/clone/clone.mjs
function ObjectType3(value3) {
  const Acc = {};
  for (const key of Object.getOwnPropertyNames(value3)) {
    Acc[key] = Clone2(value3[key]);
  }
  for (const key of Object.getOwnPropertySymbols(value3)) {
    Acc[key] = Clone2(value3[key]);
  }
  return Acc;
}
function ArrayType3(value3) {
  return value3.map((element) => Clone2(element));
}
function TypedArrayType(value3) {
  return value3.slice();
}
function DateType3(value3) {
  return new Date(value3.toISOString());
}
function ValueType(value3) {
  return value3;
}
function Clone2(value3) {
  if (IsArray(value3))
    return ArrayType3(value3);
  if (IsDate(value3))
    return DateType3(value3);
  if (IsStandardObject(value3))
    return ObjectType3(value3);
  if (IsTypedArray(value3))
    return TypedArrayType(value3);
  if (IsValueType(value3))
    return ValueType(value3);
  throw new Error("ValueClone: Unable to clone value");
}
// node_modules/@sinclair/typebox/build/esm/value/create/create.mjs
function FromDefault(value3) {
  return typeof value3 === "function" ? value3 : Clone2(value3);
}
function FromAny4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return {};
  }
}
function FromArray6(schema, references) {
  if (schema.uniqueItems === true && !HasPropertyKey(schema, "default")) {
    throw new ValueCreateError(schema, "Array with the uniqueItems constraint requires a default value");
  } else if ("contains" in schema && !HasPropertyKey(schema, "default")) {
    throw new ValueCreateError(schema, "Array with the contains constraint requires a default value");
  } else if ("default" in schema) {
    return FromDefault(schema.default);
  } else if (schema.minItems !== undefined) {
    return Array.from({ length: schema.minItems }).map((item) => {
      return Visit7(schema.items, references);
    });
  } else {
    return [];
  }
}
function FromAsyncIterator4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return async function* () {
    }();
  }
}
function FromBigInt4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return BigInt(0);
  }
}
function FromBoolean4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return false;
  }
}
function FromConstructor4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    const value3 = Visit7(schema.returns, references);
    if (typeof value3 === "object" && !Array.isArray(value3)) {
      return class {
        constructor() {
          for (const [key, val] of Object.entries(value3)) {
            const self = this;
            self[key] = val;
          }
        }
      };
    } else {
      return class {
      };
    }
  }
}
function FromDate4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else if (schema.minimumTimestamp !== undefined) {
    return new Date(schema.minimumTimestamp);
  } else {
    return new Date;
  }
}
function FromFunction4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return () => Visit7(schema.returns, references);
  }
}
function FromInteger4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else if (schema.minimum !== undefined) {
    return schema.minimum;
  } else {
    return 0;
  }
}
function FromIntersect6(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    const value3 = schema.allOf.reduce((acc, schema2) => {
      const next = Visit7(schema2, references);
      return typeof next === "object" ? { ...acc, ...next } : next;
    }, {});
    if (!Check(schema, references, value3))
      throw new ValueCreateError(schema, "Intersect produced invalid value. Consider using a default value.");
    return value3;
  }
}
function FromIterator4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return function* () {
    }();
  }
}
function FromLiteral5(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return schema.const;
  }
}
function FromNever4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    throw new ValueCreateError(schema, "Never types cannot be created. Consider using a default value.");
  }
}
function FromNot4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    throw new ValueCreateError(schema, "Not types must have a default value");
  }
}
function FromNull4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return null;
  }
}
function FromNumber4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else if (schema.minimum !== undefined) {
    return schema.minimum;
  } else {
    return 0;
  }
}
function FromObject4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    const required = new Set(schema.required);
    const Acc = {};
    for (const [key, subschema] of Object.entries(schema.properties)) {
      if (!required.has(key))
        continue;
      Acc[key] = Visit7(subschema, references);
    }
    return Acc;
  }
}
function FromPromise4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return Promise.resolve(Visit7(schema.item, references));
  }
}
function FromRecord4(schema, references) {
  const [keyPattern, valueSchema] = Object.entries(schema.patternProperties)[0];
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else if (!(keyPattern === PatternStringExact || keyPattern === PatternNumberExact)) {
    const propertyKeys = keyPattern.slice(1, keyPattern.length - 1).split("|");
    const Acc = {};
    for (const key of propertyKeys)
      Acc[key] = Visit7(valueSchema, references);
    return Acc;
  } else {
    return {};
  }
}
function FromRef3(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return Visit7(Deref(schema, references), references);
  }
}
function FromRegExp4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    throw new ValueCreateError(schema, "RegExp types cannot be created. Consider using a default value.");
  }
}
function FromString4(schema, references) {
  if (schema.pattern !== undefined) {
    if (!HasPropertyKey(schema, "default")) {
      throw new ValueCreateError(schema, "String types with patterns must specify a default value");
    } else {
      return FromDefault(schema.default);
    }
  } else if (schema.format !== undefined) {
    if (!HasPropertyKey(schema, "default")) {
      throw new ValueCreateError(schema, "String types with formats must specify a default value");
    } else {
      return FromDefault(schema.default);
    }
  } else {
    if (HasPropertyKey(schema, "default")) {
      return FromDefault(schema.default);
    } else if (schema.minLength !== undefined) {
      return Array.from({ length: schema.minLength }).map(() => " ").join("");
    } else {
      return "";
    }
  }
}
function FromSymbol4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else if ("value" in schema) {
    return Symbol.for(schema.value);
  } else {
    return Symbol();
  }
}
function FromTemplateLiteral5(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  }
  if (!IsTemplateLiteralFinite(schema))
    throw new ValueCreateError(schema, "Can only create template literals that produce a finite variants. Consider using a default value.");
  const generated = TemplateLiteralGenerate(schema);
  return generated[0];
}
function FromThis3(schema, references) {
  if (recursiveDepth++ > recursiveMaxDepth)
    throw new ValueCreateError(schema, "Cannot create recursive type as it appears possibly infinite. Consider using a default.");
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return Visit7(Deref(schema, references), references);
  }
}
function FromTuple6(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  }
  if (schema.items === undefined) {
    return [];
  } else {
    return Array.from({ length: schema.minItems }).map((_, index) => Visit7(schema.items[index], references));
  }
}
function FromUndefined4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return;
  }
}
function FromUnion8(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else if (schema.anyOf.length === 0) {
    throw new Error("ValueCreate.Union: Cannot create Union with zero variants");
  } else {
    return Visit7(schema.anyOf[0], references);
  }
}
function FromUint8Array4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else if (schema.minByteLength !== undefined) {
    return new Uint8Array(schema.minByteLength);
  } else {
    return new Uint8Array(0);
  }
}
function FromUnknown4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return {};
  }
}
function FromVoid4(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    return;
  }
}
function FromKind3(schema, references) {
  if (HasPropertyKey(schema, "default")) {
    return FromDefault(schema.default);
  } else {
    throw new Error("User defined types must specify a default value");
  }
}
function Visit7(schema, references) {
  const references_ = IsString(schema.$id) ? [...references, schema] : references;
  const schema_ = schema;
  switch (schema_[Kind]) {
    case "Any":
      return FromAny4(schema_, references_);
    case "Array":
      return FromArray6(schema_, references_);
    case "AsyncIterator":
      return FromAsyncIterator4(schema_, references_);
    case "BigInt":
      return FromBigInt4(schema_, references_);
    case "Boolean":
      return FromBoolean4(schema_, references_);
    case "Constructor":
      return FromConstructor4(schema_, references_);
    case "Date":
      return FromDate4(schema_, references_);
    case "Function":
      return FromFunction4(schema_, references_);
    case "Integer":
      return FromInteger4(schema_, references_);
    case "Intersect":
      return FromIntersect6(schema_, references_);
    case "Iterator":
      return FromIterator4(schema_, references_);
    case "Literal":
      return FromLiteral5(schema_, references_);
    case "Never":
      return FromNever4(schema_, references_);
    case "Not":
      return FromNot4(schema_, references_);
    case "Null":
      return FromNull4(schema_, references_);
    case "Number":
      return FromNumber4(schema_, references_);
    case "Object":
      return FromObject4(schema_, references_);
    case "Promise":
      return FromPromise4(schema_, references_);
    case "Record":
      return FromRecord4(schema_, references_);
    case "Ref":
      return FromRef3(schema_, references_);
    case "RegExp":
      return FromRegExp4(schema_, references_);
    case "String":
      return FromString4(schema_, references_);
    case "Symbol":
      return FromSymbol4(schema_, references_);
    case "TemplateLiteral":
      return FromTemplateLiteral5(schema_, references_);
    case "This":
      return FromThis3(schema_, references_);
    case "Tuple":
      return FromTuple6(schema_, references_);
    case "Undefined":
      return FromUndefined4(schema_, references_);
    case "Union":
      return FromUnion8(schema_, references_);
    case "Uint8Array":
      return FromUint8Array4(schema_, references_);
    case "Unknown":
      return FromUnknown4(schema_, references_);
    case "Void":
      return FromVoid4(schema_, references_);
    default:
      if (!exports_type.Has(schema_[Kind]))
        throw new ValueCreateError(schema_, "Unknown type");
      return FromKind3(schema_, references_);
  }
}
function Create2(...args) {
  recursiveDepth = 0;
  return args.length === 2 ? Visit7(args[0], args[1]) : Visit7(args[0], []);
}

class ValueCreateError extends TypeBoxError {
  constructor(schema, message) {
    super(message);
    this.schema = schema;
  }
}
var recursiveMaxDepth = 512;
var recursiveDepth = 0;
// node_modules/@sinclair/typebox/build/esm/value/cast/cast.mjs
function ScoreUnion(schema, references, value3) {
  if (schema[Kind] === "Object" && typeof value3 === "object" && !IsNull(value3)) {
    const object3 = schema;
    const keys = Object.getOwnPropertyNames(value3);
    const entries = Object.entries(object3.properties);
    const [point, max] = [1 / entries.length, entries.length];
    return entries.reduce((acc, [key, schema2]) => {
      const literal7 = schema2[Kind] === "Literal" && schema2.const === value3[key] ? max : 0;
      const checks = Check(schema2, references, value3[key]) ? point : 0;
      const exists = keys.includes(key) ? point : 0;
      return acc + (literal7 + checks + exists);
    }, 0);
  } else {
    return Check(schema, references, value3) ? 1 : 0;
  }
}
function SelectUnion(union9, references, value3) {
  const schemas = union9.anyOf.map((schema) => Deref(schema, references));
  let [select, best] = [schemas[0], 0];
  for (const schema of schemas) {
    const score = ScoreUnion(schema, references, value3);
    if (score > best) {
      select = schema;
      best = score;
    }
  }
  return select;
}
function CastUnion(union9, references, value3) {
  if ("default" in union9) {
    return typeof value3 === "function" ? union9.default : Clone2(union9.default);
  } else {
    const schema = SelectUnion(union9, references, value3);
    return Cast(schema, references, value3);
  }
}
function DefaultClone(schema, references, value3) {
  return Check(schema, references, value3) ? Clone2(value3) : Create2(schema, references);
}
function Default(schema, references, value3) {
  return Check(schema, references, value3) ? value3 : Create2(schema, references);
}
function FromArray7(schema, references, value3) {
  if (Check(schema, references, value3))
    return Clone2(value3);
  const created = IsArray(value3) ? Clone2(value3) : Create2(schema, references);
  const minimum = IsNumber(schema.minItems) && created.length < schema.minItems ? [...created, ...Array.from({ length: schema.minItems - created.length }, () => null)] : created;
  const maximum = IsNumber(schema.maxItems) && minimum.length > schema.maxItems ? minimum.slice(0, schema.maxItems) : minimum;
  const casted = maximum.map((value4) => Visit8(schema.items, references, value4));
  if (schema.uniqueItems !== true)
    return casted;
  const unique = [...new Set(casted)];
  if (!Check(schema, references, unique))
    throw new ValueCastError(schema, "Array cast produced invalid data due to uniqueItems constraint");
  return unique;
}
function FromConstructor5(schema, references, value3) {
  if (Check(schema, references, value3))
    return Create2(schema, references);
  const required = new Set(schema.returns.required || []);
  const result = function() {
  };
  for (const [key, property] of Object.entries(schema.returns.properties)) {
    if (!required.has(key) && value3.prototype[key] === undefined)
      continue;
    result.prototype[key] = Visit8(property, references, value3.prototype[key]);
  }
  return result;
}
function FromIntersect7(schema, references, value3) {
  const created = Create2(schema, references);
  const mapped9 = IsStandardObject(created) && IsStandardObject(value3) ? { ...created, ...value3 } : value3;
  return Check(schema, references, mapped9) ? mapped9 : Create2(schema, references);
}
function FromNever5(schema, references, value3) {
  throw new ValueCastError(schema, "Never types cannot be cast");
}
function FromObject5(schema, references, value3) {
  if (Check(schema, references, value3))
    return value3;
  if (value3 === null || typeof value3 !== "object")
    return Create2(schema, references);
  const required = new Set(schema.required || []);
  const result = {};
  for (const [key, property] of Object.entries(schema.properties)) {
    if (!required.has(key) && value3[key] === undefined)
      continue;
    result[key] = Visit8(property, references, value3[key]);
  }
  if (typeof schema.additionalProperties === "object") {
    const propertyNames = Object.getOwnPropertyNames(schema.properties);
    for (const propertyName of Object.getOwnPropertyNames(value3)) {
      if (propertyNames.includes(propertyName))
        continue;
      result[propertyName] = Visit8(schema.additionalProperties, references, value3[propertyName]);
    }
  }
  return result;
}
function FromRecord5(schema, references, value3) {
  if (Check(schema, references, value3))
    return Clone2(value3);
  if (value3 === null || typeof value3 !== "object" || Array.isArray(value3) || value3 instanceof Date)
    return Create2(schema, references);
  const subschemaPropertyName = Object.getOwnPropertyNames(schema.patternProperties)[0];
  const subschema = schema.patternProperties[subschemaPropertyName];
  const result = {};
  for (const [propKey, propValue] of Object.entries(value3)) {
    result[propKey] = Visit8(subschema, references, propValue);
  }
  return result;
}
function FromRef4(schema, references, value3) {
  return Visit8(Deref(schema, references), references, value3);
}
function FromThis4(schema, references, value3) {
  return Visit8(Deref(schema, references), references, value3);
}
function FromTuple7(schema, references, value3) {
  if (Check(schema, references, value3))
    return Clone2(value3);
  if (!IsArray(value3))
    return Create2(schema, references);
  if (schema.items === undefined)
    return [];
  return schema.items.map((schema2, index) => Visit8(schema2, references, value3[index]));
}
function FromUnion9(schema, references, value3) {
  return Check(schema, references, value3) ? Clone2(value3) : CastUnion(schema, references, value3);
}
function Visit8(schema, references, value3) {
  const references_ = IsString(schema.$id) ? [...references, schema] : references;
  const schema_ = schema;
  switch (schema[Kind]) {
    case "Array":
      return FromArray7(schema_, references_, value3);
    case "Constructor":
      return FromConstructor5(schema_, references_, value3);
    case "Intersect":
      return FromIntersect7(schema_, references_, value3);
    case "Never":
      return FromNever5(schema_, references_, value3);
    case "Object":
      return FromObject5(schema_, references_, value3);
    case "Record":
      return FromRecord5(schema_, references_, value3);
    case "Ref":
      return FromRef4(schema_, references_, value3);
    case "This":
      return FromThis4(schema_, references_, value3);
    case "Tuple":
      return FromTuple7(schema_, references_, value3);
    case "Union":
      return FromUnion9(schema_, references_, value3);
    case "Date":
    case "Symbol":
    case "Uint8Array":
      return DefaultClone(schema, references, value3);
    default:
      return Default(schema_, references_, value3);
  }
}
function Cast(...args) {
  return args.length === 3 ? Visit8(args[0], args[1], args[2]) : Visit8(args[0], [], args[1]);
}

class ValueCastError extends TypeBoxError {
  constructor(schema, message) {
    super(message);
    this.schema = schema;
  }
}
// node_modules/@sinclair/typebox/build/esm/value/clean/clean.mjs
function IsCheckable(schema) {
  return IsSchema2(schema) && schema[Kind] !== "Unsafe";
}
function FromArray8(schema, references, value3) {
  if (!IsArray(value3))
    return value3;
  return value3.map((value4) => Visit9(schema.items, references, value4));
}
function FromIntersect8(schema, references, value3) {
  const unevaluatedProperties = schema.unevaluatedProperties;
  const intersections = schema.allOf.map((schema2) => Visit9(schema2, references, Clone2(value3)));
  const composite = intersections.reduce((acc, value4) => IsObject(value4) ? { ...acc, ...value4 } : value4, {});
  if (!IsObject(value3) || !IsObject(composite) || !IsSchema2(unevaluatedProperties))
    return composite;
  const knownkeys = KeyOfPropertyKeys(schema);
  for (const key of Object.getOwnPropertyNames(value3)) {
    if (knownkeys.includes(key))
      continue;
    if (Check(unevaluatedProperties, references, value3[key])) {
      composite[key] = Visit9(unevaluatedProperties, references, value3[key]);
    }
  }
  return composite;
}
function FromObject6(schema, references, value3) {
  if (!IsObject(value3) || IsArray(value3))
    return value3;
  const additionalProperties = schema.additionalProperties;
  for (const key of Object.getOwnPropertyNames(value3)) {
    if (key in schema.properties) {
      value3[key] = Visit9(schema.properties[key], references, value3[key]);
      continue;
    }
    if (IsSchema2(additionalProperties) && Check(additionalProperties, references, value3[key])) {
      value3[key] = Visit9(additionalProperties, references, value3[key]);
      continue;
    }
    delete value3[key];
  }
  return value3;
}
function FromRecord6(schema, references, value3) {
  if (!IsObject(value3))
    return value3;
  const additionalProperties = schema.additionalProperties;
  const propertyKeys = Object.getOwnPropertyNames(value3);
  const [propertyKey, propertySchema] = Object.entries(schema.patternProperties)[0];
  const propertyKeyTest = new RegExp(propertyKey);
  for (const key of propertyKeys) {
    if (propertyKeyTest.test(key)) {
      value3[key] = Visit9(propertySchema, references, value3[key]);
      continue;
    }
    if (IsSchema2(additionalProperties) && Check(additionalProperties, references, value3[key])) {
      value3[key] = Visit9(additionalProperties, references, value3[key]);
      continue;
    }
    delete value3[key];
  }
  return value3;
}
function FromRef5(schema, references, value3) {
  return Visit9(Deref(schema, references), references, value3);
}
function FromThis5(schema, references, value3) {
  return Visit9(Deref(schema, references), references, value3);
}
function FromTuple8(schema, references, value3) {
  if (!IsArray(value3))
    return value3;
  if (IsUndefined(schema.items))
    return [];
  const length = Math.min(value3.length, schema.items.length);
  for (let i = 0;i < length; i++) {
    value3[i] = Visit9(schema.items[i], references, value3[i]);
  }
  return value3.length > length ? value3.slice(0, length) : value3;
}
function FromUnion10(schema, references, value3) {
  for (const inner of schema.anyOf) {
    if (IsCheckable(inner) && Check(inner, references, value3)) {
      return Visit9(inner, references, value3);
    }
  }
  return value3;
}
function Visit9(schema, references, value3) {
  const references_ = IsString(schema.$id) ? [...references, schema] : references;
  const schema_ = schema;
  switch (schema_[Kind]) {
    case "Array":
      return FromArray8(schema_, references_, value3);
    case "Intersect":
      return FromIntersect8(schema_, references_, value3);
    case "Object":
      return FromObject6(schema_, references_, value3);
    case "Record":
      return FromRecord6(schema_, references_, value3);
    case "Ref":
      return FromRef5(schema_, references_, value3);
    case "This":
      return FromThis5(schema_, references_, value3);
    case "Tuple":
      return FromTuple8(schema_, references_, value3);
    case "Union":
      return FromUnion10(schema_, references_, value3);
    default:
      return value3;
  }
}
function Clean(...args) {
  return args.length === 3 ? Visit9(args[0], args[1], args[2]) : Visit9(args[0], [], args[1]);
}
// node_modules/@sinclair/typebox/build/esm/value/convert/convert.mjs
function IsStringNumeric(value3) {
  return IsString(value3) && !isNaN(value3) && !isNaN(parseFloat(value3));
}
function IsValueToString(value3) {
  return IsBigInt(value3) || IsBoolean(value3) || IsNumber(value3);
}
function IsValueTrue(value3) {
  return value3 === true || IsNumber(value3) && value3 === 1 || IsBigInt(value3) && value3 === BigInt("1") || IsString(value3) && (value3.toLowerCase() === "true" || value3 === "1");
}
function IsValueFalse(value3) {
  return value3 === false || IsNumber(value3) && (value3 === 0 || Object.is(value3, -0)) || IsBigInt(value3) && value3 === BigInt("0") || IsString(value3) && (value3.toLowerCase() === "false" || value3 === "0" || value3 === "-0");
}
function IsTimeStringWithTimeZone(value3) {
  return IsString(value3) && /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i.test(value3);
}
function IsTimeStringWithoutTimeZone(value3) {
  return IsString(value3) && /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)?$/i.test(value3);
}
function IsDateTimeStringWithTimeZone(value3) {
  return IsString(value3) && /^\d\d\d\d-[0-1]\d-[0-3]\dt(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i.test(value3);
}
function IsDateTimeStringWithoutTimeZone(value3) {
  return IsString(value3) && /^\d\d\d\d-[0-1]\d-[0-3]\dt(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)?$/i.test(value3);
}
function IsDateString(value3) {
  return IsString(value3) && /^\d\d\d\d-[0-1]\d-[0-3]\d$/i.test(value3);
}
function TryConvertLiteralString(value3, target) {
  const conversion = TryConvertString(value3);
  return conversion === target ? conversion : value3;
}
function TryConvertLiteralNumber(value3, target) {
  const conversion = TryConvertNumber(value3);
  return conversion === target ? conversion : value3;
}
function TryConvertLiteralBoolean(value3, target) {
  const conversion = TryConvertBoolean(value3);
  return conversion === target ? conversion : value3;
}
function TryConvertLiteral(schema, value3) {
  return IsString(schema.const) ? TryConvertLiteralString(value3, schema.const) : IsNumber(schema.const) ? TryConvertLiteralNumber(value3, schema.const) : IsBoolean(schema.const) ? TryConvertLiteralBoolean(value3, schema.const) : Clone2(value3);
}
function TryConvertBoolean(value3) {
  return IsValueTrue(value3) ? true : IsValueFalse(value3) ? false : value3;
}
function TryConvertBigInt(value3) {
  return IsStringNumeric(value3) ? BigInt(parseInt(value3)) : IsNumber(value3) ? BigInt(value3 | 0) : IsValueFalse(value3) ? BigInt(0) : IsValueTrue(value3) ? BigInt(1) : value3;
}
function TryConvertString(value3) {
  return IsValueToString(value3) ? value3.toString() : IsSymbol(value3) && value3.description !== undefined ? value3.description.toString() : value3;
}
function TryConvertNumber(value3) {
  return IsStringNumeric(value3) ? parseFloat(value3) : IsValueTrue(value3) ? 1 : IsValueFalse(value3) ? 0 : value3;
}
function TryConvertInteger(value3) {
  return IsStringNumeric(value3) ? parseInt(value3) : IsNumber(value3) ? value3 | 0 : IsValueTrue(value3) ? 1 : IsValueFalse(value3) ? 0 : value3;
}
function TryConvertNull(value3) {
  return IsString(value3) && value3.toLowerCase() === "null" ? null : value3;
}
function TryConvertUndefined(value3) {
  return IsString(value3) && value3 === "undefined" ? undefined : value3;
}
function TryConvertDate(value3) {
  return IsDate(value3) ? value3 : IsNumber(value3) ? new Date(value3) : IsValueTrue(value3) ? new Date(1) : IsValueFalse(value3) ? new Date(0) : IsStringNumeric(value3) ? new Date(parseInt(value3)) : IsTimeStringWithoutTimeZone(value3) ? new Date(`1970-01-01T${value3}.000Z`) : IsTimeStringWithTimeZone(value3) ? new Date(`1970-01-01T${value3}`) : IsDateTimeStringWithoutTimeZone(value3) ? new Date(`${value3}.000Z`) : IsDateTimeStringWithTimeZone(value3) ? new Date(value3) : IsDateString(value3) ? new Date(`${value3}T00:00:00.000Z`) : value3;
}
function Default2(value3) {
  return value3;
}
function FromArray9(schema, references, value3) {
  const elements = IsArray(value3) ? value3 : [value3];
  return elements.map((element) => Visit10(schema.items, references, element));
}
function FromBigInt5(schema, references, value3) {
  return TryConvertBigInt(value3);
}
function FromBoolean5(schema, references, value3) {
  return TryConvertBoolean(value3);
}
function FromDate5(schema, references, value3) {
  return TryConvertDate(value3);
}
function FromInteger5(schema, references, value3) {
  return TryConvertInteger(value3);
}
function FromIntersect9(schema, references, value3) {
  return schema.allOf.reduce((value4, schema2) => Visit10(schema2, references, value4), value3);
}
function FromLiteral6(schema, references, value3) {
  return TryConvertLiteral(schema, value3);
}
function FromNull5(schema, references, value3) {
  return TryConvertNull(value3);
}
function FromNumber5(schema, references, value3) {
  return TryConvertNumber(value3);
}
function FromObject7(schema, references, value3) {
  const isConvertable = IsObject(value3);
  if (!isConvertable)
    return value3;
  const result = {};
  for (const key of Object.keys(value3)) {
    result[key] = HasPropertyKey(schema.properties, key) ? Visit10(schema.properties[key], references, value3[key]) : value3[key];
  }
  return result;
}
function FromRecord7(schema, references, value3) {
  const propertyKey = Object.getOwnPropertyNames(schema.patternProperties)[0];
  const property = schema.patternProperties[propertyKey];
  const result = {};
  for (const [propKey, propValue] of Object.entries(value3)) {
    result[propKey] = Visit10(property, references, propValue);
  }
  return result;
}
function FromRef6(schema, references, value3) {
  return Visit10(Deref(schema, references), references, value3);
}
function FromString5(schema, references, value3) {
  return TryConvertString(value3);
}
function FromSymbol5(schema, references, value3) {
  return IsString(value3) || IsNumber(value3) ? Symbol(value3) : value3;
}
function FromThis6(schema, references, value3) {
  return Visit10(Deref(schema, references), references, value3);
}
function FromTuple9(schema, references, value3) {
  const isConvertable = IsArray(value3) && !IsUndefined(schema.items);
  if (!isConvertable)
    return value3;
  return value3.map((value4, index) => {
    return index < schema.items.length ? Visit10(schema.items[index], references, value4) : value4;
  });
}
function FromUndefined5(schema, references, value3) {
  return TryConvertUndefined(value3);
}
function FromUnion11(schema, references, value3) {
  for (const subschema of schema.anyOf) {
    const converted = Visit10(subschema, references, value3);
    if (!Check(subschema, references, converted))
      continue;
    return converted;
  }
  return value3;
}
function Visit10(schema, references, value3) {
  const references_ = IsString(schema.$id) ? [...references, schema] : references;
  const schema_ = schema;
  switch (schema[Kind]) {
    case "Array":
      return FromArray9(schema_, references_, value3);
    case "BigInt":
      return FromBigInt5(schema_, references_, value3);
    case "Boolean":
      return FromBoolean5(schema_, references_, value3);
    case "Date":
      return FromDate5(schema_, references_, value3);
    case "Integer":
      return FromInteger5(schema_, references_, value3);
    case "Intersect":
      return FromIntersect9(schema_, references_, value3);
    case "Literal":
      return FromLiteral6(schema_, references_, value3);
    case "Null":
      return FromNull5(schema_, references_, value3);
    case "Number":
      return FromNumber5(schema_, references_, value3);
    case "Object":
      return FromObject7(schema_, references_, value3);
    case "Record":
      return FromRecord7(schema_, references_, value3);
    case "Ref":
      return FromRef6(schema_, references_, value3);
    case "String":
      return FromString5(schema_, references_, value3);
    case "Symbol":
      return FromSymbol5(schema_, references_, value3);
    case "This":
      return FromThis6(schema_, references_, value3);
    case "Tuple":
      return FromTuple9(schema_, references_, value3);
    case "Undefined":
      return FromUndefined5(schema_, references_, value3);
    case "Union":
      return FromUnion11(schema_, references_, value3);
    default:
      return Default2(value3);
  }
}
function Convert(...args) {
  return args.length === 3 ? Visit10(args[0], args[1], args[2]) : Visit10(args[0], [], args[1]);
}
// node_modules/@sinclair/typebox/build/esm/value/default/default.mjs
function ValueOrDefault(schema, value3) {
  return value3 === undefined && "default" in schema ? Clone2(schema.default) : value3;
}
function IsCheckable2(schema) {
  return IsSchema2(schema) && schema[Kind] !== "Unsafe";
}
function IsDefaultSchema(value3) {
  return IsSchema2(value3) && "default" in value3;
}
function FromArray10(schema, references, value3) {
  const defaulted = ValueOrDefault(schema, value3);
  if (!IsArray(defaulted))
    return defaulted;
  for (let i = 0;i < defaulted.length; i++) {
    defaulted[i] = Visit11(schema.items, references, defaulted[i]);
  }
  return defaulted;
}
function FromIntersect10(schema, references, value3) {
  const defaulted = ValueOrDefault(schema, value3);
  return schema.allOf.reduce((acc, schema2) => {
    const next = Visit11(schema2, references, defaulted);
    return IsObject(next) ? { ...acc, ...next } : next;
  }, {});
}
function FromObject8(schema, references, value3) {
  const defaulted = ValueOrDefault(schema, value3);
  if (!IsObject(defaulted))
    return defaulted;
  const additionalPropertiesSchema = schema.additionalProperties;
  const knownPropertyKeys = Object.getOwnPropertyNames(schema.properties);
  for (const key of knownPropertyKeys) {
    if (!IsDefaultSchema(schema.properties[key]))
      continue;
    defaulted[key] = Visit11(schema.properties[key], references, defaulted[key]);
  }
  if (!IsDefaultSchema(additionalPropertiesSchema))
    return defaulted;
  for (const key of Object.getOwnPropertyNames(defaulted)) {
    if (knownPropertyKeys.includes(key))
      continue;
    defaulted[key] = Visit11(additionalPropertiesSchema, references, defaulted[key]);
  }
  return defaulted;
}
function FromRecord8(schema, references, value3) {
  const defaulted = ValueOrDefault(schema, value3);
  if (!IsObject(defaulted))
    return defaulted;
  const additionalPropertiesSchema = schema.additionalProperties;
  const [propertyKeyPattern, propertySchema] = Object.entries(schema.patternProperties)[0];
  const knownPropertyKey = new RegExp(propertyKeyPattern);
  for (const key of Object.getOwnPropertyNames(defaulted)) {
    if (!(knownPropertyKey.test(key) && IsDefaultSchema(propertySchema)))
      continue;
    defaulted[key] = Visit11(propertySchema, references, defaulted[key]);
  }
  if (!IsDefaultSchema(additionalPropertiesSchema))
    return defaulted;
  for (const key of Object.getOwnPropertyNames(defaulted)) {
    if (knownPropertyKey.test(key))
      continue;
    defaulted[key] = Visit11(additionalPropertiesSchema, references, defaulted[key]);
  }
  return defaulted;
}
function FromRef7(schema, references, value3) {
  return Visit11(Deref(schema, references), references, ValueOrDefault(schema, value3));
}
function FromThis7(schema, references, value3) {
  return Visit11(Deref(schema, references), references, value3);
}
function FromTuple10(schema, references, value3) {
  const defaulted = ValueOrDefault(schema, value3);
  if (!IsArray(defaulted) || IsUndefined(schema.items))
    return defaulted;
  const [items, max] = [schema.items, Math.max(schema.items.length, defaulted.length)];
  for (let i = 0;i < max; i++) {
    if (i < items.length)
      defaulted[i] = Visit11(items[i], references, defaulted[i]);
  }
  return defaulted;
}
function FromUnion12(schema, references, value3) {
  const defaulted = ValueOrDefault(schema, value3);
  for (const inner of schema.anyOf) {
    const result = Visit11(inner, references, defaulted);
    if (IsCheckable2(inner) && Check(inner, result)) {
      return result;
    }
  }
  return defaulted;
}
function Visit11(schema, references, value3) {
  const references_ = IsString(schema.$id) ? [...references, schema] : references;
  const schema_ = schema;
  switch (schema_[Kind]) {
    case "Array":
      return FromArray10(schema_, references_, value3);
    case "Intersect":
      return FromIntersect10(schema_, references_, value3);
    case "Object":
      return FromObject8(schema_, references_, value3);
    case "Record":
      return FromRecord8(schema_, references_, value3);
    case "Ref":
      return FromRef7(schema_, references_, value3);
    case "This":
      return FromThis7(schema_, references_, value3);
    case "Tuple":
      return FromTuple10(schema_, references_, value3);
    case "Union":
      return FromUnion12(schema_, references_, value3);
    default:
      return ValueOrDefault(schema_, value3);
  }
}
function Default3(...args) {
  return args.length === 3 ? Visit11(args[0], args[1], args[2]) : Visit11(args[0], [], args[1]);
}
// node_modules/@sinclair/typebox/build/esm/value/pointer/pointer.mjs
var exports_pointer = {};
__export(exports_pointer, {
  ValuePointerRootSetError: () => ValuePointerRootSetError,
  ValuePointerRootDeleteError: () => ValuePointerRootDeleteError,
  Set: () => Set4,
  Has: () => Has3,
  Get: () => Get3,
  Format: () => Format,
  Delete: () => Delete3
});
function Escape2(component) {
  return component.indexOf("~") === -1 ? component : component.replace(/~1/g, "/").replace(/~0/g, "~");
}
function* Format(pointer) {
  if (pointer === "")
    return;
  let [start, end] = [0, 0];
  for (let i = 0;i < pointer.length; i++) {
    const char = pointer.charAt(i);
    if (char === "/") {
      if (i === 0) {
        start = i + 1;
      } else {
        end = i;
        yield Escape2(pointer.slice(start, end));
        start = i + 1;
      }
    } else {
      end = i;
    }
  }
  yield Escape2(pointer.slice(start));
}
function Set4(value3, pointer, update) {
  if (pointer === "")
    throw new ValuePointerRootSetError(value3, pointer, update);
  let [owner, next, key] = [null, value3, ""];
  for (const component of Format(pointer)) {
    if (next[component] === undefined)
      next[component] = {};
    owner = next;
    next = next[component];
    key = component;
  }
  owner[key] = update;
}
function Delete3(value3, pointer) {
  if (pointer === "")
    throw new ValuePointerRootDeleteError(value3, pointer);
  let [owner, next, key] = [null, value3, ""];
  for (const component of Format(pointer)) {
    if (next[component] === undefined || next[component] === null)
      return;
    owner = next;
    next = next[component];
    key = component;
  }
  if (Array.isArray(owner)) {
    const index = parseInt(key);
    owner.splice(index, 1);
  } else {
    delete owner[key];
  }
}
function Has3(value3, pointer) {
  if (pointer === "")
    return true;
  let [owner, next, key] = [null, value3, ""];
  for (const component of Format(pointer)) {
    if (next[component] === undefined)
      return false;
    owner = next;
    next = next[component];
    key = component;
  }
  return Object.getOwnPropertyNames(owner).includes(key);
}
function Get3(value3, pointer) {
  if (pointer === "")
    return value3;
  let current = value3;
  for (const component of Format(pointer)) {
    if (current[component] === undefined)
      return;
    current = current[component];
  }
  return current;
}

class ValuePointerRootSetError extends TypeBoxError {
  constructor(value3, path, update) {
    super("Cannot set root value");
    this.value = value3;
    this.path = path;
    this.update = update;
  }
}

class ValuePointerRootDeleteError extends TypeBoxError {
  constructor(value3, path) {
    super("Cannot delete root value");
    this.value = value3;
    this.path = path;
  }
}
// node_modules/@sinclair/typebox/build/esm/value/delta/delta.mjs
function CreateUpdate(path, value3) {
  return { type: "update", path, value: value3 };
}
function CreateInsert(path, value3) {
  return { type: "insert", path, value: value3 };
}
function CreateDelete(path) {
  return { type: "delete", path };
}
function* ObjectType4(path, current, next) {
  if (!IsStandardObject(next))
    return yield CreateUpdate(path, next);
  const currentKeys = [...globalThis.Object.keys(current), ...globalThis.Object.getOwnPropertySymbols(current)];
  const nextKeys = [...globalThis.Object.keys(next), ...globalThis.Object.getOwnPropertySymbols(next)];
  for (const key of currentKeys) {
    if (IsSymbol(key))
      throw new ValueDeltaSymbolError(key);
    if (IsUndefined(next[key]) && nextKeys.includes(key))
      yield CreateUpdate(`${path}/${globalThis.String(key)}`, undefined);
  }
  for (const key of nextKeys) {
    if (IsUndefined(current[key]) || IsUndefined(next[key]))
      continue;
    if (IsSymbol(key))
      throw new ValueDeltaSymbolError(key);
    yield* Visit12(`${path}/${globalThis.String(key)}`, current[key], next[key]);
  }
  for (const key of nextKeys) {
    if (IsSymbol(key))
      throw new ValueDeltaSymbolError(key);
    if (IsUndefined(current[key]))
      yield CreateInsert(`${path}/${globalThis.String(key)}`, next[key]);
  }
  for (const key of currentKeys.reverse()) {
    if (IsSymbol(key))
      throw new ValueDeltaSymbolError(key);
    if (IsUndefined(next[key]) && !nextKeys.includes(key))
      yield CreateDelete(`${path}/${globalThis.String(key)}`);
  }
}
function* ArrayType4(path, current, next) {
  if (!IsArray(next))
    return yield CreateUpdate(path, next);
  for (let i = 0;i < Math.min(current.length, next.length); i++) {
    yield* Visit12(`${path}/${i}`, current[i], next[i]);
  }
  for (let i = 0;i < next.length; i++) {
    if (i < current.length)
      continue;
    yield CreateInsert(`${path}/${i}`, next[i]);
  }
  for (let i = current.length - 1;i >= 0; i--) {
    if (i < next.length)
      continue;
    yield CreateDelete(`${path}/${i}`);
  }
}
function* TypedArrayType2(path, current, next) {
  if (!IsTypedArray(next) || current.length !== next.length || globalThis.Object.getPrototypeOf(current).constructor.name !== globalThis.Object.getPrototypeOf(next).constructor.name)
    return yield CreateUpdate(path, next);
  for (let i = 0;i < Math.min(current.length, next.length); i++) {
    yield* Visit12(`${path}/${i}`, current[i], next[i]);
  }
}
function* ValueType2(path, current, next) {
  if (current === next)
    return;
  yield CreateUpdate(path, next);
}
function* Visit12(path, current, next) {
  if (IsStandardObject(current))
    return yield* ObjectType4(path, current, next);
  if (IsArray(current))
    return yield* ArrayType4(path, current, next);
  if (IsTypedArray(current))
    return yield* TypedArrayType2(path, current, next);
  if (IsValueType(current))
    return yield* ValueType2(path, current, next);
  throw new ValueDeltaError(current, "Unable to create diff edits for unknown value");
}
function Diff(current, next) {
  return [...Visit12("", current, next)];
}
function IsRootUpdate(edits) {
  return edits.length > 0 && edits[0].path === "" && edits[0].type === "update";
}
function IsIdentity(edits) {
  return edits.length === 0;
}
function Patch(current, edits) {
  if (IsRootUpdate(edits)) {
    return Clone2(edits[0].value);
  }
  if (IsIdentity(edits)) {
    return Clone2(current);
  }
  const clone8 = Clone2(current);
  for (const edit of edits) {
    switch (edit.type) {
      case "insert": {
        exports_pointer.Set(clone8, edit.path, edit.value);
        break;
      }
      case "update": {
        exports_pointer.Set(clone8, edit.path, edit.value);
        break;
      }
      case "delete": {
        exports_pointer.Delete(clone8, edit.path);
        break;
      }
    }
  }
  return clone8;
}
var Insert = Object2({
  type: Literal("insert"),
  path: String2(),
  value: Unknown()
});
var Update = Object2({
  type: Literal("update"),
  path: String2(),
  value: Unknown()
});
var Delete4 = Object2({
  type: Literal("delete"),
  path: String2()
});
var Edit = Union([Insert, Update, Delete4]);

class ValueDeltaError extends TypeBoxError {
  constructor(value3, message) {
    super(message);
    this.value = value3;
  }
}

class ValueDeltaSymbolError extends ValueDeltaError {
  constructor(value3) {
    super(value3, "Cannot diff objects with symbol keys");
    this.value = value3;
  }
}
// node_modules/@sinclair/typebox/build/esm/value/equal/equal.mjs
function ObjectType5(left, right) {
  if (!IsStandardObject(right))
    return false;
  const leftKeys = [...Object.keys(left), ...Object.getOwnPropertySymbols(left)];
  const rightKeys = [...Object.keys(right), ...Object.getOwnPropertySymbols(right)];
  if (leftKeys.length !== rightKeys.length)
    return false;
  return leftKeys.every((key) => Equal(left[key], right[key]));
}
function DateType4(left, right) {
  return IsDate(right) && left.getTime() === right.getTime();
}
function ArrayType5(left, right) {
  if (!IsArray(right) || left.length !== right.length)
    return false;
  return left.every((value3, index) => Equal(value3, right[index]));
}
function TypedArrayType3(left, right) {
  if (!IsTypedArray(right) || left.length !== right.length || Object.getPrototypeOf(left).constructor.name !== Object.getPrototypeOf(right).constructor.name)
    return false;
  return left.every((value3, index) => Equal(value3, right[index]));
}
function ValueType3(left, right) {
  return left === right;
}
function Equal(left, right) {
  if (IsStandardObject(left))
    return ObjectType5(left, right);
  if (IsDate(left))
    return DateType4(left, right);
  if (IsTypedArray(left))
    return TypedArrayType3(left, right);
  if (IsArray(left))
    return ArrayType5(left, right);
  if (IsValueType(left))
    return ValueType3(left, right);
  throw new Error("ValueEquals: Unable to compare value");
}
// node_modules/@sinclair/typebox/build/esm/value/mutate/mutate.mjs
function ObjectType6(root, path, current, next) {
  if (!IsStandardObject(current)) {
    exports_pointer.Set(root, path, Clone2(next));
  } else {
    const currentKeys = Object.getOwnPropertyNames(current);
    const nextKeys = Object.getOwnPropertyNames(next);
    for (const currentKey of currentKeys) {
      if (!nextKeys.includes(currentKey)) {
        delete current[currentKey];
      }
    }
    for (const nextKey of nextKeys) {
      if (!currentKeys.includes(nextKey)) {
        current[nextKey] = null;
      }
    }
    for (const nextKey of nextKeys) {
      Visit13(root, `${path}/${nextKey}`, current[nextKey], next[nextKey]);
    }
  }
}
function ArrayType6(root, path, current, next) {
  if (!IsArray(current)) {
    exports_pointer.Set(root, path, Clone2(next));
  } else {
    for (let index = 0;index < next.length; index++) {
      Visit13(root, `${path}/${index}`, current[index], next[index]);
    }
    current.splice(next.length);
  }
}
function TypedArrayType4(root, path, current, next) {
  if (IsTypedArray(current) && current.length === next.length) {
    for (let i = 0;i < current.length; i++) {
      current[i] = next[i];
    }
  } else {
    exports_pointer.Set(root, path, Clone2(next));
  }
}
function ValueType4(root, path, current, next) {
  if (current === next)
    return;
  exports_pointer.Set(root, path, next);
}
function Visit13(root, path, current, next) {
  if (IsArray(next))
    return ArrayType6(root, path, current, next);
  if (IsTypedArray(next))
    return TypedArrayType4(root, path, current, next);
  if (IsStandardObject(next))
    return ObjectType6(root, path, current, next);
  if (IsValueType(next))
    return ValueType4(root, path, current, next);
}
function IsNonMutableValue(value3) {
  return IsTypedArray(value3) || IsValueType(value3);
}
function IsMismatchedValue(current, next) {
  return IsStandardObject(current) && IsArray(next) || IsArray(current) && IsStandardObject(next);
}
function Mutate(current, next) {
  if (IsNonMutableValue(current) || IsNonMutableValue(next))
    throw new ValueMutateError("Only object and array types can be mutated at the root level");
  if (IsMismatchedValue(current, next))
    throw new ValueMutateError("Cannot assign due type mismatch of assignable values");
  Visit13(current, "", current, next);
}

class ValueMutateError extends TypeBoxError {
  constructor(message) {
    super(message);
  }
}
// node_modules/@sinclair/typebox/build/esm/value/transform/decode.mjs
function Default4(schema, path, value3) {
  try {
    return IsTransform2(schema) ? schema[TransformKind].Decode(value3) : value3;
  } catch (error19) {
    throw new TransformDecodeError(schema, path, value3, error19);
  }
}
function FromArray11(schema, references, path, value3) {
  return IsArray(value3) ? Default4(schema, path, value3.map((value4, index) => Visit14(schema.items, references, `${path}/${index}`, value4))) : Default4(schema, path, value3);
}
function FromIntersect11(schema, references, path, value3) {
  if (!IsStandardObject(value3) || IsValueType(value3))
    return Default4(schema, path, value3);
  const knownEntries = KeyOfPropertyEntries(schema);
  const knownKeys = knownEntries.map((entry) => entry[0]);
  const knownProperties = { ...value3 };
  for (const [knownKey, knownSchema] of knownEntries)
    if (knownKey in knownProperties) {
      knownProperties[knownKey] = Visit14(knownSchema, references, `${path}/${knownKey}`, knownProperties[knownKey]);
    }
  if (!IsTransform2(schema.unevaluatedProperties)) {
    return Default4(schema, path, knownProperties);
  }
  const unknownKeys = Object.getOwnPropertyNames(knownProperties);
  const unevaluatedProperties = schema.unevaluatedProperties;
  const unknownProperties = { ...knownProperties };
  for (const key of unknownKeys)
    if (!knownKeys.includes(key)) {
      unknownProperties[key] = Default4(unevaluatedProperties, `${path}/${key}`, unknownProperties[key]);
    }
  return Default4(schema, path, unknownProperties);
}
function FromNot5(schema, references, path, value3) {
  return Default4(schema, path, Visit14(schema.not, references, path, value3));
}
function FromObject9(schema, references, path, value3) {
  if (!IsStandardObject(value3))
    return Default4(schema, path, value3);
  const knownKeys = KeyOfPropertyKeys(schema);
  const knownProperties = { ...value3 };
  for (const key of knownKeys)
    if (key in knownProperties) {
      knownProperties[key] = Visit14(schema.properties[key], references, `${path}/${key}`, knownProperties[key]);
    }
  if (!IsSchema2(schema.additionalProperties)) {
    return Default4(schema, path, knownProperties);
  }
  const unknownKeys = Object.getOwnPropertyNames(knownProperties);
  const additionalProperties = schema.additionalProperties;
  const unknownProperties = { ...knownProperties };
  for (const key of unknownKeys)
    if (!knownKeys.includes(key)) {
      unknownProperties[key] = Default4(additionalProperties, `${path}/${key}`, unknownProperties[key]);
    }
  return Default4(schema, path, unknownProperties);
}
function FromRecord9(schema, references, path, value3) {
  if (!IsStandardObject(value3))
    return Default4(schema, path, value3);
  const pattern3 = Object.getOwnPropertyNames(schema.patternProperties)[0];
  const knownKeys = new RegExp(pattern3);
  const knownProperties = { ...value3 };
  for (const key of Object.getOwnPropertyNames(value3))
    if (knownKeys.test(key)) {
      knownProperties[key] = Visit14(schema.patternProperties[pattern3], references, `${path}/${key}`, knownProperties[key]);
    }
  if (!IsSchema2(schema.additionalProperties)) {
    return Default4(schema, path, knownProperties);
  }
  const unknownKeys = Object.getOwnPropertyNames(knownProperties);
  const additionalProperties = schema.additionalProperties;
  const unknownProperties = { ...knownProperties };
  for (const key of unknownKeys)
    if (!knownKeys.test(key)) {
      unknownProperties[key] = Default4(additionalProperties, `${path}/${key}`, unknownProperties[key]);
    }
  return Default4(schema, path, unknownProperties);
}
function FromRef8(schema, references, path, value3) {
  const target = Deref(schema, references);
  return Default4(schema, path, Visit14(target, references, path, value3));
}
function FromThis8(schema, references, path, value3) {
  const target = Deref(schema, references);
  return Default4(schema, path, Visit14(target, references, path, value3));
}
function FromTuple11(schema, references, path, value3) {
  return IsArray(value3) && IsArray(schema.items) ? Default4(schema, path, schema.items.map((schema2, index) => Visit14(schema2, references, `${path}/${index}`, value3[index]))) : Default4(schema, path, value3);
}
function FromUnion13(schema, references, path, value3) {
  for (const subschema of schema.anyOf) {
    if (!Check(subschema, references, value3))
      continue;
    const decoded = Visit14(subschema, references, path, value3);
    return Default4(schema, path, decoded);
  }
  return Default4(schema, path, value3);
}
function Visit14(schema, references, path, value3) {
  const references_ = typeof schema.$id === "string" ? [...references, schema] : references;
  const schema_ = schema;
  switch (schema[Kind]) {
    case "Array":
      return FromArray11(schema_, references_, path, value3);
    case "Intersect":
      return FromIntersect11(schema_, references_, path, value3);
    case "Not":
      return FromNot5(schema_, references_, path, value3);
    case "Object":
      return FromObject9(schema_, references_, path, value3);
    case "Record":
      return FromRecord9(schema_, references_, path, value3);
    case "Ref":
      return FromRef8(schema_, references_, path, value3);
    case "Symbol":
      return Default4(schema_, path, value3);
    case "This":
      return FromThis8(schema_, references_, path, value3);
    case "Tuple":
      return FromTuple11(schema_, references_, path, value3);
    case "Union":
      return FromUnion13(schema_, references_, path, value3);
    default:
      return Default4(schema_, path, value3);
  }
}
function TransformDecode(schema, references, value3) {
  return Visit14(schema, references, "", value3);
}

class TransformDecodeCheckError extends TypeBoxError {
  constructor(schema, value3, error19) {
    super(`Unable to decode value as it does not match the expected schema`);
    this.schema = schema;
    this.value = value3;
    this.error = error19;
  }
}

class TransformDecodeError extends TypeBoxError {
  constructor(schema, path, value3, error19) {
    super(error19 instanceof Error ? error19.message : "Unknown error");
    this.schema = schema;
    this.path = path;
    this.value = value3;
    this.error = error19;
  }
}
// node_modules/@sinclair/typebox/build/esm/value/transform/encode.mjs
function Default5(schema, path, value3) {
  try {
    return IsTransform2(schema) ? schema[TransformKind].Encode(value3) : value3;
  } catch (error20) {
    throw new TransformEncodeError(schema, path, value3, error20);
  }
}
function FromArray12(schema, references, path, value3) {
  const defaulted = Default5(schema, path, value3);
  return IsArray(defaulted) ? defaulted.map((value4, index) => Visit15(schema.items, references, `${path}/${index}`, value4)) : defaulted;
}
function FromIntersect12(schema, references, path, value3) {
  const defaulted = Default5(schema, path, value3);
  if (!IsStandardObject(value3) || IsValueType(value3))
    return defaulted;
  const knownEntries = KeyOfPropertyEntries(schema);
  const knownKeys = knownEntries.map((entry) => entry[0]);
  const knownProperties = { ...defaulted };
  for (const [knownKey, knownSchema] of knownEntries)
    if (knownKey in knownProperties) {
      knownProperties[knownKey] = Visit15(knownSchema, references, `${path}/${knownKey}`, knownProperties[knownKey]);
    }
  if (!IsTransform2(schema.unevaluatedProperties)) {
    return Default5(schema, path, knownProperties);
  }
  const unknownKeys = Object.getOwnPropertyNames(knownProperties);
  const unevaluatedProperties = schema.unevaluatedProperties;
  const properties = { ...knownProperties };
  for (const key of unknownKeys)
    if (!knownKeys.includes(key)) {
      properties[key] = Default5(unevaluatedProperties, `${path}/${key}`, properties[key]);
    }
  return properties;
}
function FromNot6(schema, references, path, value3) {
  return Default5(schema.not, path, Default5(schema, path, value3));
}
function FromObject10(schema, references, path, value3) {
  const defaulted = Default5(schema, path, value3);
  if (!IsStandardObject(defaulted))
    return defaulted;
  const knownKeys = KeyOfPropertyKeys(schema);
  const knownProperties = { ...defaulted };
  for (const key of knownKeys)
    if (key in knownProperties) {
      knownProperties[key] = Visit15(schema.properties[key], references, `${path}/${key}`, knownProperties[key]);
    }
  if (!IsSchema2(schema.additionalProperties)) {
    return knownProperties;
  }
  const unknownKeys = Object.getOwnPropertyNames(knownProperties);
  const additionalProperties = schema.additionalProperties;
  const properties = { ...knownProperties };
  for (const key of unknownKeys)
    if (!knownKeys.includes(key)) {
      properties[key] = Default5(additionalProperties, `${path}/${key}`, properties[key]);
    }
  return properties;
}
function FromRecord10(schema, references, path, value3) {
  const defaulted = Default5(schema, path, value3);
  if (!IsStandardObject(value3))
    return defaulted;
  const pattern3 = Object.getOwnPropertyNames(schema.patternProperties)[0];
  const knownKeys = new RegExp(pattern3);
  const knownProperties = { ...defaulted };
  for (const key of Object.getOwnPropertyNames(value3))
    if (knownKeys.test(key)) {
      knownProperties[key] = Visit15(schema.patternProperties[pattern3], references, `${path}/${key}`, knownProperties[key]);
    }
  if (!IsSchema2(schema.additionalProperties)) {
    return Default5(schema, path, knownProperties);
  }
  const unknownKeys = Object.getOwnPropertyNames(knownProperties);
  const additionalProperties = schema.additionalProperties;
  const properties = { ...knownProperties };
  for (const key of unknownKeys)
    if (!knownKeys.test(key)) {
      properties[key] = Default5(additionalProperties, `${path}/${key}`, properties[key]);
    }
  return properties;
}
function FromRef9(schema, references, path, value3) {
  const target = Deref(schema, references);
  const resolved = Visit15(target, references, path, value3);
  return Default5(schema, path, resolved);
}
function FromThis9(schema, references, path, value3) {
  const target = Deref(schema, references);
  const resolved = Visit15(target, references, path, value3);
  return Default5(schema, path, resolved);
}
function FromTuple12(schema, references, path, value3) {
  const value1 = Default5(schema, path, value3);
  return IsArray(schema.items) ? schema.items.map((schema2, index) => Visit15(schema2, references, `${path}/${index}`, value1[index])) : [];
}
function FromUnion14(schema, references, path, value3) {
  for (const subschema of schema.anyOf) {
    if (!Check(subschema, references, value3))
      continue;
    const value1 = Visit15(subschema, references, path, value3);
    return Default5(schema, path, value1);
  }
  for (const subschema of schema.anyOf) {
    const value1 = Visit15(subschema, references, path, value3);
    if (!Check(schema, references, value1))
      continue;
    return Default5(schema, path, value1);
  }
  return Default5(schema, path, value3);
}
function Visit15(schema, references, path, value3) {
  const references_ = typeof schema.$id === "string" ? [...references, schema] : references;
  const schema_ = schema;
  switch (schema[Kind]) {
    case "Array":
      return FromArray12(schema_, references_, path, value3);
    case "Intersect":
      return FromIntersect12(schema_, references_, path, value3);
    case "Not":
      return FromNot6(schema_, references_, path, value3);
    case "Object":
      return FromObject10(schema_, references_, path, value3);
    case "Record":
      return FromRecord10(schema_, references_, path, value3);
    case "Ref":
      return FromRef9(schema_, references_, path, value3);
    case "This":
      return FromThis9(schema_, references_, path, value3);
    case "Tuple":
      return FromTuple12(schema_, references_, path, value3);
    case "Union":
      return FromUnion14(schema_, references_, path, value3);
    default:
      return Default5(schema_, path, value3);
  }
}
function TransformEncode(schema, references, value3) {
  return Visit15(schema, references, "", value3);
}

class TransformEncodeCheckError extends TypeBoxError {
  constructor(schema, value3, error20) {
    super(`The encoded value does not match the expected schema`);
    this.schema = schema;
    this.value = value3;
    this.error = error20;
  }
}

class TransformEncodeError extends TypeBoxError {
  constructor(schema, path, value3, error20) {
    super(`${error20 instanceof Error ? error20.message : "Unknown error"}`);
    this.schema = schema;
    this.path = path;
    this.value = value3;
    this.error = error20;
  }
}
// node_modules/@sinclair/typebox/build/esm/value/transform/has.mjs
function FromArray13(schema, references) {
  return IsTransform2(schema) || Visit16(schema.items, references);
}
function FromAsyncIterator5(schema, references) {
  return IsTransform2(schema) || Visit16(schema.items, references);
}
function FromConstructor6(schema, references) {
  return IsTransform2(schema) || Visit16(schema.returns, references) || schema.parameters.some((schema2) => Visit16(schema2, references));
}
function FromFunction5(schema, references) {
  return IsTransform2(schema) || Visit16(schema.returns, references) || schema.parameters.some((schema2) => Visit16(schema2, references));
}
function FromIntersect13(schema, references) {
  return IsTransform2(schema) || IsTransform2(schema.unevaluatedProperties) || schema.allOf.some((schema2) => Visit16(schema2, references));
}
function FromIterator5(schema, references) {
  return IsTransform2(schema) || Visit16(schema.items, references);
}
function FromNot7(schema, references) {
  return IsTransform2(schema) || Visit16(schema.not, references);
}
function FromObject11(schema, references) {
  return IsTransform2(schema) || Object.values(schema.properties).some((schema2) => Visit16(schema2, references)) || IsSchema2(schema.additionalProperties) && Visit16(schema.additionalProperties, references);
}
function FromPromise5(schema, references) {
  return IsTransform2(schema) || Visit16(schema.item, references);
}
function FromRecord11(schema, references) {
  const pattern3 = Object.getOwnPropertyNames(schema.patternProperties)[0];
  const property = schema.patternProperties[pattern3];
  return IsTransform2(schema) || Visit16(property, references) || IsSchema2(schema.additionalProperties) && IsTransform2(schema.additionalProperties);
}
function FromRef10(schema, references) {
  if (IsTransform2(schema))
    return true;
  return Visit16(Deref(schema, references), references);
}
function FromThis10(schema, references) {
  if (IsTransform2(schema))
    return true;
  return Visit16(Deref(schema, references), references);
}
function FromTuple13(schema, references) {
  return IsTransform2(schema) || !IsUndefined(schema.items) && schema.items.some((schema2) => Visit16(schema2, references));
}
function FromUnion15(schema, references) {
  return IsTransform2(schema) || schema.anyOf.some((schema2) => Visit16(schema2, references));
}
function Visit16(schema, references) {
  const references_ = IsString(schema.$id) ? [...references, schema] : references;
  const schema_ = schema;
  if (schema.$id && visited.has(schema.$id))
    return false;
  if (schema.$id)
    visited.add(schema.$id);
  switch (schema[Kind]) {
    case "Array":
      return FromArray13(schema_, references_);
    case "AsyncIterator":
      return FromAsyncIterator5(schema_, references_);
    case "Constructor":
      return FromConstructor6(schema_, references_);
    case "Function":
      return FromFunction5(schema_, references_);
    case "Intersect":
      return FromIntersect13(schema_, references_);
    case "Iterator":
      return FromIterator5(schema_, references_);
    case "Not":
      return FromNot7(schema_, references_);
    case "Object":
      return FromObject11(schema_, references_);
    case "Promise":
      return FromPromise5(schema_, references_);
    case "Record":
      return FromRecord11(schema_, references_);
    case "Ref":
      return FromRef10(schema_, references_);
    case "This":
      return FromThis10(schema_, references_);
    case "Tuple":
      return FromTuple13(schema_, references_);
    case "Union":
      return FromUnion15(schema_, references_);
    default:
      return IsTransform2(schema);
  }
}
function HasTransform(schema, references) {
  visited.clear();
  return Visit16(schema, references);
}
var visited = new Set;
// node_modules/@sinclair/typebox/build/esm/value/value/value.mjs
var exports_value2 = {};
__export(exports_value2, {
  Patch: () => Patch2,
  Mutate: () => Mutate2,
  Hash: () => Hash2,
  Errors: () => Errors2,
  Equal: () => Equal2,
  Encode: () => Encode,
  Diff: () => Diff2,
  Default: () => Default6,
  Decode: () => Decode,
  Create: () => Create3,
  Convert: () => Convert2,
  Clone: () => Clone3,
  Clean: () => Clean2,
  Check: () => Check2,
  Cast: () => Cast2
});
function Cast2(...args) {
  return Cast.apply(Cast, args);
}
function Create3(...args) {
  return Create2.apply(Create2, args);
}
function Check2(...args) {
  return Check.apply(Check, args);
}
function Clean2(...args) {
  return Clean.apply(Clean, args);
}
function Convert2(...args) {
  return Convert.apply(Convert, args);
}
function Clone3(value3) {
  return Clone2(value3);
}
function Decode(...args) {
  const [schema, references, value3] = args.length === 3 ? [args[0], args[1], args[2]] : [args[0], [], args[1]];
  if (!Check2(schema, references, value3))
    throw new TransformDecodeCheckError(schema, value3, Errors2(schema, references, value3).First());
  return HasTransform(schema, references) ? TransformDecode(schema, references, value3) : value3;
}
function Default6(...args) {
  return Default3.apply(Default3, args);
}
function Encode(...args) {
  const [schema, references, value3] = args.length === 3 ? [args[0], args[1], args[2]] : [args[0], [], args[1]];
  const encoded = HasTransform(schema, references) ? TransformEncode(schema, references, value3) : value3;
  if (!Check2(schema, references, encoded))
    throw new TransformEncodeCheckError(schema, encoded, Errors2(schema, references, encoded).First());
  return encoded;
}
function Errors2(...args) {
  return Errors.apply(Errors, args);
}
function Equal2(left, right) {
  return Equal(left, right);
}
function Diff2(current, next) {
  return Diff(current, next);
}
function Hash2(value3) {
  return Hash(value3);
}
function Patch2(current, edits) {
  return Patch(current, edits);
}
function Mutate2(current, next) {
  Mutate(current, next);
}
// node_modules/@sinclair/typebox/build/esm/type/awaited/awaited.mjs
function FromRest4(T) {
  return T.map((L) => AwaitedResolve(L));
}
function FromIntersect14(T) {
  return Intersect(FromRest4(T));
}
function FromUnion16(T) {
  return Union(FromRest4(T));
}
function FromPromise6(T) {
  return AwaitedResolve(T);
}
function AwaitedResolve(T) {
  return IsIntersect(T) ? FromIntersect14(T.allOf) : IsUnion(T) ? FromUnion16(T.anyOf) : IsPromise2(T) ? FromPromise6(T.item) : T;
}
function Awaited(T, options = {}) {
  return CloneType(AwaitedResolve(T), options);
}
// node_modules/@sinclair/typebox/build/esm/type/composite/composite.mjs
function CompositeKeys(T) {
  const Acc = [];
  for (const L of T)
    Acc.push(...KeyOfPropertyKeys(L));
  return SetDistinct(Acc);
}
function FilterNever(T) {
  return T.filter((L) => !IsNever(L));
}
function CompositeProperty(T, K) {
  const Acc = [];
  for (const L of T)
    Acc.push(...IndexFromPropertyKeys(L, [K]));
  return FilterNever(Acc);
}
function CompositeProperties(T, K) {
  const Acc = {};
  for (const L of K) {
    Acc[L] = IntersectEvaluated(CompositeProperty(T, L));
  }
  return Acc;
}
function Composite(T, options = {}) {
  const K = CompositeKeys(T);
  const P = CompositeProperties(T, K);
  const R = Object2(P, options);
  return R;
}
// node_modules/@sinclair/typebox/build/esm/type/date/date.mjs
function Date2(options = {}) {
  return {
    ...options,
    [Kind]: "Date",
    type: "Date"
  };
}
// node_modules/@sinclair/typebox/build/esm/type/null/null.mjs
function Null(options = {}) {
  return {
    ...options,
    [Kind]: "Null",
    type: "null"
  };
}
// node_modules/@sinclair/typebox/build/esm/type/symbol/symbol.mjs
function Symbol2(options) {
  return { ...options, [Kind]: "Symbol", type: "symbol" };
}
// node_modules/@sinclair/typebox/build/esm/type/undefined/undefined.mjs
function Undefined(options = {}) {
  return { ...options, [Kind]: "Undefined", type: "undefined" };
}
// node_modules/@sinclair/typebox/build/esm/type/uint8array/uint8array.mjs
function Uint8Array2(options = {}) {
  return { ...options, [Kind]: "Uint8Array", type: "Uint8Array" };
}
// node_modules/@sinclair/typebox/build/esm/type/const/const.mjs
function FromArray14(T) {
  return T.map((L) => FromValue(L, false));
}
function FromProperties8(value5) {
  const Acc = {};
  for (const K of globalThis.Object.getOwnPropertyNames(value5))
    Acc[K] = Readonly(FromValue(value5[K], false));
  return Acc;
}
function ConditionalReadonly(T, root) {
  return root === true ? T : Readonly(T);
}
function FromValue(value5, root) {
  return IsAsyncIterator2(value5) ? ConditionalReadonly(Any(), root) : IsIterator2(value5) ? ConditionalReadonly(Any(), root) : IsArray2(value5) ? Readonly(Tuple(FromArray14(value5))) : IsUint8Array2(value5) ? Uint8Array2() : IsDate2(value5) ? Date2() : IsObject2(value5) ? ConditionalReadonly(Object2(FromProperties8(value5)), root) : IsFunction2(value5) ? ConditionalReadonly(Function2([], Unknown()), root) : IsUndefined2(value5) ? Undefined() : IsNull2(value5) ? Null() : IsSymbol2(value5) ? Symbol2() : IsBigInt2(value5) ? BigInt2() : IsNumber2(value5) ? Literal(value5) : IsBoolean2(value5) ? Literal(value5) : IsString2(value5) ? Literal(value5) : Object2({});
}
function Const(T, options = {}) {
  return CloneType(FromValue(T, true), options);
}
// node_modules/@sinclair/typebox/build/esm/type/constructor-parameters/constructor-parameters.mjs
function ConstructorParameters(schema, options = {}) {
  return Tuple(CloneRest(schema.parameters), { ...options });
}
// node_modules/@sinclair/typebox/build/esm/type/deref/deref.mjs
function FromRest5(schema, references) {
  return schema.map((schema2) => Deref2(schema2, references));
}
function FromProperties9(properties, references) {
  const Acc = {};
  for (const K of globalThis.Object.getOwnPropertyNames(properties)) {
    Acc[K] = Deref2(properties[K], references);
  }
  return Acc;
}
function FromConstructor7(schema, references) {
  schema.parameters = FromRest5(schema.parameters, references);
  schema.returns = Deref2(schema.returns, references);
  return schema;
}
function FromFunction6(schema, references) {
  schema.parameters = FromRest5(schema.parameters, references);
  schema.returns = Deref2(schema.returns, references);
  return schema;
}
function FromIntersect15(schema, references) {
  schema.allOf = FromRest5(schema.allOf, references);
  return schema;
}
function FromUnion17(schema, references) {
  schema.anyOf = FromRest5(schema.anyOf, references);
  return schema;
}
function FromTuple14(schema, references) {
  if (IsUndefined2(schema.items))
    return schema;
  schema.items = FromRest5(schema.items, references);
  return schema;
}
function FromArray15(schema, references) {
  schema.items = Deref2(schema.items, references);
  return schema;
}
function FromObject12(schema, references) {
  schema.properties = FromProperties9(schema.properties, references);
  return schema;
}
function FromPromise7(schema, references) {
  schema.item = Deref2(schema.item, references);
  return schema;
}
function FromAsyncIterator6(schema, references) {
  schema.items = Deref2(schema.items, references);
  return schema;
}
function FromIterator6(schema, references) {
  schema.items = Deref2(schema.items, references);
  return schema;
}
function FromRef11(schema, references) {
  const target = references.find((remote) => remote.$id === schema.$ref);
  if (target === undefined)
    throw Error(`Unable to dereference schema with \$id ${schema.$ref}`);
  const discard8 = Discard(target, ["$id"]);
  return Deref2(discard8, references);
}
function DerefResolve(schema, references) {
  return IsConstructor(schema) ? FromConstructor7(schema, references) : IsFunction3(schema) ? FromFunction6(schema, references) : IsIntersect(schema) ? FromIntersect15(schema, references) : IsUnion(schema) ? FromUnion17(schema, references) : IsTuple(schema) ? FromTuple14(schema, references) : IsArray3(schema) ? FromArray15(schema, references) : IsObject3(schema) ? FromObject12(schema, references) : IsPromise2(schema) ? FromPromise7(schema, references) : IsAsyncIterator3(schema) ? FromAsyncIterator6(schema, references) : IsIterator3(schema) ? FromIterator6(schema, references) : IsRef(schema) ? FromRef11(schema, references) : schema;
}
function Deref2(schema, references) {
  return DerefResolve(CloneType(schema), CloneRest(references));
}
// node_modules/@sinclair/typebox/build/esm/type/enum/enum.mjs
function Enum(item, options = {}) {
  if (IsUndefined2(item))
    throw new Error("Enum undefined or empty");
  const values1 = globalThis.Object.getOwnPropertyNames(item).filter((key) => isNaN(key)).map((key) => item[key]);
  const values2 = [...new Set(values1)];
  const anyOf = values2.map((value7) => Literal(value7));
  return Union(anyOf, { ...options, [Hint]: "Enum" });
}
// node_modules/@sinclair/typebox/build/esm/type/exclude/exclude-from-template-literal.mjs
function ExcludeFromTemplateLiteral(L, R) {
  return Exclude(TemplateLiteralToUnion(L), R);
}

// node_modules/@sinclair/typebox/build/esm/type/exclude/exclude.mjs
function ExcludeRest(L, R) {
  const excluded = L.filter((inner) => ExtendsCheck(inner, R) === ExtendsResult.False);
  return excluded.length === 1 ? excluded[0] : Union(excluded);
}
function Exclude(L, R, options = {}) {
  if (IsTemplateLiteral(L))
    return CloneType(ExcludeFromTemplateLiteral(L, R), options);
  if (IsMappedResult(L))
    return CloneType(ExcludeFromMappedResult(L, R), options);
  return CloneType(IsUnion(L) ? ExcludeRest(L.anyOf, R) : ExtendsCheck(L, R) !== ExtendsResult.False ? Never() : L, options);
}

// node_modules/@sinclair/typebox/build/esm/type/exclude/exclude-from-mapped-result.mjs
function FromProperties10(P, U) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(P))
    Acc[K2] = Exclude(P[K2], U);
  return Acc;
}
function FromMappedResult7(R, T) {
  return FromProperties10(R.properties, T);
}
function ExcludeFromMappedResult(R, T) {
  const P = FromMappedResult7(R, T);
  return MappedResult(P);
}
// node_modules/@sinclair/typebox/build/esm/type/extract/extract-from-template-literal.mjs
function ExtractFromTemplateLiteral(L, R) {
  return Extract(TemplateLiteralToUnion(L), R);
}

// node_modules/@sinclair/typebox/build/esm/type/extract/extract.mjs
function ExtractRest(L, R) {
  const extracted = L.filter((inner) => ExtendsCheck(inner, R) !== ExtendsResult.False);
  return extracted.length === 1 ? extracted[0] : Union(extracted);
}
function Extract(L, R, options = {}) {
  if (IsTemplateLiteral(L))
    return CloneType(ExtractFromTemplateLiteral(L, R), options);
  if (IsMappedResult(L))
    return CloneType(ExtractFromMappedResult(L, R), options);
  return CloneType(IsUnion(L) ? ExtractRest(L.anyOf, R) : ExtendsCheck(L, R) !== ExtendsResult.False ? L : Never(), options);
}

// node_modules/@sinclair/typebox/build/esm/type/extract/extract-from-mapped-result.mjs
function FromProperties11(P, T) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(P))
    Acc[K2] = Extract(P[K2], T);
  return Acc;
}
function FromMappedResult8(R, T) {
  return FromProperties11(R.properties, T);
}
function ExtractFromMappedResult(R, T) {
  const P = FromMappedResult8(R, T);
  return MappedResult(P);
}
// node_modules/@sinclair/typebox/build/esm/type/instance-type/instance-type.mjs
function InstanceType(schema, options = {}) {
  return CloneType(schema.returns, options);
}
// node_modules/@sinclair/typebox/build/esm/type/integer/integer.mjs
function Integer(options = {}) {
  return {
    ...options,
    [Kind]: "Integer",
    type: "integer"
  };
}
// node_modules/@sinclair/typebox/build/esm/type/intrinsic/intrinsic-from-mapped-key.mjs
function MappedIntrinsicPropertyKey(K, M, options) {
  return {
    [K]: Intrinsic(Literal(K), M, options)
  };
}
function MappedIntrinsicPropertyKeys(K, M, options) {
  return K.reduce((Acc, L) => {
    return { ...Acc, ...MappedIntrinsicPropertyKey(L, M, options) };
  }, {});
}
function MappedIntrinsicProperties(T, M, options) {
  return MappedIntrinsicPropertyKeys(T["keys"], M, options);
}
function IntrinsicFromMappedKey(T, M, options) {
  const P = MappedIntrinsicProperties(T, M, options);
  return MappedResult(P);
}

// node_modules/@sinclair/typebox/build/esm/type/intrinsic/intrinsic.mjs
function ApplyUncapitalize(value7) {
  const [first, rest] = [value7.slice(0, 1), value7.slice(1)];
  return [first.toLowerCase(), rest].join("");
}
function ApplyCapitalize(value7) {
  const [first, rest] = [value7.slice(0, 1), value7.slice(1)];
  return [first.toUpperCase(), rest].join("");
}
function ApplyUppercase(value7) {
  return value7.toUpperCase();
}
function ApplyLowercase(value7) {
  return value7.toLowerCase();
}
function FromTemplateLiteral6(schema, mode, options) {
  const expression = TemplateLiteralParseExact(schema.pattern);
  const finite3 = IsTemplateLiteralExpressionFinite(expression);
  if (!finite3)
    return { ...schema, pattern: FromLiteralValue(schema.pattern, mode) };
  const strings = [...TemplateLiteralExpressionGenerate(expression)];
  const literals = strings.map((value7) => Literal(value7));
  const mapped12 = FromRest6(literals, mode);
  const union15 = Union(mapped12);
  return TemplateLiteral([union15], options);
}
function FromLiteralValue(value7, mode) {
  return typeof value7 === "string" ? mode === "Uncapitalize" ? ApplyUncapitalize(value7) : mode === "Capitalize" ? ApplyCapitalize(value7) : mode === "Uppercase" ? ApplyUppercase(value7) : mode === "Lowercase" ? ApplyLowercase(value7) : value7 : value7.toString();
}
function FromRest6(T, M) {
  return T.map((L) => Intrinsic(L, M));
}
function Intrinsic(schema, mode, options = {}) {
  return IsMappedKey(schema) ? IntrinsicFromMappedKey(schema, mode, options) : IsTemplateLiteral(schema) ? FromTemplateLiteral6(schema, mode, schema) : IsUnion(schema) ? Union(FromRest6(schema.anyOf, mode), options) : IsLiteral(schema) ? Literal(FromLiteralValue(schema.const, mode), options) : schema;
}

// node_modules/@sinclair/typebox/build/esm/type/intrinsic/capitalize.mjs
function Capitalize(T, options = {}) {
  return Intrinsic(T, "Capitalize", options);
}
// node_modules/@sinclair/typebox/build/esm/type/intrinsic/lowercase.mjs
function Lowercase(T, options = {}) {
  return Intrinsic(T, "Lowercase", options);
}
// node_modules/@sinclair/typebox/build/esm/type/intrinsic/uncapitalize.mjs
function Uncapitalize(T, options = {}) {
  return Intrinsic(T, "Uncapitalize", options);
}
// node_modules/@sinclair/typebox/build/esm/type/intrinsic/uppercase.mjs
function Uppercase(T, options = {}) {
  return Intrinsic(T, "Uppercase", options);
}
// node_modules/@sinclair/typebox/build/esm/type/not/not.mjs
function Not2(schema, options) {
  return {
    ...options,
    [Kind]: "Not",
    not: CloneType(schema)
  };
}
// node_modules/@sinclair/typebox/build/esm/type/omit/omit-from-mapped-result.mjs
function FromProperties12(P, K, options) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(P))
    Acc[K2] = Omit(P[K2], K, options);
  return Acc;
}
function FromMappedResult9(R, K, options) {
  return FromProperties12(R.properties, K, options);
}
function OmitFromMappedResult(R, K, options) {
  const P = FromMappedResult9(R, K, options);
  return MappedResult(P);
}

// node_modules/@sinclair/typebox/build/esm/type/omit/omit.mjs
function FromIntersect16(T, K) {
  return T.map((T2) => OmitResolve(T2, K));
}
function FromUnion18(T, K) {
  return T.map((T2) => OmitResolve(T2, K));
}
function FromProperty2(T, K) {
  const { [K]: _, ...R } = T;
  return R;
}
function FromProperties13(T, K) {
  return K.reduce((T2, K2) => FromProperty2(T2, K2), T);
}
function OmitResolve(T, K) {
  return IsIntersect(T) ? Intersect(FromIntersect16(T.allOf, K)) : IsUnion(T) ? Union(FromUnion18(T.anyOf, K)) : IsObject3(T) ? Object2(FromProperties13(T.properties, K)) : Object2({});
}
function Omit(T, K, options = {}) {
  if (IsMappedKey(K))
    return OmitFromMappedKey(T, K, options);
  if (IsMappedResult(T))
    return OmitFromMappedResult(T, K, options);
  const I = IsSchema(K) ? IndexPropertyKeys(K) : K;
  const D = Discard(T, [TransformKind, "$id", "required"]);
  const R = CloneType(OmitResolve(T, I), options);
  return { ...D, ...R };
}

// node_modules/@sinclair/typebox/build/esm/type/omit/omit-from-mapped-key.mjs
function FromPropertyKey2(T, K, options) {
  return {
    [K]: Omit(T, [K], options)
  };
}
function FromPropertyKeys2(T, K, options) {
  return K.reduce((Acc, LK) => {
    return { ...Acc, ...FromPropertyKey2(T, LK, options) };
  }, {});
}
function FromMappedKey3(T, K, options) {
  return FromPropertyKeys2(T, K.keys, options);
}
function OmitFromMappedKey(T, K, options) {
  const P = FromMappedKey3(T, K, options);
  return MappedResult(P);
}
// node_modules/@sinclair/typebox/build/esm/type/parameters/parameters.mjs
function Parameters(schema, options = {}) {
  return Tuple(CloneRest(schema.parameters), { ...options });
}
// node_modules/@sinclair/typebox/build/esm/type/partial/partial.mjs
function FromRest7(T) {
  return T.map((L) => PartialResolve(L));
}
function FromProperties14(T) {
  const Acc = {};
  for (const K of globalThis.Object.getOwnPropertyNames(T))
    Acc[K] = Optional(T[K]);
  return Acc;
}
function PartialResolve(T) {
  return IsIntersect(T) ? Intersect(FromRest7(T.allOf)) : IsUnion(T) ? Union(FromRest7(T.anyOf)) : IsObject3(T) ? Object2(FromProperties14(T.properties)) : Object2({});
}
function Partial(T, options = {}) {
  if (IsMappedResult(T))
    return PartialFromMappedResult(T, options);
  const D = Discard(T, [TransformKind, "$id", "required"]);
  const R = CloneType(PartialResolve(T), options);
  return { ...D, ...R };
}

// node_modules/@sinclair/typebox/build/esm/type/partial/partial-from-mapped-result.mjs
function FromProperties15(K, options) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(K))
    Acc[K2] = Partial(K[K2], options);
  return Acc;
}
function FromMappedResult10(R, options) {
  return FromProperties15(R.properties, options);
}
function PartialFromMappedResult(R, options) {
  const P = FromMappedResult10(R, options);
  return MappedResult(P);
}
// node_modules/@sinclair/typebox/build/esm/type/pick/pick-from-mapped-result.mjs
function FromProperties16(P, K, options) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(P))
    Acc[K2] = Pick(P[K2], K, options);
  return Acc;
}
function FromMappedResult11(R, K, options) {
  return FromProperties16(R.properties, K, options);
}
function PickFromMappedResult(R, K, options) {
  const P = FromMappedResult11(R, K, options);
  return MappedResult(P);
}

// node_modules/@sinclair/typebox/build/esm/type/pick/pick.mjs
function FromIntersect17(T, K) {
  return T.map((T2) => PickResolve(T2, K));
}
function FromUnion19(T, K) {
  return T.map((T2) => PickResolve(T2, K));
}
function FromProperties17(T, K) {
  const Acc = {};
  for (const K2 of K)
    if (K2 in T)
      Acc[K2] = T[K2];
  return Acc;
}
function PickResolve(T, K) {
  return IsIntersect(T) ? Intersect(FromIntersect17(T.allOf, K)) : IsUnion(T) ? Union(FromUnion19(T.anyOf, K)) : IsObject3(T) ? Object2(FromProperties17(T.properties, K)) : Object2({});
}
function Pick(T, K, options = {}) {
  if (IsMappedKey(K))
    return PickFromMappedKey(T, K, options);
  if (IsMappedResult(T))
    return PickFromMappedResult(T, K, options);
  const I = IsSchema(K) ? IndexPropertyKeys(K) : K;
  const D = Discard(T, [TransformKind, "$id", "required"]);
  const R = CloneType(PickResolve(T, I), options);
  return { ...D, ...R };
}

// node_modules/@sinclair/typebox/build/esm/type/pick/pick-from-mapped-key.mjs
function FromPropertyKey3(T, K, options) {
  return {
    [K]: Pick(T, [K], options)
  };
}
function FromPropertyKeys3(T, K, options) {
  return K.reduce((Acc, LK) => {
    return { ...Acc, ...FromPropertyKey3(T, LK, options) };
  }, {});
}
function FromMappedKey4(T, K, options) {
  return FromPropertyKeys3(T, K.keys, options);
}
function PickFromMappedKey(T, K, options) {
  const P = FromMappedKey4(T, K, options);
  return MappedResult(P);
}
// node_modules/@sinclair/typebox/build/esm/type/readonly-optional/readonly-optional.mjs
function ReadonlyOptional(schema) {
  return Readonly(Optional(schema));
}
// node_modules/@sinclair/typebox/build/esm/type/record/record.mjs
function RecordCreateFromPattern(pattern3, T, options) {
  return {
    ...options,
    [Kind]: "Record",
    type: "object",
    patternProperties: { [pattern3]: CloneType(T) }
  };
}
function RecordCreateFromKeys(K, T, options) {
  const Acc = {};
  for (const K2 of K)
    Acc[K2] = CloneType(T);
  return Object2(Acc, { ...options, [Hint]: "Record" });
}
function FromTemplateLiteralKey(K, T, options) {
  return IsTemplateLiteralFinite(K) ? RecordCreateFromKeys(IndexPropertyKeys(K), T, options) : RecordCreateFromPattern(K.pattern, T, options);
}
function FromUnionKey(K, T, options) {
  return RecordCreateFromKeys(IndexPropertyKeys(Union(K)), T, options);
}
function FromLiteralKey(K, T, options) {
  return RecordCreateFromKeys([K.toString()], T, options);
}
function FromRegExpKey(K, T, options) {
  return RecordCreateFromPattern(K.source, T, options);
}
function FromStringKey(K, T, options) {
  const pattern3 = IsUndefined2(K.pattern) ? PatternStringExact : K.pattern;
  return RecordCreateFromPattern(pattern3, T, options);
}
function FromIntegerKey(_, T, options) {
  return RecordCreateFromPattern(PatternNumberExact, T, options);
}
function FromNumberKey(_, T, options) {
  return RecordCreateFromPattern(PatternNumberExact, T, options);
}
function Record(K, T, options = {}) {
  return IsUnion(K) ? FromUnionKey(K.anyOf, T, options) : IsTemplateLiteral(K) ? FromTemplateLiteralKey(K, T, options) : IsLiteral(K) ? FromLiteralKey(K.const, T, options) : IsInteger2(K) ? FromIntegerKey(K, T, options) : IsNumber3(K) ? FromNumberKey(K, T, options) : IsRegExp2(K) ? FromRegExpKey(K, T, options) : IsString3(K) ? FromStringKey(K, T, options) : Never(options);
}
// node_modules/@sinclair/typebox/build/esm/type/recursive/recursive.mjs
function Recursive(callback, options = {}) {
  if (IsUndefined2(options.$id))
    options.$id = `T${Ordinal++}`;
  const thisType = callback({ [Kind]: "This", $ref: `${options.$id}` });
  thisType.$id = options.$id;
  return CloneType({ ...options, [Hint]: "Recursive", ...thisType });
}
var Ordinal = 0;
// node_modules/@sinclair/typebox/build/esm/type/ref/ref.mjs
function Ref(unresolved, options = {}) {
  if (IsString2(unresolved))
    return { ...options, [Kind]: "Ref", $ref: unresolved };
  if (IsUndefined2(unresolved.$id))
    throw new Error("Reference target type must specify an $id");
  return {
    ...options,
    [Kind]: "Ref",
    $ref: unresolved.$id
  };
}
// node_modules/@sinclair/typebox/build/esm/type/regexp/regexp.mjs
function RegExp2(unresolved, options = {}) {
  const expr = IsString2(unresolved) ? new globalThis.RegExp(unresolved) : unresolved;
  return { ...options, [Kind]: "RegExp", type: "RegExp", source: expr.source, flags: expr.flags };
}
// node_modules/@sinclair/typebox/build/esm/type/required/required.mjs
function FromRest8(T) {
  return T.map((L) => RequiredResolve(L));
}
function FromProperties18(T) {
  const Acc = {};
  for (const K of globalThis.Object.getOwnPropertyNames(T))
    Acc[K] = Discard(T[K], [OptionalKind]);
  return Acc;
}
function RequiredResolve(T) {
  return IsIntersect(T) ? Intersect(FromRest8(T.allOf)) : IsUnion(T) ? Union(FromRest8(T.anyOf)) : IsObject3(T) ? Object2(FromProperties18(T.properties)) : Object2({});
}
function Required(T, options = {}) {
  if (IsMappedResult(T)) {
    return RequiredFromMappedResult(T, options);
  } else {
    const D = Discard(T, [TransformKind, "$id", "required"]);
    const R = CloneType(RequiredResolve(T), options);
    return { ...D, ...R };
  }
}

// node_modules/@sinclair/typebox/build/esm/type/required/required-from-mapped-result.mjs
function FromProperties19(P, options) {
  const Acc = {};
  for (const K2 of globalThis.Object.getOwnPropertyNames(P))
    Acc[K2] = Required(P[K2], options);
  return Acc;
}
function FromMappedResult12(R, options) {
  return FromProperties19(R.properties, options);
}
function RequiredFromMappedResult(R, options) {
  const P = FromMappedResult12(R, options);
  return MappedResult(P);
}
// node_modules/@sinclair/typebox/build/esm/type/rest/rest.mjs
function RestResolve(T) {
  return IsIntersect(T) ? CloneRest(T.allOf) : IsUnion(T) ? CloneRest(T.anyOf) : IsTuple(T) ? CloneRest(T.items ?? []) : [];
}
function Rest(T) {
  return CloneRest(RestResolve(T));
}
// node_modules/@sinclair/typebox/build/esm/type/return-type/return-type.mjs
function ReturnType(schema, options = {}) {
  return CloneType(schema.returns, options);
}
// node_modules/@sinclair/typebox/build/esm/type/strict/strict.mjs
function Strict(schema2) {
  return JSON.parse(JSON.stringify(schema2));
}
// node_modules/@sinclair/typebox/build/esm/type/transform/transform.mjs
function Transform(schema2) {
  return new TransformDecodeBuilder(schema2);
}

class TransformDecodeBuilder {
  constructor(schema2) {
    this.schema = schema2;
  }
  Decode(decode2) {
    return new TransformEncodeBuilder(this.schema, decode2);
  }
}

class TransformEncodeBuilder {
  constructor(schema2, decode2) {
    this.schema = schema2;
    this.decode = decode2;
  }
  EncodeTransform(encode2, schema2) {
    const Encode2 = (value11) => schema2[TransformKind].Encode(encode2(value11));
    const Decode2 = (value11) => this.decode(schema2[TransformKind].Decode(value11));
    const Codec = { Encode: Encode2, Decode: Decode2 };
    return { ...schema2, [TransformKind]: Codec };
  }
  EncodeSchema(encode2, schema2) {
    const Codec = { Decode: this.decode, Encode: encode2 };
    return { ...schema2, [TransformKind]: Codec };
  }
  Encode(encode2) {
    const schema2 = CloneType(this.schema);
    return IsTransform(schema2) ? this.EncodeTransform(encode2, schema2) : this.EncodeSchema(encode2, schema2);
  }
}
// node_modules/@sinclair/typebox/build/esm/type/void/void.mjs
function Void(options = {}) {
  return {
    ...options,
    [Kind]: "Void",
    type: "void"
  };
}
// node_modules/@sinclair/typebox/build/esm/type/type/type.mjs
var exports_type3 = {};
__export(exports_type3, {
  Void: () => Void,
  Uppercase: () => Uppercase,
  Unsafe: () => Unsafe,
  Unknown: () => Unknown,
  Union: () => Union,
  Undefined: () => Undefined,
  Uncapitalize: () => Uncapitalize,
  Uint8Array: () => Uint8Array2,
  Tuple: () => Tuple,
  Transform: () => Transform,
  TemplateLiteral: () => TemplateLiteral,
  Symbol: () => Symbol2,
  String: () => String2,
  Strict: () => Strict,
  ReturnType: () => ReturnType,
  Rest: () => Rest,
  Required: () => Required,
  RegExp: () => RegExp2,
  Ref: () => Ref,
  Recursive: () => Recursive,
  Record: () => Record,
  ReadonlyOptional: () => ReadonlyOptional,
  Readonly: () => Readonly,
  Promise: () => Promise2,
  Pick: () => Pick,
  Partial: () => Partial,
  Parameters: () => Parameters,
  Optional: () => Optional,
  Omit: () => Omit,
  Object: () => Object2,
  Number: () => Number2,
  Null: () => Null,
  Not: () => Not2,
  Never: () => Never,
  Mapped: () => Mapped,
  Lowercase: () => Lowercase,
  Literal: () => Literal,
  KeyOf: () => KeyOf,
  Iterator: () => Iterator,
  Intersect: () => Intersect,
  Integer: () => Integer,
  InstanceType: () => InstanceType,
  Index: () => Index,
  Function: () => Function2,
  Extract: () => Extract,
  Extends: () => Extends,
  Exclude: () => Exclude,
  Enum: () => Enum,
  Deref: () => Deref2,
  Date: () => Date2,
  ConstructorParameters: () => ConstructorParameters,
  Constructor: () => Constructor,
  Const: () => Const,
  Composite: () => Composite,
  Capitalize: () => Capitalize,
  Boolean: () => Boolean2,
  BigInt: () => BigInt2,
  Awaited: () => Awaited,
  AsyncIterator: () => AsyncIterator,
  Array: () => Array2,
  Any: () => Any
});

// node_modules/@sinclair/typebox/build/esm/type/type/index.mjs
var Type = exports_type3;
// node_modules/@sinclair/typebox/build/esm/compiler/compiler.mjs
class TypeCheck {
  constructor(schema3, references, checkFunc, code) {
    this.schema = schema3;
    this.references = references;
    this.checkFunc = checkFunc;
    this.code = code;
    this.hasTransform = HasTransform(schema3, references);
  }
  Code() {
    return this.code;
  }
  Errors(value11) {
    return Errors(this.schema, this.references, value11);
  }
  Check(value11) {
    return this.checkFunc(value11);
  }
  Decode(value11) {
    if (!this.checkFunc(value11))
      throw new TransformDecodeCheckError(this.schema, value11, this.Errors(value11).First());
    return this.hasTransform ? TransformDecode(this.schema, this.references, value11) : value11;
  }
  Encode(value11) {
    const encoded = this.hasTransform ? TransformEncode(this.schema, this.references, value11) : value11;
    if (!this.checkFunc(encoded))
      throw new TransformEncodeCheckError(this.schema, value11, this.Errors(value11).First());
    return encoded;
  }
}
var Character;
(function(Character2) {
  function DollarSign(code) {
    return code === 36;
  }
  Character2.DollarSign = DollarSign;
  function IsUnderscore(code) {
    return code === 95;
  }
  Character2.IsUnderscore = IsUnderscore;
  function IsAlpha(code) {
    return code >= 65 && code <= 90 || code >= 97 && code <= 122;
  }
  Character2.IsAlpha = IsAlpha;
  function IsNumeric(code) {
    return code >= 48 && code <= 57;
  }
  Character2.IsNumeric = IsNumeric;
})(Character || (Character = {}));
var MemberExpression;
(function(MemberExpression2) {
  function IsFirstCharacterNumeric(value11) {
    if (value11.length === 0)
      return false;
    return Character.IsNumeric(value11.charCodeAt(0));
  }
  function IsAccessor(value11) {
    if (IsFirstCharacterNumeric(value11))
      return false;
    for (let i = 0;i < value11.length; i++) {
      const code = value11.charCodeAt(i);
      const check11 = Character.IsAlpha(code) || Character.IsNumeric(code) || Character.DollarSign(code) || Character.IsUnderscore(code);
      if (!check11)
        return false;
    }
    return true;
  }
  function EscapeHyphen(key) {
    return key.replace(/'/g, "\\'");
  }
  function Encode2(object13, key) {
    return IsAccessor(key) ? `${object13}.${key}` : `${object13}['${EscapeHyphen(key)}']`;
  }
  MemberExpression2.Encode = Encode2;
})(MemberExpression || (MemberExpression = {}));
var Identifier;
(function(Identifier2) {
  function Encode2($id) {
    const buffer = [];
    for (let i = 0;i < $id.length; i++) {
      const code = $id.charCodeAt(i);
      if (Character.IsNumeric(code) || Character.IsAlpha(code)) {
        buffer.push($id.charAt(i));
      } else {
        buffer.push(`_${code}_`);
      }
    }
    return buffer.join("").replace(/__/g, "_");
  }
  Identifier2.Encode = Encode2;
})(Identifier || (Identifier = {}));
var LiteralString;
(function(LiteralString2) {
  function Escape3(content) {
    return content.replace(/'/g, "\\'");
  }
  LiteralString2.Escape = Escape3;
})(LiteralString || (LiteralString = {}));

class TypeCompilerUnknownTypeError extends TypeBoxError {
  constructor(schema3) {
    super("Unknown type");
    this.schema = schema3;
  }
}

class TypeCompilerTypeGuardError extends TypeBoxError {
  constructor(schema3) {
    super("Preflight validation check failed to guard for the given schema");
    this.schema = schema3;
  }
}
var Policy;
(function(Policy2) {
  function IsExactOptionalProperty(value11, key, expression) {
    return TypeSystemPolicy.ExactOptionalPropertyTypes ? `('${key}' in ${value11} ? ${expression} : true)` : `(${MemberExpression.Encode(value11, key)} !== undefined ? ${expression} : true)`;
  }
  Policy2.IsExactOptionalProperty = IsExactOptionalProperty;
  function IsObjectLike(value11) {
    return !TypeSystemPolicy.AllowArrayObject ? `(typeof ${value11} === 'object' && ${value11} !== null && !Array.isArray(${value11}))` : `(typeof ${value11} === 'object' && ${value11} !== null)`;
  }
  Policy2.IsObjectLike = IsObjectLike;
  function IsRecordLike(value11) {
    return !TypeSystemPolicy.AllowArrayObject ? `(typeof ${value11} === 'object' && ${value11} !== null && !Array.isArray(${value11}) && !(${value11} instanceof Date) && !(${value11} instanceof Uint8Array))` : `(typeof ${value11} === 'object' && ${value11} !== null && !(${value11} instanceof Date) && !(${value11} instanceof Uint8Array))`;
  }
  Policy2.IsRecordLike = IsRecordLike;
  function IsNumberLike(value11) {
    return TypeSystemPolicy.AllowNaN ? `typeof ${value11} === 'number'` : `Number.isFinite(${value11})`;
  }
  Policy2.IsNumberLike = IsNumberLike;
  function IsVoidLike(value11) {
    return TypeSystemPolicy.AllowNullVoid ? `(${value11} === undefined || ${value11} === null)` : `${value11} === undefined`;
  }
  Policy2.IsVoidLike = IsVoidLike;
})(Policy || (Policy = {}));
var TypeCompiler;
(function(TypeCompiler2) {
  function IsAnyOrUnknown2(schema3) {
    return schema3[Kind] === "Any" || schema3[Kind] === "Unknown";
  }
  function* FromAny5(schema3, references, value11) {
    yield "true";
  }
  function* FromArray16(schema3, references, value11) {
    yield `Array.isArray(${value11})`;
    const [parameter, accumulator] = [CreateParameter("value", "any"), CreateParameter("acc", "number")];
    if (IsNumber(schema3.maxItems))
      yield `${value11}.length <= ${schema3.maxItems}`;
    if (IsNumber(schema3.minItems))
      yield `${value11}.length >= ${schema3.minItems}`;
    const elementExpression = CreateExpression(schema3.items, references, "value");
    yield `${value11}.every((${parameter}) => ${elementExpression})`;
    if (IsSchema2(schema3.contains) || IsNumber(schema3.minContains) || IsNumber(schema3.maxContains)) {
      const containsSchema = IsSchema2(schema3.contains) ? schema3.contains : Never();
      const checkExpression = CreateExpression(containsSchema, references, "value");
      const checkMinContains = IsNumber(schema3.minContains) ? [`(count >= ${schema3.minContains})`] : [];
      const checkMaxContains = IsNumber(schema3.maxContains) ? [`(count <= ${schema3.maxContains})`] : [];
      const checkCount = `const count = value.reduce((${accumulator}, ${parameter}) => ${checkExpression} ? acc + 1 : acc, 0)`;
      const check11 = [`(count > 0)`, ...checkMinContains, ...checkMaxContains].join(" && ");
      yield `((${parameter}) => { ${checkCount}; return ${check11}})(${value11})`;
    }
    if (schema3.uniqueItems === true) {
      const check11 = `const hashed = hash(element); if(set.has(hashed)) { return false } else { set.add(hashed) } } return true`;
      const block = `const set = new Set(); for(const element of value) { ${check11} }`;
      yield `((${parameter}) => { ${block} )(${value11})`;
    }
  }
  function* FromAsyncIterator7(schema3, references, value11) {
    yield `(typeof value === 'object' && Symbol.asyncIterator in ${value11})`;
  }
  function* FromBigInt6(schema3, references, value11) {
    yield `(typeof ${value11} === 'bigint')`;
    if (IsBigInt(schema3.exclusiveMaximum))
      yield `${value11} < BigInt(${schema3.exclusiveMaximum})`;
    if (IsBigInt(schema3.exclusiveMinimum))
      yield `${value11} > BigInt(${schema3.exclusiveMinimum})`;
    if (IsBigInt(schema3.maximum))
      yield `${value11} <= BigInt(${schema3.maximum})`;
    if (IsBigInt(schema3.minimum))
      yield `${value11} >= BigInt(${schema3.minimum})`;
    if (IsBigInt(schema3.multipleOf))
      yield `(${value11} % BigInt(${schema3.multipleOf})) === 0`;
  }
  function* FromBoolean6(schema3, references, value11) {
    yield `(typeof ${value11} === 'boolean')`;
  }
  function* FromConstructor8(schema3, references, value11) {
    yield* Visit17(schema3.returns, references, `${value11}.prototype`);
  }
  function* FromDate6(schema3, references, value11) {
    yield `(${value11} instanceof Date) && Number.isFinite(${value11}.getTime())`;
    if (IsNumber(schema3.exclusiveMaximumTimestamp))
      yield `${value11}.getTime() < ${schema3.exclusiveMaximumTimestamp}`;
    if (IsNumber(schema3.exclusiveMinimumTimestamp))
      yield `${value11}.getTime() > ${schema3.exclusiveMinimumTimestamp}`;
    if (IsNumber(schema3.maximumTimestamp))
      yield `${value11}.getTime() <= ${schema3.maximumTimestamp}`;
    if (IsNumber(schema3.minimumTimestamp))
      yield `${value11}.getTime() >= ${schema3.minimumTimestamp}`;
    if (IsNumber(schema3.multipleOfTimestamp))
      yield `(${value11}.getTime() % ${schema3.multipleOfTimestamp}) === 0`;
  }
  function* FromFunction7(schema3, references, value11) {
    yield `(typeof ${value11} === 'function')`;
  }
  function* FromInteger6(schema3, references, value11) {
    yield `Number.isInteger(${value11})`;
    if (IsNumber(schema3.exclusiveMaximum))
      yield `${value11} < ${schema3.exclusiveMaximum}`;
    if (IsNumber(schema3.exclusiveMinimum))
      yield `${value11} > ${schema3.exclusiveMinimum}`;
    if (IsNumber(schema3.maximum))
      yield `${value11} <= ${schema3.maximum}`;
    if (IsNumber(schema3.minimum))
      yield `${value11} >= ${schema3.minimum}`;
    if (IsNumber(schema3.multipleOf))
      yield `(${value11} % ${schema3.multipleOf}) === 0`;
  }
  function* FromIntersect18(schema3, references, value11) {
    const check1 = schema3.allOf.map((schema4) => CreateExpression(schema4, references, value11)).join(" && ");
    if (schema3.unevaluatedProperties === false) {
      const keyCheck = CreateVariable(`${new RegExp(KeyOfPattern(schema3))};`);
      const check22 = `Object.getOwnPropertyNames(${value11}).every(key => ${keyCheck}.test(key))`;
      yield `(${check1} && ${check22})`;
    } else if (IsSchema2(schema3.unevaluatedProperties)) {
      const keyCheck = CreateVariable(`${new RegExp(KeyOfPattern(schema3))};`);
      const check22 = `Object.getOwnPropertyNames(${value11}).every(key => ${keyCheck}.test(key) || ${CreateExpression(schema3.unevaluatedProperties, references, `${value11}[key]`)})`;
      yield `(${check1} && ${check22})`;
    } else {
      yield `(${check1})`;
    }
  }
  function* FromIterator7(schema3, references, value11) {
    yield `(typeof value === 'object' && Symbol.iterator in ${value11})`;
  }
  function* FromLiteral7(schema3, references, value11) {
    if (typeof schema3.const === "number" || typeof schema3.const === "boolean") {
      yield `(${value11} === ${schema3.const})`;
    } else {
      yield `(${value11} === '${LiteralString.Escape(schema3.const)}')`;
    }
  }
  function* FromNever6(schema3, references, value11) {
    yield `false`;
  }
  function* FromNot8(schema3, references, value11) {
    const expression = CreateExpression(schema3.not, references, value11);
    yield `(!${expression})`;
  }
  function* FromNull6(schema3, references, value11) {
    yield `(${value11} === null)`;
  }
  function* FromNumber6(schema3, references, value11) {
    yield Policy.IsNumberLike(value11);
    if (IsNumber(schema3.exclusiveMaximum))
      yield `${value11} < ${schema3.exclusiveMaximum}`;
    if (IsNumber(schema3.exclusiveMinimum))
      yield `${value11} > ${schema3.exclusiveMinimum}`;
    if (IsNumber(schema3.maximum))
      yield `${value11} <= ${schema3.maximum}`;
    if (IsNumber(schema3.minimum))
      yield `${value11} >= ${schema3.minimum}`;
    if (IsNumber(schema3.multipleOf))
      yield `(${value11} % ${schema3.multipleOf}) === 0`;
  }
  function* FromObject13(schema3, references, value11) {
    yield Policy.IsObjectLike(value11);
    if (IsNumber(schema3.minProperties))
      yield `Object.getOwnPropertyNames(${value11}).length >= ${schema3.minProperties}`;
    if (IsNumber(schema3.maxProperties))
      yield `Object.getOwnPropertyNames(${value11}).length <= ${schema3.maxProperties}`;
    const knownKeys = Object.getOwnPropertyNames(schema3.properties);
    for (const knownKey of knownKeys) {
      const memberExpression = MemberExpression.Encode(value11, knownKey);
      const property = schema3.properties[knownKey];
      if (schema3.required && schema3.required.includes(knownKey)) {
        yield* Visit17(property, references, memberExpression);
        if (ExtendsUndefinedCheck(property) || IsAnyOrUnknown2(property))
          yield `('${knownKey}' in ${value11})`;
      } else {
        const expression = CreateExpression(property, references, memberExpression);
        yield Policy.IsExactOptionalProperty(value11, knownKey, expression);
      }
    }
    if (schema3.additionalProperties === false) {
      if (schema3.required && schema3.required.length === knownKeys.length) {
        yield `Object.getOwnPropertyNames(${value11}).length === ${knownKeys.length}`;
      } else {
        const keys = `[${knownKeys.map((key) => `'${key}'`).join(", ")}]`;
        yield `Object.getOwnPropertyNames(${value11}).every(key => ${keys}.includes(key))`;
      }
    }
    if (typeof schema3.additionalProperties === "object") {
      const expression = CreateExpression(schema3.additionalProperties, references, `${value11}[key]`);
      const keys = `[${knownKeys.map((key) => `'${key}'`).join(", ")}]`;
      yield `(Object.getOwnPropertyNames(${value11}).every(key => ${keys}.includes(key) || ${expression}))`;
    }
  }
  function* FromPromise8(schema3, references, value11) {
    yield `(typeof value === 'object' && typeof ${value11}.then === 'function')`;
  }
  function* FromRecord12(schema3, references, value11) {
    yield Policy.IsRecordLike(value11);
    if (IsNumber(schema3.minProperties))
      yield `Object.getOwnPropertyNames(${value11}).length >= ${schema3.minProperties}`;
    if (IsNumber(schema3.maxProperties))
      yield `Object.getOwnPropertyNames(${value11}).length <= ${schema3.maxProperties}`;
    const [patternKey, patternSchema] = Object.entries(schema3.patternProperties)[0];
    const variable = CreateVariable(`${new RegExp(patternKey)}`);
    const check1 = CreateExpression(patternSchema, references, "value");
    const check22 = IsSchema2(schema3.additionalProperties) ? CreateExpression(schema3.additionalProperties, references, value11) : schema3.additionalProperties === false ? "false" : "true";
    const expression = `(${variable}.test(key) ? ${check1} : ${check22})`;
    yield `(Object.entries(${value11}).every(([key, value]) => ${expression}))`;
  }
  function* FromRef12(schema3, references, value11) {
    const target = Deref(schema3, references);
    if (state.functions.has(schema3.$ref))
      return yield `${CreateFunctionName(schema3.$ref)}(${value11})`;
    yield* Visit17(target, references, value11);
  }
  function* FromRegExp5(schema3, references, value11) {
    const variable = CreateVariable(`${new RegExp(schema3.source, schema3.flags)};`);
    yield `(typeof ${value11} === 'string')`;
    if (IsNumber(schema3.maxLength))
      yield `${value11}.length <= ${schema3.maxLength}`;
    if (IsNumber(schema3.minLength))
      yield `${value11}.length >= ${schema3.minLength}`;
    yield `${variable}.test(${value11})`;
  }
  function* FromString6(schema3, references, value11) {
    yield `(typeof ${value11} === 'string')`;
    if (IsNumber(schema3.maxLength))
      yield `${value11}.length <= ${schema3.maxLength}`;
    if (IsNumber(schema3.minLength))
      yield `${value11}.length >= ${schema3.minLength}`;
    if (schema3.pattern !== undefined) {
      const variable = CreateVariable(`${new RegExp(schema3.pattern)};`);
      yield `${variable}.test(${value11})`;
    }
    if (schema3.format !== undefined) {
      yield `format('${schema3.format}', ${value11})`;
    }
  }
  function* FromSymbol6(schema3, references, value11) {
    yield `(typeof ${value11} === 'symbol')`;
  }
  function* FromTemplateLiteral7(schema3, references, value11) {
    yield `(typeof ${value11} === 'string')`;
    const variable = CreateVariable(`${new RegExp(schema3.pattern)};`);
    yield `${variable}.test(${value11})`;
  }
  function* FromThis11(schema3, references, value11) {
    yield `${CreateFunctionName(schema3.$ref)}(${value11})`;
  }
  function* FromTuple15(schema3, references, value11) {
    yield `Array.isArray(${value11})`;
    if (schema3.items === undefined)
      return yield `${value11}.length === 0`;
    yield `(${value11}.length === ${schema3.maxItems})`;
    for (let i = 0;i < schema3.items.length; i++) {
      const expression = CreateExpression(schema3.items[i], references, `${value11}[${i}]`);
      yield `${expression}`;
    }
  }
  function* FromUndefined6(schema3, references, value11) {
    yield `${value11} === undefined`;
  }
  function* FromUnion20(schema3, references, value11) {
    const expressions = schema3.anyOf.map((schema4) => CreateExpression(schema4, references, value11));
    yield `(${expressions.join(" || ")})`;
  }
  function* FromUint8Array5(schema3, references, value11) {
    yield `${value11} instanceof Uint8Array`;
    if (IsNumber(schema3.maxByteLength))
      yield `(${value11}.length <= ${schema3.maxByteLength})`;
    if (IsNumber(schema3.minByteLength))
      yield `(${value11}.length >= ${schema3.minByteLength})`;
  }
  function* FromUnknown5(schema3, references, value11) {
    yield "true";
  }
  function* FromVoid5(schema3, references, value11) {
    yield Policy.IsVoidLike(value11);
  }
  function* FromKind4(schema3, references, value11) {
    const instance = state.instances.size;
    state.instances.set(instance, schema3);
    yield `kind('${schema3[Kind]}', ${instance}, ${value11})`;
  }
  function* Visit17(schema3, references, value11, useHoisting = true) {
    const references_ = IsString(schema3.$id) ? [...references, schema3] : references;
    const schema_ = schema3;
    if (useHoisting && IsString(schema3.$id)) {
      const functionName = CreateFunctionName(schema3.$id);
      if (state.functions.has(functionName)) {
        return yield `${functionName}(${value11})`;
      } else {
        const functionCode = CreateFunction(functionName, schema3, references, "value", false);
        state.functions.set(functionName, functionCode);
        return yield `${functionName}(${value11})`;
      }
    }
    switch (schema_[Kind]) {
      case "Any":
        return yield* FromAny5(schema_, references_, value11);
      case "Array":
        return yield* FromArray16(schema_, references_, value11);
      case "AsyncIterator":
        return yield* FromAsyncIterator7(schema_, references_, value11);
      case "BigInt":
        return yield* FromBigInt6(schema_, references_, value11);
      case "Boolean":
        return yield* FromBoolean6(schema_, references_, value11);
      case "Constructor":
        return yield* FromConstructor8(schema_, references_, value11);
      case "Date":
        return yield* FromDate6(schema_, references_, value11);
      case "Function":
        return yield* FromFunction7(schema_, references_, value11);
      case "Integer":
        return yield* FromInteger6(schema_, references_, value11);
      case "Intersect":
        return yield* FromIntersect18(schema_, references_, value11);
      case "Iterator":
        return yield* FromIterator7(schema_, references_, value11);
      case "Literal":
        return yield* FromLiteral7(schema_, references_, value11);
      case "Never":
        return yield* FromNever6(schema_, references_, value11);
      case "Not":
        return yield* FromNot8(schema_, references_, value11);
      case "Null":
        return yield* FromNull6(schema_, references_, value11);
      case "Number":
        return yield* FromNumber6(schema_, references_, value11);
      case "Object":
        return yield* FromObject13(schema_, references_, value11);
      case "Promise":
        return yield* FromPromise8(schema_, references_, value11);
      case "Record":
        return yield* FromRecord12(schema_, references_, value11);
      case "Ref":
        return yield* FromRef12(schema_, references_, value11);
      case "RegExp":
        return yield* FromRegExp5(schema_, references_, value11);
      case "String":
        return yield* FromString6(schema_, references_, value11);
      case "Symbol":
        return yield* FromSymbol6(schema_, references_, value11);
      case "TemplateLiteral":
        return yield* FromTemplateLiteral7(schema_, references_, value11);
      case "This":
        return yield* FromThis11(schema_, references_, value11);
      case "Tuple":
        return yield* FromTuple15(schema_, references_, value11);
      case "Undefined":
        return yield* FromUndefined6(schema_, references_, value11);
      case "Union":
        return yield* FromUnion20(schema_, references_, value11);
      case "Uint8Array":
        return yield* FromUint8Array5(schema_, references_, value11);
      case "Unknown":
        return yield* FromUnknown5(schema_, references_, value11);
      case "Void":
        return yield* FromVoid5(schema_, references_, value11);
      default:
        if (!exports_type.Has(schema_[Kind]))
          throw new TypeCompilerUnknownTypeError(schema3);
        return yield* FromKind4(schema_, references_, value11);
    }
  }
  const state = {
    language: "javascript",
    functions: new Map,
    variables: new Map,
    instances: new Map
  };
  function CreateExpression(schema3, references, value11, useHoisting = true) {
    return `(${[...Visit17(schema3, references, value11, useHoisting)].join(" && ")})`;
  }
  function CreateFunctionName($id) {
    return `check_${Identifier.Encode($id)}`;
  }
  function CreateVariable(expression) {
    const variableName = `local_${state.variables.size}`;
    state.variables.set(variableName, `const ${variableName} = ${expression}`);
    return variableName;
  }
  function CreateFunction(name, schema3, references, value11, useHoisting = true) {
    const [newline, pad] = ["\n", (length) => "".padStart(length, " ")];
    const parameter = CreateParameter("value", "any");
    const returns = CreateReturns("boolean");
    const expression = [...Visit17(schema3, references, value11, useHoisting)].map((expression2) => `${pad(4)}${expression2}`).join(` &&${newline}`);
    return `function ${name}(${parameter})${returns} {${newline}${pad(2)}return (${newline}${expression}${newline}${pad(2)})\n}`;
  }
  function CreateParameter(name, type47) {
    const annotation = state.language === "typescript" ? `: ${type47}` : "";
    return `${name}${annotation}`;
  }
  function CreateReturns(type47) {
    return state.language === "typescript" ? `: ${type47}` : "";
  }
  function Build(schema3, references, options) {
    const functionCode = CreateFunction("check", schema3, references, "value");
    const parameter = CreateParameter("value", "any");
    const returns = CreateReturns("boolean");
    const functions = [...state.functions.values()];
    const variables = [...state.variables.values()];
    const checkFunction = IsString(schema3.$id) ? `return function check(${parameter})${returns} {\n  return ${CreateFunctionName(schema3.$id)}(value)\n}` : `return ${functionCode}`;
    return [...variables, ...functions, checkFunction].join("\n");
  }
  function Code(...args) {
    const defaults = { language: "javascript" };
    const [schema3, references, options] = args.length === 2 && IsArray(args[1]) ? [args[0], args[1], defaults] : args.length === 2 && !IsArray(args[1]) ? [args[0], [], args[1]] : args.length === 3 ? [args[0], args[1], args[2]] : args.length === 1 ? [args[0], [], defaults] : [null, [], defaults];
    state.language = options.language;
    state.variables.clear();
    state.functions.clear();
    state.instances.clear();
    if (!IsSchema2(schema3))
      throw new TypeCompilerTypeGuardError(schema3);
    for (const schema4 of references)
      if (!IsSchema2(schema4))
        throw new TypeCompilerTypeGuardError(schema4);
    return Build(schema3, references, options);
  }
  TypeCompiler2.Code = Code;
  function Compile(schema3, references = []) {
    const generatedCode = Code(schema3, references, { language: "javascript" });
    const compiledFunction = globalThis.Function("kind", "format", "hash", generatedCode);
    const instances = new Map(state.instances);
    function typeRegistryFunction(kind28, instance, value11) {
      if (!exports_type.Has(kind28) || !instances.has(instance))
        return false;
      const checkFunc = exports_type.Get(kind28);
      const schema4 = instances.get(instance);
      return checkFunc(schema4, value11);
    }
    function formatRegistryFunction(format, value11) {
      if (!exports_format.Has(format))
        return false;
      const checkFunc = exports_format.Get(format);
      return checkFunc(value11);
    }
    function hashFunction(value11) {
      return Hash(value11);
    }
    const checkFunction = compiledFunction(typeRegistryFunction, formatRegistryFunction, hashFunction);
    return new TypeCheck(schema3, references, checkFunction, generatedCode);
  }
  TypeCompiler2.Compile = Compile;
})(TypeCompiler || (TypeCompiler = {}));
// node_modules/elysia/dist/bun/index.js
function g2(j) {
  return j % 4 === 0 && (j % 100 !== 0 || j % 400 === 0);
}
function m1(j) {
  const W = y2.exec(j);
  if (!W)
    return false;
  const $ = +W[1], X = +W[2], Z = +W[3];
  return X >= 1 && X <= 12 && Z >= 1 && Z <= (X === 2 && g2($) ? 29 : f2[X]);
}
function _1(j) {
  return function W($) {
    const X = v2.exec($);
    if (!X)
      return false;
    const Z = +X[1], J = +X[2], Q = +X[3], K = X[4], Y = X[5] === "-" ? -1 : 1, B = +(X[6] || 0), U = +(X[7] || 0);
    if (B > 23 || U > 59 || j && !K)
      return false;
    if (Z <= 23 && J <= 59 && Q < 60)
      return true;
    const _ = J - U * Y, M = Z - B * Y - (_ < 0 ? 1 : 0);
    return (M === 23 || M === -1) && (_ === 59 || _ === -1) && Q < 61;
  };
}
function k1(j) {
  const W = _1(j);
  return function $(X) {
    const Z = X.split(k2);
    return Z.length === 2 && m1(Z[0]) && W(Z[1]);
  };
}
function m2(j) {
  return u2.test(j) && h2.test(j);
}
function d2(j) {
  return u1.lastIndex = 0, u1.test(j);
}
function p2(j) {
  return Number.isInteger(j) && j <= l2 && j >= c2;
}
function i2(j) {
  return Number.isInteger(j);
}
function h1() {
  return true;
}
function n2(j) {
  if (t2.test(j))
    return false;
  try {
    return new RegExp(j), true;
  } catch (W) {
    return false;
  }
}
function jj(j, W) {
  if (typeof j !== "string")
    throw new TypeError("argument str must be a string");
  var $ = {}, X = W || {}, Z = X.decode || $j, J = 0;
  while (J < j.length) {
    var Q = j.indexOf("=", J);
    if (Q === -1)
      break;
    var K = j.indexOf(";", J);
    if (K === -1)
      K = j.length;
    else if (K < Q) {
      J = j.lastIndexOf(";", Q - 1) + 1;
      continue;
    }
    var Y = j.slice(J, Q).trim();
    if ($[Y] === undefined) {
      var B = j.slice(Q + 1, K).trim();
      if (B.charCodeAt(0) === 34)
        B = B.slice(1, -1);
      $[Y] = Jj(B, Z);
    }
    J = K + 1;
  }
  return $;
}
function Wj(j, W, $) {
  var X = $ || {}, Z = X.encode || Xj;
  if (typeof Z !== "function")
    throw new TypeError("option encode is invalid");
  if (!s0.test(j))
    throw new TypeError("argument name is invalid");
  var J = Z(W);
  if (J && !s0.test(J))
    throw new TypeError("argument val is invalid");
  var Q = j + "=" + J;
  if (X.maxAge != null) {
    var K = X.maxAge - 0;
    if (isNaN(K) || !isFinite(K))
      throw new TypeError("option maxAge is invalid");
    Q += "; Max-Age=" + Math.floor(K);
  }
  if (X.domain) {
    if (!s0.test(X.domain))
      throw new TypeError("option domain is invalid");
    Q += "; Domain=" + X.domain;
  }
  if (X.path) {
    if (!s0.test(X.path))
      throw new TypeError("option path is invalid");
    Q += "; Path=" + X.path;
  }
  if (X.expires) {
    var Y = X.expires;
    if (!Zj(Y) || isNaN(Y.valueOf()))
      throw new TypeError("option expires is invalid");
    Q += "; Expires=" + Y.toUTCString();
  }
  if (X.httpOnly)
    Q += "; HttpOnly";
  if (X.secure)
    Q += "; Secure";
  if (X.partitioned)
    Q += "; Partitioned";
  if (X.priority) {
    var B = typeof X.priority === "string" ? X.priority.toLowerCase() : X.priority;
    switch (B) {
      case "low":
        Q += "; Priority=Low";
        break;
      case "medium":
        Q += "; Priority=Medium";
        break;
      case "high":
        Q += "; Priority=High";
        break;
      default:
        throw new TypeError("option priority is invalid");
    }
  }
  if (X.sameSite) {
    var U = typeof X.sameSite === "string" ? X.sameSite.toLowerCase() : X.sameSite;
    switch (U) {
      case true:
        Q += "; SameSite=Strict";
        break;
      case "lax":
        Q += "; SameSite=Lax";
        break;
      case "strict":
        Q += "; SameSite=Strict";
        break;
      case "none":
        Q += "; SameSite=None";
        break;
      default:
        throw new TypeError("option sameSite is invalid");
    }
  }
  return Q;
}
function $j(j) {
  return j.indexOf("%") !== -1 ? decodeURIComponent(j) : j;
}
function Xj(j) {
  return encodeURIComponent(j);
}
function Zj(j) {
  return e2.call(j) === "[object Date]" || j instanceof Date;
}
function Jj(j, W) {
  try {
    return W(j);
  } catch ($) {
    return j;
  }
}
function Mj(j) {
  let W = j;
  while (W.endsWith("="))
    W = W.slice(0, -1);
  return W;
}
function x0(j) {
  const W = {};
  if (typeof j !== "string")
    return W;
  let $ = "", X = "", Z = -1, J = -1, Q = 0;
  const K = j.length;
  for (let Y = 0;Y < K; Y++)
    switch (j.charCodeAt(Y)) {
      case 38:
        const B = J > Z;
        if (!B)
          J = Y;
        if ($ = j.slice(Z + 1, J), B || $.length > 0) {
          if (Q & 1)
            $ = $.replace(G1, " ");
          if (Q & 2)
            $ = c0.default($) || $;
          if (!W[$]) {
            if (B) {
              if (X = j.slice(J + 1, Y), Q & 4)
                X = X.replace(G1, " ");
              if (Q & 8)
                X = c0.default(X) || X;
            }
            W[$] = X;
          }
        }
        $ = "", X = "", Z = Y, J = Y, Q = 0;
        break;
      case 61:
        if (J <= Z)
          J = Y;
        else
          Q |= 8;
        break;
      case 43:
        if (J > Z)
          Q |= 4;
        else
          Q |= 1;
        break;
      case 37:
        if (J > Z)
          Q |= 8;
        else
          Q |= 2;
        break;
    }
  if (Z < K) {
    const Y = J > Z;
    if ($ = j.slice(Z + 1, Y ? J : K), Y || $.length > 0) {
      if (Q & 1)
        $ = $.replace(G1, " ");
      if (Q & 2)
        $ = c0.default($) || $;
      if (!W[$]) {
        if (Y) {
          if (X = j.slice(J + 1, K), Q & 4)
            X = X.replace(G1, " ");
          if (Q & 8)
            X = c0.default(X) || X;
        }
        W[$] = X;
      }
    }
  }
  return W;
}
var O2 = Object.create;
var { getPrototypeOf: V2, defineProperty: R1, getOwnPropertyNames: A2 } = Object;
var C2 = Object.prototype.hasOwnProperty;
var Y1 = (j, W, $) => {
  $ = j != null ? O2(V2(j)) : {};
  const X = W || !j || !j.__esModule ? R1($, "default", { value: j, enumerable: true }) : $;
  for (let Z of A2(j))
    if (!C2.call(X, Z))
      R1(X, Z, { get: () => j[Z], enumerable: true });
  return X;
};
var S2 = (j, W) => () => (W || j((W = { exports: {} }).exports, W), W.exports);
var r0 = S2((j3, r1) => {
  function Gj(j) {
    var W = j.indexOf("%");
    if (W === -1)
      return j;
    var $ = j.length, X = "", Z = 0, J = 0, Q = W, K = n1;
    while (W > -1 && W < $) {
      var Y = s1(j[W + 1], 4), B = s1(j[W + 2], 0), U = Y | B, _ = F1[U];
      if (K = F1[256 + K + _], J = J << 6 | U & F1[364 + _], K === n1)
        X += j.slice(Z, Q), X += J <= 65535 ? String.fromCharCode(J) : String.fromCharCode(55232 + (J >> 10), 56320 + (J & 1023)), J = 0, Z = W + 3, W = Q = j.indexOf("%", Z);
      else if (K === Qj)
        return null;
      else {
        if (W += 3, W < $ && j.charCodeAt(W) === 37)
          continue;
        return null;
      }
    }
    return X + j.slice(Z);
  }
  function s1(j, W) {
    var $ = Kj[j];
    return $ === undefined ? 255 : $ << W;
  }
  var n1 = 12, Qj = 0, F1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 10, 9, 9, 9, 11, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 24, 36, 48, 60, 72, 84, 96, 0, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 63, 63, 63, 0, 31, 15, 15, 15, 7, 7, 7], Kj = { "0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9, a: 10, A: 10, b: 11, B: 11, c: 12, C: 12, d: 13, D: 13, e: 14, E: 14, f: 15, F: 15 };
  r1.exports = Gj;
});
var T0 = (j, W) => {
  const $ = W?.length ? {} : null;
  if ($)
    for (let X of W)
      $[X.part.charCodeAt(0)] = X;
  return { part: j, store: null, inert: $, params: null, wildcardStore: null };
};
var x1 = (j, W) => ({ ...j, part: W });
var g1 = (j) => ({ name: j, store: null, inert: null });

class D0 {
  root = {};
  history = [];
  static regex = { static: /:.+?(?=\/|$)/, params: /:.+?(?=\/|$)/g, optionalParams: /:.+?\?(?=\/|$)/g };
  add(j, W, $, { ignoreError: X = false, ignoreHistory: Z = false } = {}) {
    if (typeof W !== "string")
      throw new TypeError("Route path must be a string");
    if (W === "")
      W = "/";
    else if (W[0] !== "/")
      W = `/${W}`;
    const J = W[W.length - 1] === "*", Q = W.match(D0.regex.optionalParams);
    if (Q) {
      const _ = W.replaceAll("?", "");
      this.add(j, _, $, { ignoreError: X });
      for (let M = 0;M < Q.length; M++) {
        let G = W.replace("/" + Q[M], "");
        this.add(j, G, $, { ignoreError: true });
      }
      return $;
    }
    if (Q)
      W = W.replaceAll("?", "");
    if (this.history.find(([_, M, G]) => _ === j && M === W))
      return $;
    if (J || Q && W.charCodeAt(W.length - 1) === 63)
      W = W.slice(0, -1);
    if (!Z)
      this.history.push([j, W, $]);
    const K = W.split(D0.regex.static), Y = W.match(D0.regex.params) || [];
    if (K[K.length - 1] === "")
      K.pop();
    let B;
    if (!this.root[j])
      B = this.root[j] = T0("/");
    else
      B = this.root[j];
    let U = 0;
    for (let _ = 0;_ < K.length; ++_) {
      let M = K[_];
      if (_ > 0) {
        const G = Y[U++].slice(1);
        if (B.params === null)
          B.params = g1(G);
        else if (B.params.name !== G)
          if (X)
            return $;
          else
            throw new Error(`Cannot create route "${W}" with parameter "${G}" because a route already exists with a different parameter name ("${B.params.name}") in the same location`);
        const w = B.params;
        if (w.inert === null) {
          B = w.inert = T0(M);
          continue;
        }
        B = w.inert;
      }
      for (let G = 0;; ) {
        if (G === M.length) {
          if (G < B.part.length) {
            const w = x1(B, B.part.slice(G));
            Object.assign(B, T0(M, [w]));
          }
          break;
        }
        if (G === B.part.length) {
          if (B.inert === null)
            B.inert = {};
          const w = B.inert[M.charCodeAt(G)];
          if (w) {
            B = w, M = M.slice(G), G = 0;
            continue;
          }
          const z = T0(M.slice(G));
          B.inert[M.charCodeAt(G)] = z, B = z;
          break;
        }
        if (M[G] !== B.part[G]) {
          const w = x1(B, B.part.slice(G)), z = T0(M.slice(G));
          Object.assign(B, T0(B.part.slice(0, G), [w, z])), B = z;
          break;
        }
        ++G;
      }
    }
    if (U < Y.length) {
      const _ = Y[U].slice(1);
      if (B.params === null)
        B.params = g1(_);
      else if (B.params.name !== _)
        if (X)
          return $;
        else
          throw new Error(`Cannot create route "${W}" with parameter "${_}" because a route already exists with a different parameter name ("${B.params.name}") in the same location`);
      if (B.params.store === null)
        B.params.store = $;
      return B.params.store;
    }
    if (J) {
      if (B.wildcardStore === null)
        B.wildcardStore = $;
      return B.wildcardStore;
    }
    if (B.store === null)
      B.store = $;
    return B.store;
  }
  find(j, W) {
    const $ = this.root[j];
    if (!$)
      return null;
    return U1(W, W.length, $, 0);
  }
}
var U1 = (j, W, $, X) => {
  const Z = $.part, J = Z.length, Q = X + J;
  if (J > 1) {
    if (Q > W)
      return null;
    if (J < 15) {
      for (let K = 1, Y = X + 1;K < J; ++K, ++Y)
        if (Z.charCodeAt(K) !== j.charCodeAt(Y))
          return null;
    } else if (j.slice(X, Q) !== Z)
      return null;
  }
  if (Q === W) {
    if ($.store !== null)
      return { store: $.store, params: {} };
    if ($.wildcardStore !== null)
      return { store: $.wildcardStore, params: { "*": "" } };
    return null;
  }
  if ($.inert !== null) {
    const K = $.inert[j.charCodeAt(Q)];
    if (K !== undefined) {
      const Y = U1(j, W, K, Q);
      if (Y !== null)
        return Y;
    }
  }
  if ($.params !== null) {
    const { store: K, name: Y, inert: B } = $.params, U = j.indexOf("/", Q);
    if (U !== Q) {
      if (U === -1 || U >= W) {
        if (K !== null) {
          const _ = {};
          return _[Y] = j.substring(Q, W), { store: K, params: _ };
        }
      } else if (B !== null) {
        const _ = U1(j, W, B, U);
        if (_ !== null)
          return _.params[Y] = j.substring(Q, U), _;
      }
    }
  }
  if ($.wildcardStore !== null)
    return { store: $.wildcardStore, params: { "*": j.substring(Q, W) } };
  return null;
};
var q0 = (j) => {
  const W = typeof j === "object" ? j.fn.toString() : typeof j === "string" ? j.toString() : j, $ = W.indexOf(")");
  if (W.charCodeAt($ + 2) === 61 && W.charCodeAt($ + 5) !== 123)
    return true;
  return W.includes("return");
};
var T2 = (j) => {
  if (j.startsWith("async"))
    j = j.slice(5);
  j = j.trimStart();
  let W = -1;
  if (j.charCodeAt(0) === 40) {
    if (W = j.indexOf("=>", j.indexOf(")")), W !== -1) {
      let Z = W;
      while (Z > 0)
        if (j.charCodeAt(--Z) === 41)
          break;
      let J = j.slice(W + 2);
      if (J.charCodeAt(0) === 32)
        J = J.trimStart();
      return [j.slice(1, Z), J, { isArrowReturn: J.charCodeAt(0) !== 123 }];
    }
  }
  if (j.startsWith("function")) {
    W = j.indexOf("(");
    const Z = j.indexOf(")");
    return [j.slice(W + 1, Z), j.slice(Z + 2), { isArrowReturn: false }];
  }
  const $ = j.indexOf("(");
  if ($ !== -1) {
    const Z = j.indexOf("\n", 2), J = j.slice(0, Z), Q = J.lastIndexOf(")") + 1, K = j.slice(Z + 1);
    return [J.slice($, Q), "{" + K, { isArrowReturn: false }];
  }
  const X = j.split("\n", 2);
  return [X[0], X[1], { isArrowReturn: false }];
};
var q2 = (j) => {
  const W = j.indexOf("{");
  if (W === -1)
    return [-1, 0];
  let $ = W + 1, X = 1;
  for (;$ < j.length; $++) {
    const Z = j.charCodeAt($);
    if (Z === 123)
      X++;
    else if (Z === 125)
      X--;
    if (X === 0)
      break;
  }
  if (X !== 0)
    return [0, j.length];
  return [W, $ + 1];
};
var L2 = (j) => {
  const W = j.lastIndexOf("}");
  if (W === -1)
    return [-1, 0];
  let $ = W - 1, X = 1;
  for (;$ >= 0; $--) {
    const Z = j.charCodeAt($);
    if (Z === 125)
      X++;
    else if (Z === 123)
      X--;
    if (X === 0)
      break;
  }
  if (X !== 0)
    return [-1, 0];
  return [$, W + 1];
};
var y1 = (j) => {
  while (true) {
    const W = j.indexOf(":");
    if (W === -1)
      break;
    let $ = j.indexOf(",", W);
    if ($ === -1)
      $ = j.indexOf("}", W) - 1;
    if ($ === -2)
      $ = j.length;
    j = j.slice(0, W) + j.slice($);
  }
  return j;
};
var f1 = (j) => {
  let W = false;
  if (j.charCodeAt(0) === 40)
    j = j.slice(1, -1);
  if (j.charCodeAt(0) === 123)
    W = true, j = j.slice(1, -1);
  j = j.replace(/( |\t|\n)/g, "").trim();
  let $ = [];
  while (true) {
    let [Z, J] = q2(j);
    if (Z === -1)
      break;
    if ($.push(j.slice(0, Z - 1)), j.charCodeAt(J) === 44)
      J++;
    j = j.slice(J);
  }
  if (j = y1(j), j)
    $ = $.concat(j.split(","));
  const X = [];
  for (let Z of $) {
    if (Z.indexOf(",") === -1) {
      X.push(Z);
      continue;
    }
    for (let J of Z.split(","))
      X.push(J.trim());
  }
  return $ = X, { hasParenthesis: W, parameters: $ };
};
var E2 = (j, W) => {
  const { parameters: $, hasParenthesis: X } = f1(j);
  if (!W.query && $.includes("query"))
    W.query = true;
  if (!W.headers && $.includes("headers"))
    W.headers = true;
  if (!W.body && $.includes("body"))
    W.body = true;
  if (!W.cookie && $.includes("cookie"))
    W.cookie = true;
  if (!W.set && $.includes("set"))
    W.set = true;
  if (!W.server && $.includes("server"))
    W.server = true;
  if (X)
    return `{ ${$.join(", ")} }`;
  return $.join(", ");
};
var H2 = (j, W, $) => {
  const X = W.indexOf(j + "\n", $), Z = W.indexOf(j + "\t", $), J = W.indexOf(j + ",", $), Q = W.indexOf(j + ";", $), K = W.indexOf(j + " ", $);
  return [X, Z, J, Q, K].filter((Y) => Y > 0).sort((Y, B) => Y - B)[0] || -1;
};
var v1 = (j, W, $ = 0) => {
  if ($ > 5)
    return [];
  const X = [];
  let Z = W;
  while (true) {
    let J = H2(" = " + j, Z);
    if (J === -1) {
      const Y = Z.indexOf(" = " + j);
      if (Y + 3 + j.length !== Z.length)
        break;
      J = Y;
    }
    const Q = Z.slice(0, J);
    let K = Q.slice(Q.lastIndexOf(" ") + 1);
    if (K === "}") {
      const [Y, B] = L2(Q);
      X.push(y1(Z.slice(Y, B))), Z = Z.slice(J + 3 + j.length);
      continue;
    }
    while (K.charCodeAt(0) === 44)
      K = K.slice(1);
    while (K.charCodeAt(0) === 9)
      K = K.slice(1);
    if (!K.includes("("))
      X.push(K);
    Z = Z.slice(J + 3 + j.length);
  }
  for (let J of X) {
    if (J.charCodeAt(0) === 123)
      continue;
    const Q = v1(J, W);
    if (Q.length > 0)
      X.push(...Q);
  }
  return X;
};
var b2 = (j) => {
  if (!j)
    return;
  if (j.charCodeAt(0) !== 123)
    return j;
  if (j = j.slice(2, -2), !j.includes(",")) {
    if (j.includes("..."))
      return j.slice(j.indexOf("...") + 3);
    return;
  }
  const $ = j.indexOf("...");
  if ($ === -1)
    return;
  return j.slice($ + 3).trimEnd();
};
var R2 = (j, W, $) => {
  const X = (Z, J) => j.includes(J + "." + Z) || j.includes(J + '["' + Z + '"]') || j.includes(J + "['" + Z + "']");
  for (let Z of W) {
    if (!Z)
      continue;
    if (Z.charCodeAt(0) === 123) {
      const J = f1(Z).parameters;
      if (!$.query && J.includes("query"))
        $.query = true;
      if (!$.headers && J.includes("headers"))
        $.headers = true;
      if (!$.body && J.includes("body"))
        $.body = true;
      if (!$.cookie && J.includes("cookie"))
        $.cookie = true;
      if (!$.set && J.includes("set"))
        $.set = true;
      if (!$.query && J.includes("server"))
        $.server = true;
      continue;
    }
    if (!$.query && X("query", Z))
      $.query = true;
    if (j.includes("return " + Z) || j.includes("return " + Z + ".query"))
      $.query = true;
    if (!$.headers && X("headers", Z))
      $.headers = true;
    if (!$.body && X("body", Z))
      $.body = true;
    if (!$.cookie && X("cookie", Z))
      $.cookie = true;
    if (!$.set && X("set", Z))
      $.set = true;
    if (!$.server && X("server", Z))
      $.server = true;
    if ($.query && $.headers && $.body && $.cookie && $.set && $.server)
      break;
  }
  return W;
};
var x2 = (j, W, $) => {
  try {
    const X = new RegExp(`(?:\\w)\\((?:.*)?${j}`, "gs");
    X.test(W);
    const Z = W.charCodeAt(X.lastIndex);
    if (Z === 41 || Z === 44)
      return $.query = true, $.headers = true, $.body = true, $.cookie = true, $.set = true, $.server = true, true;
    return false;
  } catch (X) {
    return console.log("[Sucrose] warning: unexpected isContextPassToFunction error, you may continue development as usual but please report the following to maintainers:"), console.log("--- body ---"), console.log(W), console.log("--- context ---"), console.log(j), true;
  }
};
var t0 = (j, W = { query: false, headers: false, body: false, cookie: false, set: false, server: false }) => {
  const $ = [];
  if (j.handler && typeof j.handler === "function")
    $.push(j.handler);
  if (j.request?.length)
    $.push(...j.request);
  if (j.beforeHandle?.length)
    $.push(...j.beforeHandle);
  if (j.parse?.length)
    $.push(...j.parse);
  if (j.error?.length)
    $.push(...j.error);
  if (j.transform?.length)
    $.push(...j.transform);
  if (j.afterHandle?.length)
    $.push(...j.afterHandle);
  if (j.mapResponse?.length)
    $.push(...j.mapResponse);
  if (j.afterResponse?.length)
    $.push(...j.afterResponse);
  for (let X of $) {
    if (!X)
      continue;
    const Z = "fn" in X ? X.fn : X, [J, Q, { isArrowReturn: K }] = T2(Z.toString()), Y = E2(J, W), B = b2(Y);
    if (B) {
      const U = v1(B, Q);
      if (U.splice(0, -1, B), !x2(B, Q, W))
        R2(Q, U, W);
      if (!W.query && Q.includes("return " + B + ".query"))
        W.query = true;
    }
    if (W.query && W.headers && W.body && W.cookie && W.set && W.server)
      break;
  }
  return W;
};
var n0 = { date: m1, time: _1(true), "date-time": k1(true), "iso-time": _1(false), "iso-date-time": k1(false), duration: /^P(?!$)((\d+Y)?(\d+M)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?|(\d+W)?)$/, uri: m2, "uri-reference": /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i, "uri-template": /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i, url: /^(?:https?|ftp):\/\/(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)(?:\.(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu, email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i, hostname: /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i, ipv4: /^(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)\.){3}(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)$/, ipv6: /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))$/i, regex: n2, uuid: /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i, "json-pointer": /^(?:\/(?:[^~/]|~0|~1)*)*$/, "json-pointer-uri-fragment": /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i, "relative-json-pointer": /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/, byte: d2, int32: { type: "number", validate: p2 }, int64: { type: "number", validate: i2 }, float: { type: "number", validate: h1 }, double: { type: "number", validate: h1 }, password: true, binary: true };
var y2 = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
var f2 = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var v2 = /^(\d\d):(\d\d):(\d\d(?:\.\d+)?)(z|([+-])(\d\d)(?::?(\d\d))?)?$/i;
var k2 = /t|\s/i;
var u2 = /\/|:/;
var h2 = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
var u1 = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/gm;
var c2 = -2147483648;
var l2 = 2147483647;
var t2 = /[^\\]\\Z/;
var p1 = /(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/;
var i1 = /(?:Sun|Mon|Tue|Wed|Thu|Fri|Sat)\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s\d{2}\s\d{4}\s\d{2}:\d{2}:\d{2}\sGMT(?:\+|-)\d{4}\s\([^)]+\)/;
var t1 = /^(?:(?:(?:(?:0?[1-9]|[12][0-9]|3[01])[/\s-](?:0?[1-9]|1[0-2])[/\s-](?:19|20)\d{2})|(?:(?:19|20)\d{2}[/\s-](?:0?[1-9]|1[0-2])[/\s-](?:0?[1-9]|[12][0-9]|3[01]))))(?:\s(?:1[012]|0?[1-9]):[0-5][0-9](?::[0-5][0-9])?(?:\s[AP]M)?)?$/;
var s2 = n0.date;
var r2 = n0["date-time"];
if (!exports_format.Has("date"))
  TypeSystem.Format("date", (j) => {
    const W = j.replace(/"/g, "");
    if (p1.test(W) || i1.test(W) || t1.test(W) || s2(W)) {
      const $ = new Date(W);
      if (!Number.isNaN($.getTime()))
        return true;
    }
    return false;
  });
if (!exports_format.Has("date-time"))
  TypeSystem.Format("date-time", (j) => {
    const W = j.replace(/"/g, "");
    if (p1.test(W) || i1.test(W) || t1.test(W) || r2(W)) {
      const $ = new Date(W);
      if (!Number.isNaN($.getTime()))
        return true;
    }
    return false;
  });
Object.entries(n0).forEach((j) => {
  const [W, $] = j;
  if (!exports_format.Has(W)) {
    if ($ instanceof RegExp)
      TypeSystem.Format(W, (X) => $.test(X));
    else if (typeof $ === "function")
      TypeSystem.Format(W, $);
  }
});
var A = Object.assign({}, Type);
var c1 = (j) => {
  if (typeof j === "string")
    switch (j.slice(-1)) {
      case "k":
        return +j.slice(0, j.length - 1) * 1024;
      case "m":
        return +j.slice(0, j.length - 1) * 1048576;
      default:
        return +j;
    }
  return j;
};
var w1 = (j, W) => {
  if (!(W instanceof Blob))
    return false;
  if (j.minSize && W.size < c1(j.minSize))
    return false;
  if (j.maxSize && W.size > c1(j.maxSize))
    return false;
  if (j.extension)
    if (typeof j.extension === "string") {
      if (!W.type.startsWith(j.extension))
        return false;
    } else {
      for (let $ = 0;$ < j.extension.length; $++)
        if (W.type.startsWith(j.extension[$]))
          return true;
      return false;
    }
  return true;
};
var a2 = exports_type.Get("Files") ?? TypeSystem.Type("File", w1);
var o2 = exports_type.Get("Files") ?? TypeSystem.Type("Files", (j, W) => {
  if (!Array.isArray(W))
    return w1(j, W);
  if (j.minItems && W.length < j.minItems)
    return false;
  if (j.maxItems && W.length > j.maxItems)
    return false;
  for (let $ = 0;$ < W.length; $++)
    if (!w1(j, W[$]))
      return false;
  return true;
});
if (!exports_format.Has("numeric"))
  exports_format.Set("numeric", (j) => !!j && !isNaN(+j));
if (!exports_format.Has("boolean"))
  exports_format.Set("boolean", (j) => j === "true" || j === "false");
if (!exports_format.Has("ObjectString"))
  exports_format.Set("ObjectString", (j) => {
    let W = j.charCodeAt(0);
    if (W === 9 || W === 10 || W === 32)
      W = j.trimStart().charCodeAt(0);
    if (W !== 123 && W !== 91)
      return false;
    try {
      return JSON.parse(j), true;
    } catch {
      return false;
    }
  });
if (!exports_format.Has("ArrayString"))
  exports_format.Set("ArrayString", (j) => {
    let W = j.charCodeAt(0);
    if (W === 9 || W === 10 || W === 32)
      W = j.trimStart().charCodeAt(0);
    if (W !== 123 && W !== 91)
      return false;
    try {
      return JSON.parse(j), true;
    } catch {
      return false;
    }
  });
var Q0 = { Numeric: (j) => {
  const W = Type.Number(j);
  return A.Transform(A.Union([A.String({ format: "numeric", default: 0 }), A.Number(j)], j)).Decode(($) => {
    const X = +$;
    if (isNaN(X))
      return $;
    if (j && !exports_value2.Check(W, X))
      throw new L("property", W, X);
    return X;
  }).Encode(($) => $);
}, Date: (j) => {
  const W = Type.Date(j);
  return A.Transform(A.Union([Type.Date(j), A.String({ format: "date", default: new Date().toISOString() }), A.String({ format: "date-time", default: new Date().toISOString() })], j)).Decode(($) => {
    if ($ instanceof Date)
      return $;
    const X = new Date($);
    if (!exports_value2.Check(W, X))
      throw new L("property", W, X);
    return X;
  }).Encode(($) => {
    if (typeof $ === "string")
      return new Date($);
    return $;
  });
}, BooleanString: (j) => {
  const W = Type.Boolean(j);
  return A.Transform(A.Union([A.String({ format: "boolean", default: false }), A.Boolean(j)], j)).Decode(($) => {
    if (typeof $ === "string")
      return $ === "true";
    if (j && !exports_value2.Check(W, $))
      throw new L("property", W, $);
    return $;
  }).Encode(($) => $);
}, ObjectString: (j, W) => {
  const $ = A.Object(j, W), X = JSON.stringify(exports_value2.Create($));
  let Z;
  try {
    Z = TypeCompiler.Compile($);
  } catch {
  }
  return A.Transform(A.Union([A.String({ format: "ObjectString", default: X }), $])).Decode((J) => {
    if (typeof J === "string") {
      if (J.charCodeAt(0) !== 123)
        throw new L("property", $, J);
      try {
        J = JSON.parse(J);
      } catch {
        throw new L("property", $, J);
      }
      if (Z) {
        if (!Z.Check(J))
          throw new L("property", $, J);
        return Z.Decode(J);
      }
      if (!exports_value2.Check($, J))
        throw new L("property", $, J);
      return exports_value2.Decode($, J);
    }
    return J;
  }).Encode((J) => {
    if (typeof J === "string")
      try {
        J = JSON.parse(J);
      } catch {
        throw new L("property", $, J);
      }
    if (!exports_value2.Check($, J))
      throw new L("property", $, J);
    return JSON.stringify(J);
  });
}, ArrayString: (j = {}, W) => {
  const $ = A.Array(j, W), X = JSON.stringify(exports_value2.Create($));
  let Z;
  try {
    Z = TypeCompiler.Compile($);
  } catch {
  }
  return A.Transform(A.Union([A.String({ format: "ArrayString", default: X }), $])).Decode((J) => {
    if (typeof J === "string") {
      if (J.charCodeAt(0) !== 91)
        throw new L("property", $, J);
      try {
        J = JSON.parse(J);
      } catch {
        throw new L("property", $, J);
      }
      if (Z) {
        if (!Z.Check(J))
          throw new L("property", $, J);
        return Z.Decode(J);
      }
      if (!exports_value2.Check($, J))
        throw new L("property", $, J);
      return exports_value2.Decode($, J);
    }
    return J;
  }).Encode((J) => {
    if (typeof J === "string")
      try {
        J = JSON.parse(J);
      } catch {
        throw new L("property", $, J);
      }
    if (!exports_value2.Check($, J))
      throw new L("property", $, J);
    return JSON.stringify(J);
  });
}, File: a2, Files: (j = {}) => A.Transform(o2(j)).Decode((W) => {
  if (Array.isArray(W))
    return W;
  return [W];
}).Encode((W) => W), Nullable: (j) => A.Union([j, A.Null()]), MaybeEmpty: (j) => A.Union([j, A.Null(), A.Undefined()]), Cookie: (j, { domain: W, expires: $, httpOnly: X, maxAge: Z, path: J, priority: Q, sameSite: K, secure: Y, secrets: B, sign: U, ..._ } = {}) => {
  const M = A.Object(j, _);
  return M.config = { domain: W, expires: $, httpOnly: X, maxAge: Z, path: J, priority: Q, sameSite: K, secure: Y, secrets: B, sign: U }, M;
} };
A.BooleanString = Q0.BooleanString;
A.ObjectString = Q0.ObjectString;
A.ArrayString = Q0.ArrayString;
A.Numeric = Q0.Numeric;
A.File = (j = {}) => Q0.File({ default: "File", ...j, extension: j?.type, type: "string", format: "binary" });
A.Files = (j = {}) => Q0.Files({ ...j, elysiaMeta: "Files", default: "Files", extension: j?.type, type: "array", items: { ...j, default: "Files", type: "string", format: "binary" } });
A.Nullable = (j) => Q0.Nullable(j);
A.MaybeEmpty = Q0.MaybeEmpty;
A.Cookie = Q0.Cookie;
A.Date = Q0.Date;
/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
var D1 = jj;
var M1 = Wj;
var e2 = Object.prototype.toString;
var s0 = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
var o1 = Y1(r0(), 1);

class B0 {
  j;
  W;
  $;
  constructor(j, W, $ = {}) {
    this.name = j;
    this.jar = W;
    this.initial = $;
  }
  get cookie() {
    if (!(this.name in this.jar))
      return this.initial;
    return this.jar[this.name];
  }
  set cookie(j) {
    if (!(this.name in this.jar))
      this.jar[this.name] = this.initial;
    this.jar[this.name] = j;
  }
  get value() {
    return this.cookie.value;
  }
  set value(j) {
    if (!(this.name in this.jar))
      this.jar[this.name] = this.initial;
    this.jar[this.name].value = j;
  }
  get expires() {
    return this.cookie.expires;
  }
  set expires(j) {
    this.cookie.expires = j;
  }
  get maxAge() {
    return this.cookie.maxAge;
  }
  set maxAge(j) {
    this.cookie.maxAge = j;
  }
  get domain() {
    return this.cookie.domain;
  }
  set domain(j) {
    this.cookie.domain = j;
  }
  get path() {
    return this.cookie.path;
  }
  set path(j) {
    this.cookie.path = j;
  }
  get secure() {
    return this.cookie.secure;
  }
  set secure(j) {
    this.cookie.secure = j;
  }
  get httpOnly() {
    return this.cookie.httpOnly;
  }
  set httpOnly(j) {
    this.cookie.httpOnly = j;
  }
  get sameSite() {
    return this.cookie.sameSite;
  }
  set sameSite(j) {
    this.cookie.sameSite = j;
  }
  get priority() {
    return this.cookie.priority;
  }
  set priority(j) {
    this.cookie.priority = j;
  }
  get partitioned() {
    return this.cookie.partitioned;
  }
  set partitioned(j) {
    this.cookie.partitioned = j;
  }
  get secrets() {
    return this.cookie.secrets;
  }
  set secrets(j) {
    this.cookie.secrets = j;
  }
  update(j) {
    return this.cookie = Object.assign(this.cookie, typeof j === "function" ? j(this.cookie) : j), this;
  }
  set(j) {
    return this.cookie = Object.assign({ ...this.initial, value: this.value }, typeof j === "function" ? j(this.cookie) : j), this;
  }
  remove() {
    if (this.value === undefined)
      return;
    return this.set({ expires: new Date(0), maxAge: 0, value: "" }), this;
  }
  toString() {
    return typeof this.value === "object" ? JSON.stringify(this.value) : this.value?.toString() ?? "";
  }
}
var a1 = (j, W, $) => {
  if (!j.cookie)
    j.cookie = {};
  return new Proxy(W, { get(X, Z) {
    if (Z in W)
      return new B0(Z, j.cookie, Object.assign({}, $ ?? {}, W[Z]));
    return new B0(Z, j.cookie, Object.assign({}, $));
  } });
};
var a0 = async (j, W, { secrets: $, sign: X, ...Z } = {}) => {
  if (!W)
    return a1(j, {}, Z);
  const J = typeof $ === "string";
  if (X && X !== true && !Array.isArray(X))
    X = [X];
  const Q = {}, K = D1(W);
  for (let [Y, B] of Object.entries(K)) {
    let U = o1.default(B);
    if (X === true || X?.includes(Y)) {
      if (!$)
        throw new Error("No secret is provided to cookie plugin");
      if (J) {
        const _ = await z1(U, $);
        if (_ === false)
          throw new f0(Y);
        U = _;
      } else {
        let _ = true;
        for (let M = 0;M < $.length; M++) {
          const G = await z1(U, $[M]);
          if (G !== false) {
            _ = true, U = G;
            break;
          }
        }
        if (!_)
          throw new f0(Y);
      }
    }
    Q[Y] = { value: U };
  }
  return a1(j, Q, Z);
};
var e1 = "toJSON" in new Headers;
var p = (j) => {
  if (!j)
    return false;
  for (let W in j)
    return true;
  return false;
};
var v0 = (j, W) => {
  const $ = j.size;
  if (!W && $ || $ && W && W.status !== 206 && W.status !== 304 && W.status !== 412 && W.status !== 416) {
    if (W) {
      if (W.headers instanceof Headers) {
        if (e1)
          W.headers = W.headers.toJSON();
        else
          for (let [X, Z] of W.headers.entries())
            if (X in W.headers)
              W.headers[X] = Z;
      }
      return new Response(j, { status: W.status, headers: Object.assign({ "accept-ranges": "bytes", "content-range": `bytes 0-${$ - 1}/${$}` }, W.headers) });
    }
    return new Response(j, { headers: { "accept-ranges": "bytes", "content-range": `bytes 0-${$ - 1}/${$}` } });
  }
  return new Response(j);
};
var j2 = (j, W) => {
  if (!j)
    return j;
  j.delete("set-cookie");
  for (let $ = 0;$ < W.length; $++) {
    const X = W[$].indexOf("=");
    j.append("set-cookie", `${W[$].slice(0, X)}=${W[$].slice(X + 1) || ""}`);
  }
  return j;
};
var W2 = (j) => {
  if (!j || !p(j))
    return;
  const W = [];
  for (let [$, X] of Object.entries(j)) {
    if (!$ || !X)
      continue;
    const Z = X.value;
    if (Z === undefined || Z === null)
      continue;
    W.push(M1($, typeof Z === "object" ? JSON.stringify(Z) : Z + "", X));
  }
  if (W.length === 0)
    return;
  if (W.length === 1)
    return W[0];
  return W;
};
var k0 = async (j, W, $) => {
  let X = j.next();
  if (X instanceof Promise)
    X = await X;
  if (X.done) {
    if (W)
      return y(X.value, W, $);
    return e(X.value, $);
  }
  return new Response(new ReadableStream({ async start(Z) {
    let J = false;
    if ($?.signal.addEventListener("abort", () => {
      J = true;
      try {
        Z.close();
      } catch {
      }
    }), X.value !== undefined && X.value !== null)
      if (typeof X.value === "object")
        try {
          Z.enqueue(Buffer.from(JSON.stringify(X.value)));
        } catch {
          Z.enqueue(Buffer.from(X.value.toString()));
        }
      else
        Z.enqueue(Buffer.from(X.value.toString()));
    for await (let Q of j) {
      if (J)
        break;
      if (Q === undefined || Q === null)
        continue;
      if (typeof Q === "object")
        try {
          Z.enqueue(Buffer.from(JSON.stringify(Q)));
        } catch {
          Z.enqueue(Buffer.from(Q.toString()));
        }
      else
        Z.enqueue(Buffer.from(Q.toString()));
      await new Promise((K) => setTimeout(() => K(), 0));
    }
    try {
      Z.close();
    } catch {
    }
  } }), { ...W, headers: { "transfer-encoding": "chunked", "content-type": "text/event-stream; charset=utf-8", ...W?.headers } });
};
var y = (j, W, $) => {
  if (p(W.headers) || W.status !== 200 || W.redirect || W.cookie) {
    if (typeof W.status === "string")
      W.status = Y0[W.status];
    if (W.redirect) {
      if (W.headers.Location = W.redirect, !W.status || W.status < 300 || W.status >= 400)
        W.status = 302;
    }
    if (W.cookie && p(W.cookie)) {
      const X = W2(W.cookie);
      if (X)
        W.headers["set-cookie"] = X;
    }
    if (W.headers["set-cookie"] && Array.isArray(W.headers["set-cookie"]))
      W.headers = j2(new Headers(W.headers), W.headers["set-cookie"]);
    switch (j?.constructor?.name) {
      case "String":
        return new Response(j, W);
      case "Blob":
        return v0(j, W);
      case "Array":
        return Response.json(j, W);
      case "Object":
        const X = j[d];
        if (X)
          return W.status = X, y(j.response, W, $);
        for (let J in Object.values(j))
          switch (J?.constructor?.name) {
            case "Blob":
            case "File":
            case "ArrayBuffer":
            case "FileRef":
              return new Response(z0(j));
            default:
              break;
          }
        return Response.json(j, W);
      case "ReadableStream":
        if (!W.headers["content-type"]?.startsWith("text/event-stream"))
          W.headers["content-type"] = "text/event-stream; charset=utf-8";
        return $?.signal.addEventListener("abort", { handleEvent() {
          if (!$?.signal.aborted)
            j.cancel($);
        } }, { once: true }), new Response(j, W);
      case undefined:
        if (!j)
          return new Response("", W);
        return Response.json(j, W);
      case "Response":
        let Z = false;
        if (W.headers instanceof Headers)
          for (let J of W.headers.keys())
            if (J === "set-cookie") {
              if (Z)
                continue;
              Z = true;
              for (let Q of W.headers.getSetCookie())
                j.headers.append("set-cookie", Q);
            } else
              j.headers.append(J, W.headers?.get(J) ?? "");
        else
          for (let J in W.headers)
            j.headers.append(J, W.headers[J]);
        if (j.status !== W.status)
          W.status = j.status;
        return j;
      case "Error":
        return G0(j, W);
      case "Promise":
        return j.then((J) => y(J, W));
      case "Function":
        return y(j(), W);
      case "Number":
      case "Boolean":
        return new Response(j.toString(), W);
      case "Cookie":
        if (j instanceof B0)
          return new Response(j.value, W);
        return new Response(j?.toString(), W);
      case "FormData":
        return new Response(j, W);
      default:
        if (j instanceof Response) {
          let J = false;
          if (W.headers instanceof Headers)
            for (let Q of W.headers.keys())
              if (Q === "set-cookie") {
                if (J)
                  continue;
                J = true;
                for (let K of W.headers.getSetCookie())
                  j.headers.append("set-cookie", K);
              } else
                j.headers.append(Q, W.headers?.get(Q) ?? "");
          else
            for (let Q in W.headers)
              j.headers.append(Q, W.headers[Q]);
          if (e1)
            W.headers = j.headers.toJSON();
          else
            for (let [Q, K] of j.headers.entries())
              if (Q in W.headers)
                W.headers[Q] = K;
          return j;
        }
        if (j instanceof Promise)
          return j.then((J) => y(J, W));
        if (j instanceof Error)
          return G0(j, W);
        if (typeof j?.next === "function")
          return k0(j, W, $);
        if ("toResponse" in j)
          return y(j.toResponse(), W);
        if ("charCodeAt" in j) {
          const J = j.charCodeAt(0);
          if (J === 123 || J === 91) {
            if (!W.headers["Content-Type"])
              W.headers["Content-Type"] = "application/json";
            return new Response(JSON.stringify(j), W);
          }
        }
        return new Response(j, W);
    }
  } else
    switch (j?.constructor?.name) {
      case "String":
        return new Response(j);
      case "Blob":
        return v0(j, W);
      case "Array":
        return Response.json(j);
      case "Object":
        const X = j[d];
        if (X)
          return W.status = X, y(j.response, W, $);
        for (let Z in Object.values(j))
          switch (Z?.constructor?.name) {
            case "Blob":
            case "File":
            case "ArrayBuffer":
            case "FileRef":
              return new Response(z0(j), W);
            default:
              break;
          }
        return Response.json(j, W);
      case "ReadableStream":
        return $?.signal.addEventListener("abort", { handleEvent() {
          if (!$?.signal.aborted)
            j.cancel($);
        } }, { once: true }), new Response(j, { headers: { "Content-Type": "text/event-stream; charset=utf-8" } });
      case undefined:
        if (!j)
          return new Response("");
        return new Response(JSON.stringify(j), { headers: { "content-type": "application/json" } });
      case "Response":
        return j;
      case "Error":
        return G0(j, W);
      case "Promise":
        return j.then((Z) => {
          const J = e(Z, $);
          if (J !== undefined)
            return J;
          return new Response("");
        });
      case "Function":
        return e(j(), $);
      case "Number":
      case "Boolean":
        return new Response(j.toString());
      case "Cookie":
        if (j instanceof B0)
          return new Response(j.value, W);
        return new Response(j?.toString(), W);
      case "FormData":
        return new Response(j, W);
      default:
        if (j instanceof Response)
          return new Response(j.body, { headers: { "Content-Type": "application/json" } });
        if (j instanceof Promise)
          return j.then((Z) => y(Z, W));
        if (j instanceof Error)
          return G0(j, W);
        if (typeof j?.next === "function")
          return k0(j, W, $);
        if ("toResponse" in j)
          return y(j.toResponse(), W);
        if ("charCodeAt" in j) {
          const Z = j.charCodeAt(0);
          if (Z === 123 || Z === 91) {
            if (!W.headers["Content-Type"])
              W.headers["Content-Type"] = "application/json";
            return new Response(JSON.stringify(j), W);
          }
        }
        return new Response(j);
    }
};
var f = (j, W, $) => {
  if (j === undefined || j === null)
    return;
  if (p(W.headers) || W.status !== 200 || W.redirect || W.cookie) {
    if (typeof W.status === "string")
      W.status = Y0[W.status];
    if (W.redirect) {
      if (W.headers.Location = W.redirect, !W.status || W.status < 300 || W.status >= 400)
        W.status = 302;
    }
    if (W.cookie && p(W.cookie)) {
      const X = W2(W.cookie);
      if (X)
        W.headers["set-cookie"] = X;
    }
    if (W.headers["set-cookie"] && Array.isArray(W.headers["set-cookie"]))
      W.headers = j2(new Headers(W.headers), W.headers["set-cookie"]);
    switch (j?.constructor?.name) {
      case "String":
        return new Response(j, W);
      case "Blob":
        return v0(j, W);
      case "Array":
        return Response.json(j, W);
      case "Object":
        const X = j[d];
        if (X)
          return W.status = X, f(j.response, W, $);
        for (let J in Object.values(j))
          switch (J?.constructor?.name) {
            case "Blob":
            case "File":
            case "ArrayBuffer":
            case "FileRef":
              return new Response(z0(j), W);
            default:
              break;
          }
        return Response.json(j, W);
      case "ReadableStream":
        if (!W.headers["content-type"]?.startsWith("text/event-stream"))
          W.headers["content-type"] = "text/event-stream; charset=utf-8";
        return $?.signal.addEventListener("abort", { handleEvent() {
          if (!$?.signal.aborted)
            j.cancel($);
        } }, { once: true }), new Response(j, W);
      case undefined:
        if (!j)
          return;
        return Response.json(j, W);
      case "Response":
        let Z = false;
        if (W.headers instanceof Headers)
          for (let J of W.headers.keys())
            if (J === "set-cookie") {
              if (Z)
                continue;
              Z = true;
              for (let Q of W.headers.getSetCookie())
                j.headers.append("set-cookie", Q);
            } else
              j.headers.append(J, W.headers?.get(J) ?? "");
        else
          for (let J in W.headers)
            j.headers.append(J, W.headers[J]);
        if (j.status !== W.status)
          W.status = j.status;
        return j;
      case "Promise":
        return j.then((J) => {
          const Q = f(J, W);
          if (Q !== undefined)
            return Q;
        });
      case "Error":
        return G0(j, W);
      case "Function":
        return f(j(), W);
      case "Number":
      case "Boolean":
        return new Response(j.toString(), W);
      case "FormData":
        return new Response(j);
      case "Cookie":
        if (j instanceof B0)
          return new Response(j.value, W);
        return new Response(j?.toString(), W);
      default:
        if (j instanceof Response) {
          let J = false;
          if (W.headers instanceof Headers)
            for (let Q of W.headers.keys())
              if (Q === "set-cookie") {
                if (J)
                  continue;
                J = true;
                for (let K of W.headers.getSetCookie())
                  j.headers.append("set-cookie", K);
              } else
                j.headers.append(Q, W.headers?.get(Q) ?? "");
          else
            for (let Q in W.headers)
              j.headers.append(Q, W.headers[Q]);
          if (j.status !== W.status)
            W.status = j.status;
          return j;
        }
        if (j instanceof Promise)
          return j.then((J) => f(J, W));
        if (j instanceof Error)
          return G0(j, W);
        if (typeof j?.next === "function")
          return k0(j, W, $);
        if ("toResponse" in j)
          return f(j.toResponse(), W);
        if ("charCodeAt" in j) {
          const J = j.charCodeAt(0);
          if (J === 123 || J === 91) {
            if (!W.headers["Content-Type"])
              W.headers["Content-Type"] = "application/json";
            return new Response(JSON.stringify(j), W);
          }
        }
        return new Response(j, W);
    }
  } else
    switch (j?.constructor?.name) {
      case "String":
        return new Response(j);
      case "Blob":
        return v0(j, W);
      case "Array":
        return Response.json(j);
      case "Object":
        const X = j[d];
        if (X)
          return W.status = X, f(j.response, W, $);
        for (let Z in Object.values(j))
          switch (Z?.constructor?.name) {
            case "Blob":
            case "File":
            case "ArrayBuffer":
            case "FileRef":
              return new Response(z0(j), W);
            default:
              break;
          }
        return Response.json(j, W);
      case "ReadableStream":
        return $?.signal.addEventListener("abort", { handleEvent() {
          if (!$?.signal.aborted)
            j.cancel($);
        } }, { once: true }), new Response(j, { headers: { "Content-Type": "text/event-stream; charset=utf-8" } });
      case undefined:
        if (!j)
          return new Response("");
        return new Response(JSON.stringify(j), { headers: { "content-type": "application/json" } });
      case "Response":
        return j;
      case "Promise":
        return j.then((Z) => {
          const J = f(Z, W);
          if (J !== undefined)
            return J;
        });
      case "Error":
        return G0(j, W);
      case "Function":
        return e(j(), $);
      case "Number":
      case "Boolean":
        return new Response(j.toString());
      case "Cookie":
        if (j instanceof B0)
          return new Response(j.value, W);
        return new Response(j?.toString(), W);
      case "FormData":
        return new Response(j);
      default:
        if (j instanceof Response)
          return new Response(j.body, { headers: { "Content-Type": "application/json" } });
        if (j instanceof Promise)
          return j.then((Z) => f(Z, W));
        if (j instanceof Error)
          return G0(j, W);
        if (typeof j?.next === "function")
          return k0(j, W, $);
        if ("toResponse" in j)
          return f(j.toResponse(), W);
        if ("charCodeAt" in j) {
          const Z = j.charCodeAt(0);
          if (Z === 123 || Z === 91) {
            if (!W.headers["Content-Type"])
              W.headers["Content-Type"] = "application/json";
            return new Response(JSON.stringify(j), W);
          }
        }
        return new Response(j);
    }
};
var e = (j, W) => {
  switch (j?.constructor?.name) {
    case "String":
      return new Response(j);
    case "Blob":
      return v0(j);
    case "Array":
      return Response.json(j);
    case "Object":
      if (j[d])
        return y(j.response, { status: j[d], headers: {} });
      j:
        for (let $ of Object.values(j))
          switch ($?.constructor?.name) {
            case "Blob":
            case "File":
            case "ArrayBuffer":
            case "FileRef":
              return new Response(z0(j));
            case "Object":
              break j;
            default:
              break;
          }
      return Response.json(j);
    case "ReadableStream":
      return W?.signal.addEventListener("abort", { handleEvent() {
        if (!W?.signal.aborted)
          j.cancel(W);
      } }, { once: true }), new Response(j, { headers: { "Content-Type": "text/event-stream; charset=utf-8" } });
    case undefined:
      if (!j)
        return new Response("");
      return new Response(JSON.stringify(j), { headers: { "content-type": "application/json" } });
    case "Response":
      return j;
    case "Error":
      return G0(j);
    case "Promise":
      return j.then(($) => e($, W));
    case "Function":
      return e(j(), W);
    case "Number":
    case "Boolean":
      return new Response(j.toString());
    case "FormData":
      return new Response(j);
    default:
      if (j instanceof Response)
        return new Response(j.body, { headers: { "Content-Type": "application/json" } });
      if (j instanceof Promise)
        return j.then(($) => e($, W));
      if (j instanceof Error)
        return G0(j);
      if (typeof j?.next === "function")
        return k0(j, undefined, W);
      if ("toResponse" in j)
        return e(j.toResponse());
      if ("charCodeAt" in j) {
        const $ = j.charCodeAt(0);
        if ($ === 123 || $ === 91)
          return new Response(JSON.stringify(j), { headers: { "Content-Type": "application/json" } });
      }
      return new Response(j);
  }
};
var G0 = (j, W) => new Response(JSON.stringify({ name: j?.name, message: j?.message, cause: j?.cause }), { status: W?.status !== 200 ? W?.status ?? 500 : 500, headers: W?.headers });
var o0 = (j, W) => {
  const $ = new URL(j);
  return $.pathname = W, $.toString();
};
var Bj = (j) => typeof j === "function" && /^\s*class\s+/.test(j.toString()) || j.toString().startsWith("[object ") && j.toString() !== "[object Object]" || p(Object.getPrototypeOf(j));
var I1 = (j) => j && typeof j === "object" && !Array.isArray(j);
var c = (j, W, { skipKeys: $, override: X = true } = {}) => {
  if (!I1(j) || !I1(W))
    return j;
  for (let [Z, J] of Object.entries(W)) {
    if ($?.includes(Z))
      continue;
    if (!I1(J) || !(Z in j) || Bj(J)) {
      if (X || !(Z in j))
        j[Z] = J;
      continue;
    }
    j[Z] = c(j[Z], J, { skipKeys: $, override: X });
  }
  return j;
};
var Yj = (j, W) => {
  const { properties: $, ...X } = j ?? {}, { properties: Z, ...J } = W ?? {};
  return c(X, J);
};
var x = (j = [], W = []) => {
  if (!j)
    return [];
  if (!W)
    return j;
  const $ = [], X = [];
  if (!Array.isArray(j))
    j = [j];
  if (!Array.isArray(W))
    W = [W];
  for (let Z of j)
    if ($.push(Z), Z.checksum)
      X.push(Z.checksum);
  for (let Z of W)
    if (!X.includes(Z.checksum))
      $.push(Z);
  return $;
};
var Uj = ["start", "request", "parse", "transform", "resolve", "beforeHandle", "afterHandle", "mapResponse", "afterResponse", "trace", "error", "stop", "body", "headers", "params", "query", "response", "type", "detail"];
var _j = Uj.reduce((j, W) => (j[W] = true, j), {});
var J2 = (j, W) => {
  const $ = (X) => typeof X === "object" && Object.keys(X).every($1);
  if ($(j) && $(W))
    return { ...j, ...W };
  return W ?? j;
};
var H0 = (j, W) => {
  return { body: W?.body ?? j?.body, headers: W?.headers ?? j?.headers, params: W?.params ?? j?.params, query: W?.query ?? j?.query, cookie: W?.cookie ?? j?.cookie, response: J2(j?.response, W?.response) };
};
var l = (j, W) => {
  return { ...j, ...W, body: W?.body ?? j?.body, headers: W?.headers ?? j?.headers, params: W?.params ?? j?.params, query: W?.query ?? j?.query, cookie: W?.cookie ?? j?.cookie, response: J2(j?.response, W?.response), type: j?.type || W?.type, detail: c(W?.detail ?? {}, j?.detail ?? {}), parse: x(j?.parse, W?.parse), transform: x(j?.transform, W?.transform), beforeHandle: x(j?.beforeHandle, W?.beforeHandle), afterHandle: x(j?.afterHandle, W?.afterHandle), mapResponse: x(j?.mapResponse, W?.mapResponse), afterResponse: x(j?.afterResponse, W?.afterResponse), trace: x(j?.trace, W?.trace), error: x(j?.error, W?.error) };
};
var Q2 = (j, W, $ = true) => {
  if (!Array.isArray(W))
    return h(j, W, $);
  for (let X of W)
    j = h(j, X, $);
  return j;
};
var h = (j, W, $ = true) => {
  if (!j)
    return j;
  if (W.untilObjectFound && !$ && j.type === "object")
    return j;
  const X = W.from[Kind];
  if (j.oneOf) {
    for (let Q = 0;Q < j.oneOf.length; Q++)
      j.oneOf[Q] = h(j.oneOf[Q], W, $);
    return j;
  }
  if (j.anyOf) {
    for (let Q = 0;Q < j.anyOf.length; Q++)
      j.anyOf[Q] = h(j.anyOf[Q], W, $);
    return j;
  }
  if (j.allOf) {
    for (let Q = 0;Q < j.allOf.length; Q++)
      j.allOf[Q] = h(j.allOf[Q], W, $);
    return j;
  }
  if (j.not) {
    for (let Q = 0;Q < j.not.length; Q++)
      j.not[Q] = h(j.not[Q], W, $);
    return j;
  }
  const Z = $ && !!W.excludeRoot;
  if (j[Kind] === X) {
    const { anyOf: Q, oneOf: K, allOf: Y, not: B, properties: U, items: _, ...M } = j, G = W.to();
    let w;
    const z = (F) => {
      if (U && F.type === "object") {
        const O = {};
        for (let [V, C] of Object.entries(U))
          O[V] = h(C, W, false);
        return { ...M, ...F, properties: O };
      }
      if (_ && F.type === "array")
        return { ...M, ...F, items: h(_, W, false) };
      const P = { ...M, ...F };
      if (delete P.required, U && F.type === "string" && F.format === "ObjectString" && F.default === "{}")
        w = A.ObjectString(U, M), P.default = JSON.stringify(exports_value2.Create(A.Object(U))), P.properties = U;
      if (_ && F.type === "string" && F.format === "ArrayString" && F.default === "[]")
        w = A.ArrayString(_, M), P.default = JSON.stringify(exports_value2.Create(A.Array(_))), P.items = _;
      return P;
    };
    if (Z) {
      if (U) {
        const F = {};
        for (let [P, O] of Object.entries(U))
          F[P] = h(O, W, false);
        return { ...M, properties: F };
      } else if (_?.map)
        return { ...M, items: _.map((F) => h(F, W, false)) };
      return M;
    }
    if (G.anyOf)
      for (let F = 0;F < G.anyOf.length; F++)
        G.anyOf[F] = z(G.anyOf[F]);
    else if (G.oneOf)
      for (let F = 0;F < G.oneOf.length; F++)
        G.oneOf[F] = z(G.oneOf[F]);
    else if (G.allOf)
      for (let F = 0;F < G.allOf.length; F++)
        G.allOf[F] = z(G.allOf[F]);
    else if (G.not)
      for (let F = 0;F < G.not.length; F++)
        G.not[F] = z(G.not[F]);
    if (w)
      G[TransformKind] = w[TransformKind];
    if (G.anyOf || G.oneOf || G.allOf || G.not)
      return G;
    if (U) {
      const F = {};
      for (let [P, O] of Object.entries(U))
        F[P] = h(O, W, false);
      return { ...M, ...G, properties: F };
    } else if (_?.map)
      return { ...M, ...G, items: _.map((F) => h(F, W, false)) };
    return { ...M, ...G };
  }
  const J = j?.properties;
  if (J)
    for (let [Q, K] of Object.entries(J))
      switch (K[Kind]) {
        case X:
          const { anyOf: Y, oneOf: B, allOf: U, not: _, type: M, ...G } = K, w = W.to();
          if (w.anyOf)
            for (let z = 0;z < w.anyOf.length; z++)
              w.anyOf[z] = { ...G, ...w.anyOf[z] };
          else if (w.oneOf)
            for (let z = 0;z < w.oneOf.length; z++)
              w.oneOf[z] = { ...G, ...w.oneOf[z] };
          else if (w.allOf)
            for (let z = 0;z < w.allOf.length; z++)
              w.allOf[z] = { ...G, ...w.allOf[z] };
          else if (w.not)
            for (let z = 0;z < w.not.length; z++)
              w.not[z] = { ...G, ...w.not[z] };
          J[Q] = { ...G, ...h(G, W, false) };
          break;
        case "Object":
        case "Union":
          J[Q] = h(K, W, false);
          break;
        default:
          if (K.items)
            for (let z = 0;z < K.items.length; z++)
              K.items[z] = h(K.items[z], W, false);
          else if (K.anyOf || K.oneOf || K.allOf || K.not)
            J[Q] = h(K, W, false);
          break;
      }
  return j;
};
var m = (j, { models: W = {}, dynamic: $ = false, normalize: X = false, additionalProperties: Z = false, coerce: J = false, additionalCoerce: Q = [] } = {}) => {
  if (!j)
    return;
  if (typeof j === "string" && !(j in W))
    return;
  let K = typeof j === "string" ? W[j] : j;
  if (J)
    K = Q2(K, [{ from: A.Number(), to: () => A.Numeric(), untilObjectFound: true }, { from: A.Boolean(), to: () => A.BooleanString(), untilObjectFound: true }, ...Array.isArray(Q) ? Q : [Q]]);
  if (K.type === "object" && "additionalProperties" in K === false)
    K.additionalProperties = Z;
  const Y = (U) => exports_value2.Clean(K, U);
  if ($) {
    const U = { schema: K, references: "", checkFunc: () => {
    }, code: "", Check: (_) => exports_value2.Check(K, _), Errors: (_) => exports_value2.Errors(K, _), Code: () => "", Clean: Y };
    if (X && K.additionalProperties === false)
      U.Clean = Y;
    if (K.config) {
      if (U.config = K.config, U?.schema?.config)
        delete U.schema.config;
    }
    return U.parse = (_) => {
      try {
        return U.Decode(_);
      } catch (M) {
        throw [...U.Errors(_)].map(s);
      }
    }, U.safeParse = (_) => {
      try {
        return { success: true, data: U.Decode(_), error: null };
      } catch (M) {
        const G = [...B.Errors(_)].map(s);
        return { success: false, data: null, error: G[0]?.summary, errors: G };
      }
    }, U;
  }
  const B = TypeCompiler.Compile(K, Object.values(W));
  if (B.Clean = Y, K.config) {
    if (B.config = K.config, B?.schema?.config)
      delete B.schema.config;
  }
  return B.parse = (U) => {
    try {
      return B.Decode(U);
    } catch (_) {
      throw [...B.Errors(U)].map(s);
    }
  }, B.safeParse = (U) => {
    try {
      return { success: true, data: B.Decode(U), error: null };
    } catch (_) {
      const M = [...B.Errors(U)].map(s);
      return { success: false, data: null, error: M[0]?.summary, errors: M };
    }
  }, B;
};
var e0 = (j, { models: W = {}, dynamic: $ = false, normalize: X = false, additionalProperties: Z = false }) => {
  if (!j)
    return;
  if (typeof j === "string" && !(j in W))
    return;
  const J = typeof j === "string" ? W[j] : j, Q = (Y, B) => {
    const U = (M) => {
      if (!M || typeof M !== "object")
        return exports_value2.Clean(Y, M);
      let G = false;
      const w = new Set, z = (F) => {
        if (w.has(F))
          return F;
        if (w.add(F), Array.isArray(F))
          return F.map((C) => z(C));
        const P = {};
        for (let [C, T] of Object.entries(F))
          if (Array.isArray(T))
            P[C] = z(T), delete F[C];
        Object.assign(F, P);
        const O = {};
        let V = F;
        while (V !== null) {
          for (let C of Object.getOwnPropertyNames(V)) {
            const T = Object.getOwnPropertyDescriptor(V, C);
            if (T && typeof T.get === "function" && C !== "__proto__")
              O[C] = F[C], delete V[C], G = true;
          }
          V = Object.getPrototypeOf(V);
        }
        return Object.assign(F, O), F;
      };
      if (M = z(M), !G)
        return exports_value2.Clean(Y, M);
      if (Array.isArray(M))
        M = exports_value2.Clean(Y, M);
      else
        M = { ...exports_value2.Clean(Y, M) };
      return M;
    };
    if ($)
      return { schema: Y, references: "", checkFunc: () => {
      }, code: "", Check: (M) => exports_value2.Check(Y, M), Errors: (M) => exports_value2.Errors(Y, M), Code: () => "" };
    const _ = TypeCompiler.Compile(Y, B);
    if (X && Y.additionalProperties === false)
      _.Clean = U;
    return _;
  };
  if (Kind in J) {
    if ("additionalProperties" in J === false)
      J.additionalProperties = Z;
    return { 200: Q(J, Object.values(W)) };
  }
  const K = {};
  return Object.keys(J).forEach((Y) => {
    const B = J[+Y];
    if (typeof B === "string") {
      if (B in W) {
        const U = W[B];
        U.type === "object" && "additionalProperties" in U, K[+Y] = Kind in U ? Q(U, Object.values(W)) : U;
      }
      return;
    }
    if (B.type === "object" && "additionalProperties" in B === false)
      B.additionalProperties = Z;
    K[+Y] = Kind in B ? Q(B, Object.values(W)) : B;
  }), K;
};
var wj = typeof Bun !== "undefined";
var Dj = wj && typeof Bun.hash === "function";
var I0 = (j) => {
  if (Dj)
    return Bun.hash(j);
  let W = 9;
  for (let $ = 0;$ < j.length; )
    W = Math.imul(W ^ j.charCodeAt($++), 387420489);
  return W = W ^ W >>> 9;
};
var P1;
var F0 = () => {
  if (!P1)
    P1 = [{ from: A.Object({}), to: () => A.ObjectString({}), excludeRoot: true }, { from: A.Array(A.Any()), to: () => A.ArrayString(A.Any()) }];
  return P1;
};
var j1 = ({ validator: j, defaultConfig: W = {}, config: $, dynamic: X, models: Z }) => {
  let J = m(j, { dynamic: X, models: Z, additionalProperties: true, coerce: true, additionalCoerce: F0() });
  if (p(W))
    if (J)
      J.config = Yj(J.config, $);
    else
      J = m(A.Cookie({}), { dynamic: X, models: Z, additionalProperties: true }), J.config = W;
  return J;
};
var j0 = (j, W) => {
  if (!W)
    return;
  if (!Array.isArray(W)) {
    const X = W;
    if (j && !X.checksum)
      X.checksum = j;
    if (X.scope === "scoped")
      X.scope = "local";
    return X;
  }
  const $ = [...W];
  for (let X of $) {
    if (j && !X.checksum)
      X.checksum = j;
    if (X.scope === "scoped")
      X.scope = "local";
  }
  return $;
};
var N1 = (j, W, $) => {
  return { start: x(j.start, j0($, W?.start)), request: x(j.request, j0($, W?.request)), parse: x(j.parse, j0($, W?.parse)), transform: x(j.transform, j0($, W?.transform)), beforeHandle: x(j.beforeHandle, j0($, W?.beforeHandle)), afterHandle: x(j.afterHandle, j0($, W?.afterHandle)), mapResponse: x(j.mapResponse, j0($, W?.mapResponse)), afterResponse: x(j.afterResponse, j0($, W?.afterResponse)), trace: x(j.trace, j0($, W?.trace)), error: x(j.error, j0($, W?.error)), stop: x(j.stop, j0($, W?.stop)) };
};
var G2 = (j, W, { skipIfHasType: $ = false } = {}) => {
  if (!j)
    return j;
  if (!Array.isArray(j)) {
    if ($)
      j.scope ??= W;
    else
      j.scope = W;
    return j;
  }
  for (let X of j)
    if ($)
      X.scope ??= W;
    else
      X.scope = W;
  return j;
};
var M0 = (j) => {
  if (!j)
    return j;
  if (!Array.isArray(j))
    switch (j.scope) {
      case "global":
      case "scoped":
        return { ...j };
      default:
        return { fn: j };
    }
  const W = [];
  for (let $ of j)
    switch ($.scope) {
      case "global":
      case "scoped":
        W.push({ ...$ });
        break;
    }
  return W;
};
var O1 = (j) => {
  return { ...j, type: j?.type, detail: j?.detail, parse: M0(j?.parse), transform: M0(j?.transform), beforeHandle: M0(j?.beforeHandle), afterHandle: M0(j?.afterHandle), mapResponse: M0(j?.mapResponse), afterResponse: M0(j?.afterResponse), error: M0(j?.error), trace: M0(j?.trace) };
};
var Y0 = { Continue: 100, "Switching Protocols": 101, Processing: 102, "Early Hints": 103, OK: 200, Created: 201, Accepted: 202, "Non-Authoritative Information": 203, "No Content": 204, "Reset Content": 205, "Partial Content": 206, "Multi-Status": 207, "Already Reported": 208, "Multiple Choices": 300, "Moved Permanently": 301, Found: 302, "See Other": 303, "Not Modified": 304, "Temporary Redirect": 307, "Permanent Redirect": 308, "Bad Request": 400, Unauthorized: 401, "Payment Required": 402, Forbidden: 403, "Not Found": 404, "Method Not Allowed": 405, "Not Acceptable": 406, "Proxy Authentication Required": 407, "Request Timeout": 408, Conflict: 409, Gone: 410, "Length Required": 411, "Precondition Failed": 412, "Payload Too Large": 413, "URI Too Long": 414, "Unsupported Media Type": 415, "Range Not Satisfiable": 416, "Expectation Failed": 417, "I'm a teapot": 418, "Misdirected Request": 421, "Unprocessable Content": 422, Locked: 423, "Failed Dependency": 424, "Too Early": 425, "Upgrade Required": 426, "Precondition Required": 428, "Too Many Requests": 429, "Request Header Fields Too Large": 431, "Unavailable For Legal Reasons": 451, "Internal Server Error": 500, "Not Implemented": 501, "Bad Gateway": 502, "Service Unavailable": 503, "Gateway Timeout": 504, "HTTP Version Not Supported": 505, "Variant Also Negotiates": 506, "Insufficient Storage": 507, "Loop Detected": 508, "Not Extended": 510, "Network Authentication Required": 511 };
var W1 = Object.fromEntries(Object.entries(Y0).map(([j, W]) => [W, j]));
var X2 = new TextEncoder;
var b0 = async (j, W) => {
  if (typeof j !== "string")
    throw new TypeError("Cookie value must be provided as a string.");
  if (W === null)
    throw new TypeError("Secret key must be provided.");
  const $ = await crypto.subtle.importKey("raw", X2.encode(W), { name: "HMAC", hash: "SHA-256" }, false, ["sign"]), X = await crypto.subtle.sign("HMAC", $, X2.encode(j));
  return j + "." + Mj(Buffer.from(X).toString("base64"));
};
var z1 = async (j, W) => {
  if (typeof j !== "string")
    throw new TypeError("Signed cookie string must be provided.");
  if (W === null)
    throw new TypeError("Secret key must be provided.");
  const $ = j.slice(0, j.lastIndexOf("."));
  return await b0($, W) === j ? $ : false;
};
var K2 = (j, W) => {
  if (!j || typeof j !== "object" || !W)
    return;
  for (let [$, X] of Object.entries(W)) {
    if ($ in _j || !($ in j))
      continue;
    const Z = j[$];
    if (typeof Z === "function")
      Z(X), delete W[$];
  }
};
var B2 = ({ globalHook: j, localHook: W }) => ($) => (X, Z) => {
  if (typeof X === "function")
    X = { fn: X };
  if ("fn" in X || Array.isArray(X)) {
    if (!W[$])
      W[$] = [];
    if (typeof W[$] === "function")
      W[$] = [W[$]];
    if (Array.isArray(X))
      W[$] = W[$].concat(X);
    else
      W[$].push(X);
    return;
  }
  const { insert: J = "after", stack: Q = "local" } = X;
  if (typeof Z === "function")
    Z = { fn: Z };
  if (Q === "global")
    if (!Array.isArray(Z))
      if (J === "before")
        j[$].unshift(Z);
      else
        j[$].push(Z);
    else if (J === "before")
      j[$] = Z.concat(j[$]);
    else
      j[$] = j[$].concat(Z);
  else {
    if (!W[$])
      W[$] = [];
    if (typeof W[$] === "function")
      W[$] = [W[$]];
    if (!Array.isArray(Z))
      if (J === "before")
        W[$].unshift(Z);
      else
        W[$].push(Z);
    else if (J === "before")
      W[$] = Z.concat(W[$]);
    else
      W[$] = W[$].concat(Z);
  }
};
var Fj = (j) => {
  if (typeof j === "number")
    return j;
  if (j.length < 16) {
    if (j.trim().length === 0)
      return null;
    const W = Number(j);
    if (Number.isNaN(W))
      return null;
    return W;
  }
  if (j.length === 16) {
    if (j.trim().length === 0)
      return null;
    const W = Number(j);
    if (Number.isNaN(W) || W.toString() !== j)
      return null;
    return W;
  }
  return null;
};
var $1 = (j) => Fj(j) !== null;

class V1 {
  j;
  root = null;
  promises = [];
  constructor(j = console.error) {
    this.onError = j;
  }
  get size() {
    return this.promises.length;
  }
  add(j) {
    return this.promises.push(j), this.root ||= this.drain(), j;
  }
  async drain() {
    while (this.promises.length > 0) {
      try {
        await this.promises[0];
      } catch (j) {
        this.onError(j);
      }
      this.promises.shift();
    }
    this.root = null;
  }
  then(j, W) {
    return (this.root ?? Promise.resolve()).then(j, W);
  }
}
var i = (j) => {
  if (!j)
    return j;
  if (!Array.isArray(j)) {
    if (typeof j === "function")
      return { fn: j };
    else if ("fn" in j)
      return j;
  }
  const W = [];
  for (let $ of j)
    if (typeof $ === "function")
      W.push({ fn: $ });
    else if ("fn" in $)
      W.push($);
  return W;
};
var Y2 = (j) => {
  return { ...j, start: i(j?.start), request: i(j?.request), parse: i(j?.parse), transform: i(j?.transform), beforeHandle: i(j?.beforeHandle), afterHandle: i(j?.afterHandle), mapResponse: i(j?.mapResponse), afterResponse: i(j?.afterResponse), trace: i(j?.trace), error: i(j?.error), stop: i(j?.stop) };
};
var A1 = (j) => {
  return { ...j, start: j.start?.map((W) => W.fn), request: j.request?.map((W) => W.fn), parse: j.parse?.map((W) => W.fn), transform: j.transform?.map((W) => W.fn), beforeHandle: j.beforeHandle?.map((W) => W.fn), afterHandle: j.afterHandle?.map((W) => W.fn), afterResponse: j.afterResponse?.map((W) => W.fn), mapResponse: j.mapResponse?.map((W) => W.fn), trace: j.trace?.map((W) => W.fn), error: j.error?.map((W) => W.fn), stop: j.stop?.map((W) => W.fn) };
};
var u0 = (j) => ({ body: j.body, cookie: j.cookie, headers: j.headers, query: j.query, set: j.set, server: j.server });
var h0 = (j, W = 302) => Response.redirect(j, W);
var zj = Symbol("ElysiaFormData");
var P0 = Symbol("ElysiaRequestId");
var z0 = (j) => {
  const W = new FormData;
  for (let [$, X] of Object.entries(j)) {
    if (Array.isArray(X)) {
      for (let Z of X) {
        if (X instanceof File)
          W.append($, X, X.name);
        W.append($, Z);
      }
      continue;
    }
    if (X instanceof File)
      W.append($, X, X.name);
    W.append($, X);
  }
  return W;
};
var X1 = () => crypto.getRandomValues(new Uint32Array(1))[0];
var Z1 = (j) => {
  const W = [];
  for (let $ = 0;$ < j.length; $++) {
    const X = j[$];
    if (X.checksum) {
      if (W.includes(X.checksum))
        j.splice($, 1), $--;
      W.push(X.checksum);
    }
  }
  return j;
};
var v = (j, W = "scoped") => {
  if (W === "scoped") {
    for (let $ of j)
      if ("scope" in $ && $.scope === "local")
        $.scope = "scoped";
    return;
  }
  for (let $ of j)
    if ("scope" in $)
      $.scope = "global";
};
var U2 = typeof Bun !== "undefined" ? Bun.env : typeof process !== "undefined" ? process?.env : undefined;
var N0 = Symbol("ElysiaErrorCode");
var d = Symbol("ElysiaResponse");
var d0 = (U2?.NODE_ENV ?? U2?.ENV) === "production";
var C1 = (j, W) => {
  const $ = W ?? (j in W1 ? W1[j] : j);
  return { [d]: Y0[j] ?? j, response: $, _type: undefined, error: new Error($) };
};

class J1 extends Error {
  code = "INTERNAL_SERVER_ERROR";
  status = 500;
  constructor(j) {
    super(j ?? "INTERNAL_SERVER_ERROR");
  }
}

class O0 extends Error {
  code = "NOT_FOUND";
  status = 404;
  constructor(j) {
    super(j ?? "NOT_FOUND");
  }
}

class Q1 extends Error {
  code = "PARSE";
  status = 400;
  constructor() {
    super("Failed to parse body");
  }
}

class f0 extends Error {
  j;
  code = "INVALID_COOKIE_SIGNATURE";
  status = 400;
  constructor(j, W) {
    super(W ?? `"${j}" has invalid cookie signature`);
    this.key = j;
  }
}
var s = (j) => {
  const { message: W, path: $, value: X, type: Z } = j, J = $.slice(1).replaceAll("/", "."), Q = $ === "";
  switch (Z) {
    case 42:
      return { ...j, summary: Q ? "Value should not be provided" : `Property '${J}' should not be provided` };
    case 45:
      return { ...j, summary: Q ? "Value is missing" : `Property '${J}' is missing` };
    case 50:
      const K = W.indexOf("'"), Y = W.slice(K + 1, W.indexOf("'", K + 1));
      return { ...j, summary: Q ? "Value should be an email" : `Property '${J}' should be ${Y}` };
    case 54:
      return { ...j, summary: `${W.slice(0, 9)} property '${J}' to be ${W.slice(8)} but found: ${X}` };
    case 62:
      const B = j.schema.anyOf.map((U) => `'${U?.format ?? U.type}'`).join(", ");
      return { ...j, summary: Q ? `Value should be one of ${B}` : `Property '${J}' should be one of: ${B}` };
    default:
      return { summary: W, ...j };
  }
};

class L extends Error {
  j;
  W;
  $;
  code = "VALIDATION";
  status = 422;
  constructor(j, W, $) {
    if ($ && typeof $ === "object" && d in $)
      $ = $.response;
    const X = d0 ? undefined : ("Errors" in W) ? W.Errors($).First() : exports_value2.Errors(W, $).First(), Z = X?.schema.error !== undefined ? typeof X.schema.error === "function" ? X.schema.error({ type: j, validator: W, value: $, get errors() {
      return [...W.Errors($)].map(s);
    } }) : X.schema.error : undefined, J = X?.path || "root";
    let Q = "";
    if (Z !== undefined)
      Q = typeof Z === "object" ? JSON.stringify(Z) : Z + "";
    else if (d0)
      Q = JSON.stringify({ type: "validation", on: j, summary: s(X).summary, message: X?.message, found: $ });
    else {
      const K = W?.schema ?? W, Y = "Errors" in W ? [...W.Errors($)].map(s) : [...exports_value2.Errors(W, $)].map(s);
      let B;
      try {
        B = exports_value2.Create(K);
      } catch (U) {
        B = { type: "Could not create expected value", message: U?.message, error: U };
      }
      Q = JSON.stringify({ type: "validation", on: j, summary: Y[0]?.summary, property: J, message: X?.message, expected: B, found: $, errors: Y }, null, 2);
    }
    super(Q);
    this.type = j;
    this.validator = W;
    this.value = $;
    Object.setPrototypeOf(this, L.prototype);
  }
  get all() {
    return "Errors" in this.validator ? [...this.validator.Errors(this.value)].map(s) : [...exports_value2.Errors(this.validator, this.value)].map(s);
  }
  static simplifyModel(j) {
    const W = "schema" in j ? j.schema : j;
    try {
      return exports_value2.Create(W);
    } catch {
      return W;
    }
  }
  get model() {
    return L.simplifyModel(this.validator);
  }
  toResponse(j) {
    return new Response(this.message, { status: 400, headers: { ...j, "content-type": "application/json" } });
  }
}
var S1 = { open(j) {
  j.data.open?.(j);
}, message(j, W) {
  j.data.message?.(j, W);
}, drain(j) {
  j.data.drain?.(j);
}, close(j, W, $) {
  j.data.close?.(j, W, $);
} };

class R0 {
  j;
  W;
  validator;
  _validator;
  constructor(j, W) {
    this.raw = j;
    this.data = W;
    if (this.validator = j.data.validator, j.data.id)
      this.id = j.data.id;
    else
      this.id = X1().toString();
  }
  get id() {
    return this.raw.data.id;
  }
  set id(j) {
    this.raw.data.id = j;
  }
  get publish() {
    return (j, W = undefined, $) => {
      if (this.validator?.Check(W) === false)
        throw new L("message", this.validator, W);
      if (typeof W === "object")
        W = JSON.stringify(W);
      return this.raw.publish(j, W, $), this;
    };
  }
  get send() {
    return (j) => {
      if (this.validator?.Check(j) === false)
        throw new L("message", this.validator, j);
      if (Buffer.isBuffer(j))
        return this.raw.send(j), this;
      if (typeof j === "object")
        j = JSON.stringify(j);
      return this.raw.send(j), this;
    };
  }
  get subscribe() {
    return (j) => {
      return this.raw.subscribe(j), this;
    };
  }
  get unsubscribe() {
    return (j) => {
      return this.raw.unsubscribe(j), this;
    };
  }
  get cork() {
    return (j) => {
      return this.raw.cork(j), this;
    };
  }
  get close() {
    return () => {
      return this.raw.close(), this;
    };
  }
  get terminate() {
    return this.raw.terminate.bind(this.raw);
  }
  get isSubscribed() {
    return this.raw.isSubscribed.bind(this.raw);
  }
  get remoteAddress() {
    return this.raw.remoteAddress;
  }
}
var T1 = "1.1.5";
var c0 = Y1(r0(), 1);
var G1 = /\+/g;
var w2 = Y1(r0(), 1);
var l0 = Symbol("ElysiaTrace");
var U0 = () => {
  const { promise: j, resolve: W } = Promise.withResolvers(), { promise: $, resolve: X } = Promise.withResolvers(), { promise: Z, resolve: J } = Promise.withResolvers(), Q = [], K = [];
  return [(Y) => {
    if (Y)
      Q.push(Y);
    return j;
  }, (Y) => {
    const B = [], U = [];
    let _ = null;
    for (let G = 0;G < (Y.total ?? 0); G++) {
      const { promise: w, resolve: z } = Promise.withResolvers(), { promise: F, resolve: P } = Promise.withResolvers(), { promise: O, resolve: V } = Promise.withResolvers(), C = [], T = [];
      B.push((H) => {
        if (H)
          C.push(H);
        return w;
      }), U.push((H) => {
        const k = { ...H, end: F, error: O, index: G, onStop(b) {
          if (b)
            T.push(b);
          return F;
        } };
        z(k);
        for (let b = 0;b < C.length; b++)
          C[b](k);
        return (b = null) => {
          const w0 = performance.now();
          if (b)
            _ = b;
          const R = { end: w0, error: b, get elapsed() {
            return w0 - H.begin;
          } };
          for (let Z0 = 0;Z0 < T.length; Z0++)
            T[Z0](R);
          P(w0), V(b);
        };
      });
    }
    const M = { ...Y, end: $, error: Z, onEvent(G) {
      for (let w = 0;w < B.length; w++)
        B[w](G);
    }, onStop(G) {
      if (G)
        K.push(G);
      return $;
    } };
    W(M);
    for (let G = 0;G < Q.length; G++)
      Q[G](M);
    return { resolveChild: U, resolve(G = null) {
      const w = performance.now();
      if (!G && _)
        G = _;
      const z = { end: w, error: G, get elapsed() {
        return w - Y.begin;
      } };
      for (let F = 0;F < K.length; F++)
        K[F](z);
      X(w), J(G);
    } };
  }];
};
var _2 = (j) => {
  return (W) => {
    const [$, X] = U0(), [Z, J] = U0(), [Q, K] = U0(), [Y, B] = U0(), [U, _] = U0(), [M, G] = U0(), [w, z] = U0(), [F, P] = U0(), [O, V] = U0();
    return j({ id: W[P0], context: W, set: W.set, onRequest: $, onParse: Z, onTransform: Q, onBeforeHandle: Y, onHandle: U, onAfterHandle: M, onMapResponse: F, onAfterResponse: O, onError: w }), { request: X, parse: J, transform: K, beforeHandle: B, handle: _, afterHandle: G, error: z, mapResponse: P, afterResponse: V };
  };
};
var Pj = new Headers().toJSON;
var D2 = { optional: Symbol.for("TypeBox.Optional"), kind: Symbol.for("TypeBox.Kind") };
var _0 = (j) => {
  if (!j)
    return false;
  const W = j?.schema;
  return !!W && D2.optional in W;
};
var $0 = (j) => {
  if (!j)
    return false;
  const W = j?.schema ?? j;
  if (W.anyOf)
    return W.anyOf.some($0);
  if (W.someOf)
    return W.someOf.some($0);
  if (W.allOf)
    return W.allOf.some($0);
  if (W.not)
    return W.not.some($0);
  if (W.type === "object") {
    const $ = W.properties;
    if ("additionalProperties" in W)
      return W.additionalProperties;
    for (let X of Object.keys($)) {
      const Z = $[X];
      if (Z.type === "object") {
        if ($0(Z))
          return true;
      } else if (Z.anyOf) {
        for (let J = 0;J < Z.anyOf.length; J++)
          if ($0(Z.anyOf[J]))
            return true;
      }
      return Z.additionalProperties;
    }
    return false;
  }
  return false;
};
var L1 = ({ context: j = "c", trace: W, addFn: $ }) => {
  if (!W.length)
    return () => {
      return { resolveChild() {
        return () => {
        };
      }, resolve() {
      } };
    };
  for (let X = 0;X < W.length; X++)
    $(`let report${X}, reportChild${X}, reportErr${X}, reportErrChild${X}; let trace${X} = ${j}[ELYSIA_TRACE]?.[${X}] ?? trace[${X}](${j});\n`);
  return (X, { name: Z, total: J = 0 } = {}) => {
    if (!Z)
      Z = "anonymous";
    const Q = X === "error" ? "reportErr" : "report";
    for (let K = 0;K < W.length; K++)
      $(`\n${Q}${K} = trace${K}.${X}({id,event: '${X}',name: '${Z}',begin: performance.now(),total: ${J}})\n`);
    return { resolve() {
      for (let K = 0;K < W.length; K++)
        $(`\n${Q}${K}.resolve()\n`);
    }, resolveChild(K) {
      for (let Y = 0;Y < W.length; Y++)
        $(`${Q}Child${Y} = ${Q}${Y}.resolveChild?.shift()?.({id,event: '${X}',name: '${K}',begin: performance.now()})\n`);
      return (Y) => {
        for (let B = 0;B < W.length; B++)
          if (Y)
            $(`
                             	if (${Y} instanceof Error)
                    				${Q}Child${B}?.(${Y})
                           		else
                             		${Q}Child${B}?.()\n`);
          else
            $(`${Q}Child${B}?.()\n`);
      };
    } };
  };
};
var Nj = ({ injectResponse: j = "", normalize: W = false, validator: $ }) => ({ composeValidation: (X, Z = `c.${X}`) => `c.set.status = 422; throw new ValidationError('${X}', validator.${X}, ${Z})`, composeResponseValidation: (X = "r") => {
  let Z = "\n" + j + "\n";
  Z += `if(typeof ${X} === "object" && ${X} && ELYSIA_RESPONSE in ${X}) {
			c.set.status = ${X}[ELYSIA_RESPONSE]
			${X} = ${X}.response
		}

		const isResponse = ${X} instanceof Response\n\n`, Z += "switch(c.set.status) {\n";
  for (let [J, Q] of Object.entries($.response)) {
    if (Z += `\tcase ${J}:
				if (!isResponse) {\n`, W && "Clean" in Q && !$0(Q))
      Z += `${X} = validator.response['${J}'].Clean(${X})\n`;
    Z += `if(validator.response['${J}'].Check(${X}) === false) {
					c.set.status = 422

					throw new ValidationError('response', validator.response['${J}'], ${X})
				}

				c.set.status = ${J}
			}

			break\n\n`;
  }
  return Z += "\n}\n", Z;
} });
var k3 = Symbol.for("TypeBox.Kind");
var V0 = (j, W) => {
  if (!W)
    return;
  if (W.type === "object") {
    const $ = W.properties;
    if (!$)
      return false;
    for (let X of Object.keys($)) {
      const Z = $[X];
      if (j in Z)
        return true;
      if (Z.type === "object") {
        if (V0(j, Z))
          return true;
      } else if (Z.anyOf) {
        for (let J = 0;J < Z.anyOf.length; J++)
          if (V0(j, Z.anyOf[J]))
            return true;
      }
    }
    return false;
  }
  return j in W;
};
var q1 = Symbol.for("TypeBox.Transform");
var A0 = (j) => {
  if (!j)
    return;
  if (j.type === "object" && j.properties) {
    const W = j.properties;
    for (let $ of Object.keys(W)) {
      const X = W[$];
      if (X.type === "object") {
        if (A0(X))
          return true;
      } else if (X.anyOf) {
        for (let J = 0;J < X.anyOf.length; J++)
          if (A0(X.anyOf[J]))
            return true;
      }
      if (q1 in X)
        return true;
    }
    return false;
  }
  return q1 in j || j.properties && q1 in j.properties;
};
var Oj = /(?:return|=>) \S+\(/g;
var C0 = (j) => {
  return (j?.fn ?? j).constructor.name === "AsyncFunction";
};
var g = (j) => {
  const W = j?.fn ?? j;
  if (W.constructor.name === "AsyncFunction")
    return true;
  const $ = W.toString();
  if ($.includes("=> response.clone("))
    return false;
  if ($.includes("await"))
    return true;
  if ($.includes("async"))
    return true;
  return !!$.match(Oj);
};
var K1 = (j) => {
  const W = j?.fn ?? j;
  return W.constructor.name === "AsyncGeneratorFunction" || W.constructor.name === "GeneratorFunction";
};
var M2 = ({ app: j, path: W, method: $, localHook: X, hooks: Z, validator: J, handler: Q, allowMeta: K = false, inference: Y }) => {
  const B = typeof Q === "function";
  if (!B)
    Q = y(Q, { headers: j.setHeaders ?? {} });
  const U = B ? "handler(c)" : "handler", _ = Z.afterResponse.length > 0, M = Z.trace.length > 0;
  let G = "";
  if (Y = t0(Object.assign(X, { handler: Q }), Y), Y.server)
    G += `\nObject.defineProperty(c, 'server', {
			get: function() { return getServer() }
		})\n`;
  if (Y.body)
    G += "let isParsing = false\n";
  J.createBody?.(), J.createQuery?.(), J.createHeaders?.(), J.createParams?.(), J.createCookie?.(), J.createResponse?.();
  const w = Y.query || !!J.query, z = $ !== "$INTERNALWS" && $ !== "GET" && $ !== "HEAD" && (Y.body || !!J.body || Z.parse.length), F = j.setHeaders, P = F && !!Object.keys(F).length, O = Y.headers || J.headers, V = Y.cookie || !!J.cookie, C = V ? j1({ validator: J.cookie, defaultConfig: j.config.cookie, dynamic: !!j.config.aot, config: J.cookie?.config ?? {}, models: j.definitions.type }) : undefined, T = C?.config;
  let H = "";
  if (T?.sign) {
    if (!T.secrets)
      throw new Error(`t.Cookie required secret which is not set in (${$}) ${W}.`);
    const I = !T.secrets ? undefined : typeof T.secrets === "string" ? T.secrets : T.secrets[0];
    if (H += `const _setCookie = c.set.cookie
		if(_setCookie) {`, T.sign === true)
      H += `for(const [key, cookie] of Object.entries(_setCookie)) {
				c.set.cookie[key].value = await signCookie(cookie.value, '${I}')
			}`;
    else
      for (let D of T.sign)
        H += `if(_setCookie['${D}']?.value) { c.set.cookie['${D}'].value = await signCookie(_setCookie['${D}'].value, '${I}') }\n`;
    H += "}\n";
  }
  const k = j.config.normalize, { composeValidation: b, composeResponseValidation: w0 } = Nj({ normalize: k, validator: J });
  if (O)
    G += Pj ? "c.headers = c.request.headers.toJSON()\n" : `c.headers = {}
                for (const [key, value] of c.request.headers.entries())
					c.headers[key] = value
				`;
  if (V) {
    const I = (N, S) => {
      const q = T?.[N] ?? S;
      if (!q)
        return typeof S === "string" ? `${N}: "${S}",` : `${N}: ${S},`;
      if (typeof q === "string")
        return `${N}: '${q}',`;
      if (q instanceof Date)
        return `${N}: new Date(${q.getTime()}),`;
      return `${N}: ${q},`;
    }, D = T ? `{
			secrets: ${T.secrets !== undefined ? typeof T.secrets === "string" ? `'${T.secrets}'` : "[" + T.secrets.reduce((N, S) => N + `'${S}',`, "") + "]" : "undefined"},
			sign: ${T.sign === true ? true : T.sign !== undefined ? "[" + T.sign.reduce((N, S) => N + `'${S}',`, "") + "]" : "undefined"},
			${I("domain")}
			${I("expires")}
			${I("httpOnly")}
			${I("maxAge")}
			${I("path", "/")}
			${I("priority")}
			${I("sameSite")}
			${I("secure")}
		}` : "undefined";
    if (O)
      G += `\nc.cookie = await parseCookie(c.set, c.headers.cookie, ${D})\n`;
    else
      G += `\nc.cookie = await parseCookie(c.set, c.request.headers.get('cookie'), ${D})\n`;
  }
  if (w) {
    const I = [];
    if (J.query && J.query.schema.type === "object") {
      const D = J.query.schema.properties;
      if (!$0(J.query))
        for (let [N, S] of Object.entries(D)) {
          let q = S;
          if (q && D2.optional in q && q.type === "array" && q.items)
            q = q.items;
          const { type: n, anyOf: E } = q, K0 = n === "array" || E?.some((u) => u.type === "string" && u.format === "ArrayString");
          I.push({ key: N, isArray: K0, isNestedObjectArray: K0 && q.items?.type === "object" || !!q.items?.anyOf?.some((u) => u.type === "object" || u.type === "array"), isObject: n === "object" || E?.some((u) => u.type === "string" && u.format === "ArrayString"), anyOf: !!E });
        }
    }
    if (!I.length)
      G += `if(c.qi === -1) {
				c.query = {}
			} else {
				c.query = parseQuery(c.url.slice(c.qi + 1))
			}`;
    else
      G += `if(c.qi !== -1) {
				let url = '&' + c.url.slice(c.qi + 1)

				${I.map(({ key: D, isArray: N, isObject: S, isNestedObjectArray: q, anyOf: n }, E) => {
        const K0 = `${E === 0 ? "let" : ""} memory = url.indexOf('&${D}=')
							let a${E}\n`;
        if (N)
          return K0 + (q ? `while (memory !== -1) {
											const start = memory + ${D.length + 2}
											memory = url.indexOf('&', start)

											if(a${E} === undefined)
												a${E} = ''
											else
												a${E} += ','

											let temp

											if(memory === -1) temp = decodeURIComponent(url.slice(start))
											else temp = decodeURIComponent(url.slice(start, memory))

											const charCode = temp.charCodeAt(0)
											if(charCode !== 91 && charCode !== 123)
												temp = '"' + temp + '"'

											a${E} += temp

											if(memory === -1) break

											memory = url.indexOf('&${D}=', memory)
											if(memory === -1) break
										}

										try {
										    if(a${E}.charCodeAt(0) === 91)
												a${E} = JSON.parse(a${E})
											else
												a${E} = JSON.parse('[' + a${E} + ']')
										} catch {}\n` : `while (memory !== -1) {
											const start = memory + ${D.length + 2}
											memory = url.indexOf('&', start)

											if(a${E} === undefined)
												a${E} = []

											if(memory === -1) {
												a${E}.push(decodeURIComponent(url.slice(start)))
												break
											}
											else a${E}.push(decodeURIComponent(url.slice(start, memory)))

											memory = url.indexOf('&${D}=', memory)
											if(memory === -1) break
										}\n`);
        if (S)
          return K0 + `if (memory !== -1) {
										const start = memory + ${D.length + 2}
										memory = url.indexOf('&', start)

										if(memory === -1) a${E} = decodeURIComponent(url.slice(start))
										else a${E} = decodeURIComponent(url.slice(start, memory))

										if (a${E} !== undefined) {
											try {
												a${E} = JSON.parse(a${E})
											} catch {}
										}
									}`;
        return K0 + `if (memory !== -1) {
										const start = memory + ${D.length + 2}
										memory = url.indexOf('&', start)

										if(memory === -1) a${E} = decodeURIComponent(url.slice(start))
										else {
											a${E} = decodeURIComponent(url.slice(start, memory))

											${n ? `
											let deepMemory = url.indexOf('&${D}=', memory)

											if(deepMemory !== -1) {
												a${E} = [a${E}]
												let first = true

												while(true) {
													const start = deepMemory + ${D.length + 2}
													if(first)
														first = false
													else
														deepMemory = url.indexOf('&', start)

													let value
													if(deepMemory === -1) value = decodeURIComponent(url.slice(start))
													else value = decodeURIComponent(url.slice(start, deepMemory))

													const vStart = value.charCodeAt(0)
													const vEnd = value.charCodeAt(value.length - 1)

													if((vStart === 91 && vEnd === 93) || (vStart === 123 && vEnd === 125))
														try {
															a${E}.push(JSON.parse(value))
														} catch {
														 	a${E}.push(value)
														}

													if(deepMemory === -1) break
												}
											}
												` : ""}
										}
									}`;
      }).join("\n")}

				c.query = {
					${I.map(({ key: D }, N) => `'${D}': a${N}`).join(", ")}
				}
			} else {
				c.query = {}
			}`;
  }
  if (M)
    G += "\nconst id = c[ELYSIA_REQUEST_ID]\n";
  const R = L1({ trace: Z.trace, addFn: (I) => {
    G += I;
  } });
  G += "\ntry {\n";
  const Z0 = typeof Q === "function" && g(Q), r = M || Z.afterResponse.length > 0 ? "c.response = " : "", g0 = V || z || Z0 || Z.parse.length > 0 || Z.afterHandle.some(g) || Z.beforeHandle.some(g) || Z.transform.some(g) || Z.mapResponse.some(g), z2 = (typeof Q === "function" ? K1(Q) : false) || Z.beforeHandle.some(K1) || Z.afterHandle.some(K1) || Z.transform.some(K1), i0 = Y.cookie || Y.set || O || M || J.response || B && P || z2, t = ", c.request";
  G += `c.route = \`${W}\`\n`;
  const I2 = R("parse", { total: Z.parse.length });
  if (z) {
    const I = Z.parse.length || Y.body || J.body;
    if (G += "isParsing = true\n", Z.type && !Z.parse.length)
      switch (Z.type) {
        case "json":
        case "application/json":
          G += "c.body = await c.request.json()";
          break;
        case "text":
        case "text/plain":
          G += "c.body = await c.request.text()\n";
          break;
        case "urlencoded":
        case "application/x-www-form-urlencoded":
          G += "c.body = parseQuery(await c.request.text())\n";
          break;
        case "arrayBuffer":
        case "application/octet-stream":
          G += "c.body = await c.request.arrayBuffer()\n";
          break;
        case "formdata":
        case "multipart/form-data":
          G += `c.body = {}

						const form = await c.request.formData()
						for (const key of form.keys()) {
							if (c.body[key])
								continue

							const value = form.getAll(key)
							if (value.length === 1)
								c.body[key] = value[0]
							else c.body[key] = value
						}\n`;
          break;
      }
    else if (I) {
      if (G += "\n", G += O ? "let contentType = c.headers['content-type']" : "let contentType = c.request.headers.get('content-type')", G += `
				if (contentType) {
					const index = contentType.indexOf(';')
					if (index !== -1) contentType = contentType.substring(0, index)\n
					c.contentType = contentType\n`, Z.parse.length) {
        G += "let used = false\n";
        const D = R("parse", { total: Z.parse.length });
        for (let N = 0;N < Z.parse.length; N++) {
          const S = D.resolveChild(Z.parse[N].fn.name), q = `bo${N}`;
          if (N !== 0)
            G += "if(!used) {\n";
          if (G += `let ${q} = parse[${N}](c, contentType)\n`, G += `if(${q} instanceof Promise) ${q} = await ${q}\n`, G += `if(${q} !== undefined) { c.body = ${q}; used = true }\n`, S(), N !== 0)
            G += "}";
        }
        D.resolve();
      }
      if (G += "\ndelete c.contentType\n", Z.parse.length)
        G += "if (!used) {";
      if (Z.type && !Array.isArray(Z.type))
        switch (Z.type) {
          case "json":
          case "application/json":
            G += "c.body = await c.request.json()";
            break;
          case "text":
          case "text/plain":
            G += "c.body = await c.request.text()\n";
            break;
          case "urlencoded":
          case "application/x-www-form-urlencoded":
            G += "c.body = parseQuery(await c.request.text())\n";
            break;
          case "arrayBuffer":
          case "application/octet-stream":
            G += "c.body = await c.request.arrayBuffer()\n";
            break;
          case "formdata":
          case "multipart/form-data":
            G += `c.body = {}

							const form = await c.request.formData()
							for (const key of form.keys()) {
								if (c.body[key])
									continue

								const value = form.getAll(key)
								if (value.length === 1)
									c.body[key] = value[0]
								else c.body[key] = value
							}\n`;
            break;
        }
      else
        G += `
					switch (contentType) {
						case 'application/json':
							c.body = await c.request.json()
							break

						case 'text/plain':
							c.body = await c.request.text()
							break

						case 'application/x-www-form-urlencoded':
							c.body = parseQuery(await c.request.text())
							break

						case 'application/octet-stream':
							c.body = await c.request.arrayBuffer();
							break

						case 'multipart/form-data':
							c.body = {}

							const form = await c.request.formData()
							for (const key of form.keys()) {
								if (c.body[key])
									continue

								const value = form.getAll(key)
								if (value.length === 1)
									c.body[key] = value[0]
								else c.body[key] = value
							}

							break
					}`;
      if (Z.parse.length)
        G += "}";
      G += "}\n";
    }
    G += "\nisParsing = false\n";
  }
  if (I2.resolve(), Z?.transform) {
    const I = R("transform", { total: Z.transform.length });
    if (Z.transform.length)
      G += "\nlet transformed\n";
    for (let D = 0;D < Z.transform.length; D++) {
      const N = Z.transform[D], S = I.resolveChild(N.fn.name);
      if (G += g(N) ? `transformed = await transform[${D}](c)\n` : `transformed = transform[${D}](c)\n`, N.subType === "mapDerive")
        G += `if(transformed?.[ELYSIA_RESPONSE])
					throw transformed
				else {
					transformed.request = c.request
					transformed.store = c.store
					transformed.qi = c.qi
					transformed.path = c.path
					transformed.url = c.url
					transformed.redirect = c.redirect
					transformed.set = c.set
					transformed.error = c.error

					c = transformed
			}`;
      else
        G += `if(transformed?.[ELYSIA_RESPONSE])
					throw transformed
				else
					Object.assign(c, transformed)\n`;
      S();
    }
    I.resolve();
  }
  if (J) {
    if (G += "\n", J.headers) {
      if (k && "Clean" in J.headers && !$0(J.headers))
        G += "c.headers = validator.headers.Clean(c.headers);\n";
      if (V0("default", J.headers.schema))
        for (let [I, D] of Object.entries(exports_value2.Default(J.headers.schema, {}))) {
          const N = typeof D === "object" ? JSON.stringify(D) : typeof D === "string" ? `'${D}'` : D;
          if (N !== undefined)
            G += `c.headers['${I}'] ??= ${N}\n`;
        }
      if (_0(J.headers))
        G += "if(isNotEmpty(c.headers)) {";
      if (G += `if(validator.headers.Check(c.headers) === false) {
				${b("headers")}
			}`, A0(J.headers.schema))
        G += "c.headers = validator.headers.Decode(c.headers)\n";
      if (_0(J.headers))
        G += "}";
    }
    if (J.params) {
      if (V0("default", J.params.schema))
        for (let [I, D] of Object.entries(exports_value2.Default(J.params.schema, {}))) {
          const N = typeof D === "object" ? JSON.stringify(D) : typeof D === "string" ? `'${D}'` : D;
          if (N !== undefined)
            G += `c.params['${I}'] ??= ${N}\n`;
        }
      if (G += `if(validator.params.Check(c.params) === false) {
				${b("params")}
			}`, A0(J.params.schema))
        G += "\nc.params = validator.params.Decode(c.params)\n";
    }
    if (J.query) {
      if (k && "Clean" in J.query && !$0(J.query))
        G += "c.query = validator.query.Clean(c.query);\n";
      if (V0("default", J.query.schema))
        for (let [I, D] of Object.entries(exports_value2.Default(J.query.schema, {}))) {
          const N = typeof D === "object" ? JSON.stringify(D) : typeof D === "string" ? `'${D}'` : D;
          if (N !== undefined)
            G += `if(c.query['${I}'] === undefined) c.query['${I}'] = ${N}\n`;
        }
      if (_0(J.query))
        G += "if(isNotEmpty(c.query)) {";
      if (G += `if(validator.query.Check(c.query) === false) {
          		${b("query")}
			}`, A0(J.query.schema))
        G += "\nc.query = validator.query.Decode(Object.assign({}, c.query))\n";
      if (_0(J.query))
        G += "}";
    }
    if (J.body) {
      if (k && "Clean" in J.body && !$0(J.body))
        G += "c.body = validator.body.Clean(c.body);\n";
      const I = A0(J.body.schema);
      if (I || _0(J.body))
        G += '\nconst isNotEmptyObject = c.body && (typeof c.body === "object" && isNotEmpty(c.body))\n';
      if (V0("default", J.body.schema)) {
        const D = exports_value2.Default(J.body.schema, J.body.schema.type === "object" ? {} : undefined), N = typeof D === "object" ? JSON.stringify(D) : typeof D === "string" ? `'${D}'` : D;
        if (G += `if(validator.body.Check(c.body) === false) {
					if (typeof c.body === 'object') {
						c.body = Object.assign(${N}, c.body)
					} else { c.body = ${N} }`, _0(J.body))
          G += `
					    if(isNotEmptyObject && validator.body.Check(c.body) === false) {
            				${b("body")}
             			}
                    }`;
        else
          G += `
    				if(validator.body.Check(c.body) === false) {
        				${b("body")}
         			}
                }`;
      } else if (_0(J.body))
        G += `if(isNotEmptyObject && validator.body.Check(c.body) === false) {
         			${b("body")}
          		}`;
      else
        G += `if(validator.body.Check(c.body) === false) {
         			${b("body")}
          		}`;
      if (I)
        G += "\nif(isNotEmptyObject) c.body = validator.body.Decode(c.body)\n";
    }
    if (p(C?.schema?.properties ?? C?.schema?.schema ?? {})) {
      if (G += `const cookieValue = {}
    			for(const [key, value] of Object.entries(c.cookie))
    				cookieValue[key] = value.value\n`, V0("default", C.schema))
        for (let [I, D] of Object.entries(exports_value2.Default(C.schema, {})))
          G += `cookieValue['${I}'] = ${typeof D === "object" ? JSON.stringify(D) : D}\n`;
      if (_0(J.cookie))
        G += "if(isNotEmpty(c.cookie)) {";
      if (G += `if(validator.cookie.Check(cookieValue) === false) {
				${b("cookie", "cookieValue")}
			}`, A0(J.cookie.schema))
        G += `\nfor(const [key, value] of Object.entries(validator.cookie.Decode(cookieValue)))
					c.cookie[key].value = value\n`;
      if (_0(J.cookie))
        G += "}";
    }
  }
  if (Z?.beforeHandle) {
    const I = R("beforeHandle", { total: Z.beforeHandle.length });
    let D = false;
    for (let N = 0;N < Z.beforeHandle.length; N++) {
      const S = Z.beforeHandle[N], q = I.resolveChild(S.fn.name), n = q0(S);
      if (S.subType === "resolve" || S.subType === "mapResolve") {
        if (!D)
          D = true, G += "\nlet resolved\n";
        if (G += g(S) ? `resolved = await beforeHandle[${N}](c);\n` : `resolved = beforeHandle[${N}](c);\n`, S.subType === "mapResolve")
          G += `if(resolved[ELYSIA_RESPONSE])
						throw resolved
					else {
						resolved.request = c.request
						resolved.store = c.store
						resolved.qi = c.qi
						resolved.path = c.path
						resolved.url = c.url
						resolved.redirect = c.redirect
						resolved.set = c.set
						resolved.error = c.error

						c = resolved
					}`;
        else
          G += `if(resolved[ELYSIA_RESPONSE])
						throw resolved
					else
						Object.assign(c, resolved)\n`;
      } else if (!n)
        G += g(S) ? `await beforeHandle[${N}](c);\n` : `beforeHandle[${N}](c);\n`, q();
      else {
        if (G += g(S) ? `be = await beforeHandle[${N}](c);\n` : `be = beforeHandle[${N}](c);\n`, q("be"), G += "if(be !== undefined) {\n", I.resolve(), Z.afterHandle?.length) {
          R("handle", { name: B ? Q.name : undefined }).resolve();
          const u = R("afterHandle", { total: Z.afterHandle.length });
          for (let J0 = 0;J0 < Z.afterHandle.length; J0++) {
            const S0 = Z.afterHandle[J0], P2 = q0(S0), N2 = u.resolveChild(S0.fn.name);
            if (G += "c.response = be\n", !P2)
              G += g(S0.fn) ? `await afterHandle[${J0}](c, be)\n` : `afterHandle[${J0}](c, be)\n`;
            else
              G += g(S0.fn) ? `af = await afterHandle[${J0}](c)\n` : `af = afterHandle[${J0}](c)\n`, G += "if(af !== undefined) { c.response = be = af }\n";
            N2("af");
          }
          u.resolve();
        }
        if (J.response)
          G += w0("be");
        const K0 = R("mapResponse", { total: Z.mapResponse.length });
        if (Z.mapResponse.length) {
          G += "\nc.response = be\n";
          for (let u = 0;u < Z.mapResponse.length; u++) {
            const J0 = Z.mapResponse[u], S0 = K0.resolveChild(J0.fn.name);
            G += `\nif(mr === undefined) {
							mr = ${C0(J0) ? "await" : ""} onMapResponse[${u}](c)
							if(mr !== undefined) be = c.response = mr
						}\n`, S0();
          }
        }
        K0.resolve(), G += H, G += `return mapEarlyResponse(${r} be, c.set ${t})}\n`;
      }
    }
    I.resolve();
  }
  if (Z?.afterHandle.length) {
    const I = R("handle", { name: B ? Q.name : undefined });
    if (Z.afterHandle.length)
      G += Z0 ? `let r = c.response = await ${U};\n` : `let r = c.response = ${U};\n`;
    else
      G += Z0 ? `let r = await ${U};\n` : `let r = ${U};\n`;
    I.resolve();
    const D = R("afterHandle", { total: Z.afterHandle.length });
    for (let S = 0;S < Z.afterHandle.length; S++) {
      const q = Z.afterHandle[S], n = q0(q), E = D.resolveChild(q.fn.name);
      if (!n)
        G += g(q.fn) ? `await afterHandle[${S}](c)\n` : `afterHandle[${S}](c)\n`, E();
      else if (G += g(q.fn) ? `af = await afterHandle[${S}](c)\n` : `af = afterHandle[${S}](c)\n`, E("af"), J.response)
        G += "if(af !== undefined) {", D.resolve(), G += w0("af"), G += "c.response = af }";
      else
        G += "if(af !== undefined) {", D.resolve(), G += "c.response = af}\n";
    }
    if (D.resolve(), G += "r = c.response\n", J.response)
      G += w0();
    G += H;
    const N = R("mapResponse", { total: Z.mapResponse.length });
    if (Z.mapResponse.length)
      for (let S = 0;S < Z.mapResponse.length; S++) {
        const q = Z.mapResponse[S], n = N.resolveChild(q.fn.name);
        G += `\nmr = ${C0(q) ? "await" : ""} onMapResponse[${S}](c)
				if(mr !== undefined) r = c.response = mr\n`, n();
      }
    if (N.resolve(), i0)
      G += `return mapResponse(${r} r, c.set ${t})\n`;
    else
      G += `return mapCompactResponse(${r} r ${t})\n`;
  } else {
    const I = R("handle", { name: B ? Q.name : undefined });
    if (J.response || Z.mapResponse.length) {
      if (G += Z0 ? `let r = await ${U};\n` : `let r = ${U};\n`, I.resolve(), J.response)
        G += w0();
      R("afterHandle").resolve();
      const D = R("mapResponse", { total: Z.mapResponse.length });
      if (Z.mapResponse.length) {
        G += "\nc.response = r\n";
        for (let N = 0;N < Z.mapResponse.length; N++) {
          const S = Z.mapResponse[N], q = D.resolveChild(S.fn.name);
          G += `\nif(mr === undefined) {
						mr = ${C0(S) ? "await" : ""} onMapResponse[${N}](c)
    					if(mr !== undefined) r = c.response = mr
					}\n`, q();
        }
      }
      if (D.resolve(), G += H, Q instanceof Response)
        G += Y.set ? `if(
					isNotEmpty(c.set.headers) ||
					c.set.status !== 200 ||
					c.set.redirect ||
					c.set.cookie
				)
					return mapResponse(${r} ${U}.clone(), c.set ${t})
				else
					return ${U}.clone()` : `return ${U}.clone()`, G += "\n";
      else if (i0)
        G += `return mapResponse(${r} r, c.set ${t})\n`;
      else
        G += `return mapCompactResponse(${r} r ${t})\n`;
    } else if (V || M) {
      G += Z0 ? `let r = await ${U};\n` : `let r = ${U};\n`, I.resolve(), R("afterHandle").resolve();
      const D = R("mapResponse", { total: Z.mapResponse.length });
      if (Z.mapResponse.length) {
        G += "\nc.response = r\n";
        for (let N = 0;N < Z.mapResponse.length; N++) {
          const S = Z.mapResponse[N], q = D.resolveChild(S.fn.name);
          G += `\nif(mr === undefined) {
							mr = ${C0(S) ? "await" : ""} onMapResponse[${N}](c)
    						if(mr !== undefined) r = c.response = mr
						}\n`, q();
        }
      }
      if (D.resolve(), G += H, i0)
        G += `return mapResponse(${r} r, c.set ${t})\n`;
      else
        G += `return mapCompactResponse(${r} r ${t})\n`;
    } else {
      I.resolve();
      const D = Z0 ? `await ${U}` : U;
      if (R("afterHandle").resolve(), Q instanceof Response)
        G += Y.set ? `if(
					isNotEmpty(c.set.headers) ||
					c.set.status !== 200 ||
					c.set.redirect ||
					c.set.cookie
				)
					return mapResponse(${r} ${U}.clone(), c.set ${t})
				else
					return ${U}.clone()` : `return ${U}.clone()`, G += "\n";
      else if (i0)
        G += `return mapResponse(${r} ${D}, c.set ${t})\n`;
      else
        G += `return mapCompactResponse(${r} ${D} ${t})\n`;
    }
  }
  if (G += "\n} catch(error) {", z)
    G += "\nif(isParsing) error = new ParseError()\n";
  if (!g0)
    G += "\nreturn (async () => {\n";
  if (G += "\nconst set = c.set\nif (!set.status || set.status < 300) set.status = error?.status || 500\n", M)
    for (let I = 0;I < Z.trace.length; I++)
      G += `report${I}?.resolve(error);reportChild${I}?.(error);\n`;
  const B1 = R("error", { total: Z.error.length });
  if (Z.error.length) {
    G += `
				c.error = error
				c.code = error.code ?? error[ERROR_CODE] ?? "UNKNOWN"
				let er
			`;
    for (let I = 0;I < Z.error.length; I++) {
      const D = B1.resolveChild(Z.error[I].fn.name);
      if (g(Z.error[I]))
        G += `\ner = await handleErrors[${I}](c)\n`;
      else
        G += `\ner = handleErrors[${I}](c)\nif (er instanceof Promise) er = await er\n`;
      D();
      const N = R("mapResponse", { total: Z.mapResponse.length });
      if (Z.mapResponse.length)
        for (let S = 0;S < Z.mapResponse.length; S++) {
          const q = Z.mapResponse[S], n = N.resolveChild(q.fn.name);
          G += `\nc.response = er\n
							er = ${C0(q) ? "await" : ""} onMapResponse[${S}](c)
							if(er instanceof Promise) er = await er\n`, n();
        }
      if (N.resolve(), G += `er = mapEarlyResponse(er, set ${t})\n`, G += "if (er) {", M) {
        for (let S = 0;S < Z.trace.length; S++)
          G += `\nreport${S}.resolve()\n`;
        B1.resolve();
      }
      G += "return er\n}\n";
    }
  }
  if (B1.resolve(), G += "return handleError(c, error, true)\n", !g0)
    G += "})()";
  if (G += "}", _ || M) {
    if (G += " finally { ", !g0)
      G += ";(async () => {";
    const I = R("afterResponse", { total: Z.afterResponse.length });
    if (_)
      for (let D = 0;D < Z.afterResponse.length; D++) {
        const N = I.resolveChild(Z.afterResponse[D].fn.name);
        G += `\nawait afterResponse[${D}](c);\n`, N();
      }
    if (I.resolve(), !g0)
      G += "})();";
    G += "}";
  }
  G = `const {
		handler,
		handleError,
		hooks: {
			transform,
			resolve,
			beforeHandle,
			afterHandle,
			mapResponse: onMapResponse,
			parse,
			error: handleErrors,
			afterResponse,
			trace: _trace
		},
		validator,
		utils: {
			mapResponse,
			mapCompactResponse,
			mapEarlyResponse,
			parseQuery,
			isNotEmpty
		},
		error: {
			NotFoundError,
			ValidationError,
			InternalServerError,
			ParseError
		},
		schema,
		definitions,
		ERROR_CODE,
		parseCookie,
		signCookie,
		decodeURIComponent,
		ELYSIA_RESPONSE,
		ELYSIA_TRACE,
		ELYSIA_REQUEST_ID,
		getServer
	} = hooks

	const trace = _trace.map(x => typeof x === 'function' ? x : x.fn)

	return ${g0 ? "async" : ""} function handle(c) {
		${Z.beforeHandle.length ? "let be" : ""}
		${Z.afterHandle.length ? "let af" : ""}
		${Z.mapResponse.length ? "let mr" : ""}

		${K ? "c.schema = schema; c.defs = definitions" : ""}
		${G}
	}`;
  try {
    return Function("hooks", G)({ handler: Q, hooks: A1(Z), validator: J, handleError: j.handleError, utils: { mapResponse: y, mapCompactResponse: e, mapEarlyResponse: f, parseQuery: x0, isNotEmpty: p }, error: { NotFoundError: O0, ValidationError: L, InternalServerError: J1, ParseError: Q1 }, schema: j.router.history, definitions: j.definitions.type, ERROR_CODE: N0, parseCookie: a0, signCookie: b0, decodeURIComponent: w2.default, ELYSIA_RESPONSE: d, ELYSIA_TRACE: l0, ELYSIA_REQUEST_ID: P0, getServer: () => j.getServer() });
  } catch {
    const I = A1(Z);
    console.log("[Composer] failed to generate optimized handler"), console.log("Please report the following to SaltyAom privately as it may include sensitive information about your codebase:"), console.log("---"), console.log({ handler: typeof Q === "function" ? Q.toString() : Q, hooks: { ...I, transform: I?.transform?.map?.((D) => D.toString()), resolve: I?.resolve?.map?.((D) => D.toString()), beforeHandle: I?.beforeHandle?.map?.((D) => D.toString()), afterHandle: I?.afterHandle?.map?.((D) => D.toString()), mapResponse: I?.mapResponse?.map?.((D) => D.toString()), parse: I?.parse?.map?.((D) => D.toString()), error: I?.error?.map?.((D) => D.toString()), afterResponse: I?.afterResponse?.map?.((D) => D.toString()), stop: I?.stop?.map?.((D) => D.toString()) }, validator: J, definitions: j.definitions.type }), console.log("---"), process.exit(1);
  }
};
var E1 = (j) => {
  let W = "", $ = "";
  const X = j.setHeaders;
  for (let w of Object.keys(j.singleton.decorator))
    W += `,${w}: app.singleton.decorator.${w}`;
  const Z = j.router, J = j.event.trace.length > 0;
  let Q = `
	const route = router.find(request.method, path) ${Z.http.root.ALL ? '?? router.find("ALL", path)' : ""}

	if (route === null)
		return ${j.event.error.length ? "app.handleError(ctx, notFound)" : j.event.request.length ? `new Response(error404Message, {
					status: ctx.set.status === 200 ? 404 : ctx.set.status,
					headers: ctx.set.headers
				})` : "error404.clone()"}

	ctx.params = route.params\n`;
  Q += `if(route.store.handler) return route.store.handler(ctx)
	return (route.store.handler = route.store.compile())(ctx)\n`;
  let K = "";
  for (let [w, { code: z, all: F }] of Object.entries(Z.static.http.map))
    K += `case '${w}':\nswitch(request.method) {\n${z}\n${F ?? "default: break map"}}\n\n`;
  const Y = j.event.request.some(g);
  if ($ += `const {
		app,
		mapEarlyResponse,
		NotFoundError,
		randomId,
		handleError,
		error,
		redirect,
		ELYSIA_TRACE,
		ELYSIA_REQUEST_ID,
		getServer
	} = data

	const store = app.singleton.store
	const staticRouter = app.router.static.http
	const st = staticRouter.handlers
	const wsRouter = app.router.ws
	const router = app.router.http
	const trace = app.event.trace.map(x => typeof x === 'function' ? x : x.fn)

	const notFound = new NotFoundError()
	const hoc = app.extender.higherOrderFunctions.map(x => x.fn)

	${j.event.request.length ? "const onRequest = app.event.request.map(x => x.fn)" : ""}
	${j.event.error.length ? "" : `\nconst error404Message = notFound.message.toString()
	const error404 = new Response(error404Message, { status: 404 });\n`}

	${j.event.trace.length ? `const ${j.event.trace.map((w, z) => `tr${z} = app.event.trace[${z}].fn`).join(",")}` : ""}

	${Y ? "async" : ""} function map(request) {\n`, j.event.request.length)
    $ += "let re";
  if ($ += `\nconst url = request.url
		const s = url.indexOf('/', 11)
		const qi = url.indexOf('?', s + 1)
		let path
		if(qi === -1)
			path = url.substring(s)
		else
			path = url.substring(s, qi)\n`, $ += `${J ? "const id = randomId()" : ""}
		const ctx = {
			request,
			store,
			qi,
			path,
			url,
			redirect,
			set: {
				headers: ${Object.keys(X ?? {}).length ? "Object.assign({}, app.setHeaders)" : "{}"},
				status: 200
			},
			error
			${j.inference.server ? `, get server() {
							return getServer()
						}` : ""}
			${J ? ",[ELYSIA_REQUEST_ID]: id" : ""}
			${W}
		}\n`, j.event.trace.length)
    $ += `\nctx[ELYSIA_TRACE] = [${j.event.trace.map((w, z) => `tr${z}(ctx)`).join(",")}]\n`;
  const U = L1({ context: "ctx", trace: j.event.trace, addFn: (w) => {
    $ += w;
  } })("request", { attribute: "ctx", total: j.event.request.length });
  if (j.event.request.length) {
    $ += "\n try {\n";
    for (let w = 0;w < j.event.request.length; w++) {
      const z = j.event.request[w], F = q0(z), P = g(z), O = U.resolveChild(j.event.request[w].fn.name);
      if (F)
        $ += `re = mapEarlyResponse(
					${P ? "await" : ""} onRequest[${w}](ctx),
					ctx.set,
					request
				)\n`, O("re"), $ += "if(re !== undefined) return re\n";
      else
        $ += `${P ? "await" : ""} onRequest[${w}](ctx)\n`, O();
    }
    $ += `} catch (error) {
			return app.handleError(ctx, error)
		}`;
  }
  U.resolve();
  const _ = j.router.static.ws, M = j.router.ws;
  if (Object.keys(_).length || M.history.length) {
    $ += `
			if(request.method === 'GET') {
				switch(path) {`;
    for (let [w, z] of Object.entries(_))
      $ += `
					case '${w}':
						if(request.headers.get('upgrade') === 'websocket')
							return st[${z}](ctx)

						break`;
    $ += `
				default:
					if(request.headers.get('upgrade') === 'websocket') {
						const route = wsRouter.find('ws', path)

						if(route) {
							ctx.params = route.params

							if(route.store.handler)
							    return route.store.handler(ctx)

							return (route.store.handler = route.store.compile())(ctx)
						}
					}

					break
			}
		}\n`;
  }
  if ($ += `
		map: switch(path) {
			${K}

			default:
				break
		}

		${Q}
	}\n`, j.extender.higherOrderFunctions.length) {
    let w = "map";
    for (let z = 0;z < j.extender.higherOrderFunctions.length; z++)
      w = `hoc[${z}](${w}, request)`;
    $ += `return function hocMap(request) { return ${w}(request) }`;
  } else
    $ += "return map";
  const G = H1(j);
  return j.handleError = G, Function("data", $)({ app: j, mapEarlyResponse: f, NotFoundError: O0, randomId: X1, handleError: G, error: C1, redirect: h0, ELYSIA_TRACE: l0, ELYSIA_REQUEST_ID: P0, getServer: () => j.getServer() });
};
var H1 = (j) => {
  const W = j.event;
  let $ = "";
  $ += `const {
		app: { event: { error: onErrorContainer, afterResponse: resContainer, mapResponse: _onMapResponse, trace: _trace } },
		mapResponse,
		ERROR_CODE,
		ELYSIA_RESPONSE,
		ELYSIA_TRACE,
		ELYSIA_REQUEST_ID
	} = inject

	const trace = _trace.map(x => typeof x === 'function' ? x : x.fn)
	const onMapResponse = []

	for(let i = 0; i < _onMapResponse.length; i++)
		onMapResponse.push(_onMapResponse[i].fn ?? _onMapResponse[i])

	delete _onMapResponse

	const onError = onErrorContainer.map(x => x.fn)
	const res = resContainer.map(x => x.fn)

	return ${j.event.error.find(g) || j.event.mapResponse.find(g) ? "async" : ""} function(context, error, skipGlobal) {`;
  const X = j.event.trace.length > 0;
  if (X)
    $ += "\nconst id = context[ELYSIA_REQUEST_ID]\n";
  const Z = L1({ context: "context", trace: W.trace, addFn: (K) => {
    $ += K;
  } });
  $ += `
		const set = context.set
		let r

		context.code = error.code
		context.error = error

		if(typeof error === "object" && error && ELYSIA_RESPONSE in error) {
			error.status = error[ELYSIA_RESPONSE]
			error.message = error.response
		}\n`;
  const J = X || W.afterResponse.length > 0 || W.afterResponse.length > 0 ? "context.response = " : "";
  for (let K = 0;K < j.event.error.length; K++) {
    const Y = j.event.error[K], B = `${g(Y) ? "await " : ""}onError[${K}](context)`;
    if ($ += "\nif(skipGlobal !== true) {\n", q0(Y)) {
      $ += `r = ${B}; if(r !== undefined) {
				if(r instanceof Response) return r

				if(r[ELYSIA_RESPONSE]) {
					error.status = error[ELYSIA_RESPONSE]
					error.message = error.response
				}

				if(set.status === 200) set.status = error.status\n`;
      const U = Z("mapResponse", { total: W.mapResponse.length, name: "context" });
      if (W.mapResponse.length)
        for (let _ = 0;_ < W.mapResponse.length; _++) {
          const M = W.mapResponse[_], G = U.resolveChild(M.fn.name);
          $ += `\ncontext.response = r
						r = ${C0(M) ? "await" : ""} onMapResponse[${_}](context)\n`, G();
        }
      U.resolve(), $ += `return mapResponse(${J} r, set, context.request)}\n`;
    } else
      $ += B + "\n";
    $ += "\n}\n";
  }
  $ += `if(error.constructor.name === "ValidationError" || error.constructor.name === "TransformDecodeError") {
		set.status = error.status ?? 422
		return new Response(
			error.message,
			{
				headers: Object.assign(
					{ 'content-type': 'application/json'},
					set.headers
				),
				status: set.status
			}
		)
	} else {
		if(error.code && typeof error.status === "number")
			return new Response(
				error.message,
				{ headers: set.headers, status: error.status }
			)\n`;
  const Q = Z("mapResponse", { total: W.mapResponse.length, name: "context" });
  if (W.mapResponse.length)
    for (let K = 0;K < W.mapResponse.length; K++) {
      const Y = W.mapResponse[K], B = Q.resolveChild(Y.fn.name);
      $ += `\ncontext.response = error
			error = ${C0(Y) ? "await" : ""} onMapResponse[${K}](context)\n`, B();
    }
  return Q.resolve(), $ += `\nreturn mapResponse(${J} error, set, context.request)\n}\n}`, Function("inject", $)({ app: j, mapResponse: y, ERROR_CODE: N0, ELYSIA_RESPONSE: d, ELYSIA_TRACE: l0, ELYSIA_REQUEST_ID: P0 });
};
var b1 = (j) => async (W) => {
  const $ = W.url, X = $.indexOf("/", 11), Z = $.indexOf("?", X + 1), J = Z === -1 ? $.substring(X) : $.substring(X, Z), Q = { cookie: {}, status: 200, headers: {} }, K = Object.assign({}, j.singleton.decorator, { set: Q, store: j.singleton.store, request: W, path: J, qi: Z, redirect: h0 });
  try {
    for (let P = 0;P < j.event.request.length; P++) {
      const O = j.event.request[P].fn;
      let V = O(K);
      if (V instanceof Promise)
        V = await V;
      if (V = f(V, Q), V)
        return K.response = V;
    }
    const Y = j.router.dynamic.find(W.method, J) ?? j.router.dynamic.find("ALL", J);
    if (!Y)
      throw new O0;
    const { handle: B, hooks: U, validator: _, content: M } = Y.store;
    let G;
    if (W.method !== "GET" && W.method !== "HEAD")
      if (M)
        switch (M) {
          case "application/json":
            G = await W.json();
            break;
          case "text/plain":
            G = await W.text();
            break;
          case "application/x-www-form-urlencoded":
            G = x0(await W.text());
            break;
          case "application/octet-stream":
            G = await W.arrayBuffer();
            break;
          case "multipart/form-data":
            G = {};
            const P = await W.formData();
            for (let O of P.keys()) {
              if (G[O])
                continue;
              const V = P.getAll(O);
              if (V.length === 1)
                G[O] = V[0];
              else
                G[O] = V;
            }
            break;
        }
      else {
        let P = W.headers.get("content-type");
        if (P) {
          const O = P.indexOf(";");
          if (O !== -1)
            P = P.slice(0, O);
          K.contentType = P;
          for (let V = 0;V < U.parse.length; V++) {
            const C = U.parse[V].fn;
            let T = C(K, P);
            if (T instanceof Promise)
              T = await T;
            if (T) {
              G = T;
              break;
            }
          }
          if (delete K.contentType, G === undefined)
            switch (P) {
              case "application/json":
                G = await W.json();
                break;
              case "text/plain":
                G = await W.text();
                break;
              case "application/x-www-form-urlencoded":
                G = x0(await W.text());
                break;
              case "application/octet-stream":
                G = await W.arrayBuffer();
                break;
              case "multipart/form-data":
                G = {};
                const V = await W.formData();
                for (let C of V.keys()) {
                  if (G[C])
                    continue;
                  const T = V.getAll(C);
                  if (T.length === 1)
                    G[C] = T[0];
                  else
                    G[C] = T;
                }
                break;
            }
        }
      }
    K.body = G, K.params = Y?.params || undefined, K.query = Z === -1 ? {} : x0($.substring(Z + 1)), K.headers = {};
    for (let [P, O] of W.headers.entries())
      K.headers[P] = O;
    const w = Object.assign({}, j.config?.cookie, _?.cookie?.config), z = W.headers.get("cookie");
    K.cookie = await a0(K.set, z, w ? { secrets: w.secrets !== undefined ? typeof w.secrets === "string" ? w.secrets : w.secrets.join(",") : undefined, sign: w.sign === true ? true : w.sign !== undefined ? typeof w.sign === "string" ? w.sign : w.sign.join(",") : undefined } : undefined);
    for (let P = 0;P < U.transform.length; P++) {
      const O = U.transform[P], V = O.fn(K);
      if (O.subType === "derive")
        if (V instanceof Promise)
          Object.assign(K, await V);
        else
          Object.assign(K, V);
      else if (V instanceof Promise)
        await V;
    }
    if (_) {
      if (_.createHeaders?.()) {
        const P = {};
        for (let O in W.headers)
          P[O] = W.headers.get(O);
        if (_.headers.Check(P) === false)
          throw new L("header", _.headers, P);
      }
      if (_.createParams?.()?.Check(K.params) === false)
        throw new L("params", _.params, K.params);
      if (_.createQuery?.()?.Check(K.query) === false)
        throw new L("query", _.query, K.query);
      if (_.createCookie?.()) {
        const P = {};
        for (let [O, V] of Object.entries(K.cookie))
          P[O] = V.value;
        if (_.cookie.Check(P) === false)
          throw new L("cookie", _.cookie, P);
      }
      if (_.createBody?.()?.Check(G) === false)
        throw new L("body", _.body, G);
    }
    for (let P = 0;P < U.beforeHandle.length; P++) {
      let O = U.beforeHandle[P].fn(K);
      if (O instanceof Promise)
        O = await O;
      if (O !== undefined) {
        K.response = O;
        for (let C = 0;C < U.afterHandle.length; C++) {
          let T = U.afterHandle[C].fn(K);
          if (T instanceof Promise)
            T = await T;
          if (T)
            O = T;
        }
        const V = f(O, K.set);
        if (V)
          return K.response = V;
      }
    }
    let F = B(K);
    if (F instanceof Promise)
      F = await F;
    if (!U.afterHandle.length) {
      const P = F?.[d] ?? (Q.status ? typeof Q.status === "string" ? Y0[Q.status] : Q.status : 200), O = _?.createResponse?.()?.[P];
      if (O?.Check(F) === false)
        throw new L("response", O, F);
    } else {
      K.response = F;
      for (let P = 0;P < U.afterHandle.length; P++) {
        let O = U.afterHandle[P].fn(K);
        if (O instanceof Promise)
          O = await O;
        const V = f(O, K.set);
        if (V !== undefined) {
          const C = _?.response?.[V.status];
          if (C?.Check(V) === false)
            throw new L("response", C, V);
          return K.response = V;
        }
      }
    }
    if (K.set.cookie && w?.sign) {
      const P = !w.secrets ? undefined : typeof w.secrets === "string" ? w.secrets : w.secrets[0];
      if (w.sign === true)
        for (let [O, V] of Object.entries(K.set.cookie))
          K.set.cookie[O].value = await b0(V.value, "${secret}");
      else {
        const O = _?.cookie?.schema?.properties;
        for (let V of w.sign) {
          if (!(V in O))
            continue;
          if (K.set.cookie[V]?.value)
            K.set.cookie[V].value = await b0(K.set.cookie[V].value, P);
        }
      }
    }
    return K.response = y(F, K.set);
  } catch (Y) {
    if (Y.status)
      Q.status = Y.status;
    return j.handleError(K, Y);
  } finally {
    for (let Y of j.event.afterResponse)
      await Y.fn(K);
  }
};
var F2 = (j) => async (W, $) => {
  const X = Object.assign(W, { error: $, code: $.code });
  X.set = W.set;
  for (let Z = 0;Z < j.event.error.length; Z++) {
    let Q = j.event.error[Z].fn(X);
    if (Q instanceof Promise)
      Q = await Q;
    if (Q !== undefined && Q !== null)
      return W.response = y(Q, W.set);
  }
  return new Response(typeof $.cause === "string" ? $.cause : $.message, { headers: W.set.headers, status: $.status ?? 500 });
};

class X0 {
  config;
  server = null;
  dependencies = {};
  _routes = {};
  _types = { Prefix: "", Scoped: false, Singleton: {}, Definitions: {}, Metadata: {} };
  _ephemeral = {};
  _volatile = {};
  static version = T1;
  version = T1;
  singleton = { decorator: {}, store: {}, derive: {}, resolve: {} };
  get store() {
    return this.singleton.store;
  }
  get decorator() {
    return this.singleton.decorator;
  }
  get _scoped() {
    return this.config.scoped;
  }
  definitions = { type: {}, error: {} };
  extender = { macros: [], higherOrderFunctions: [] };
  validator = { global: null, scoped: null, local: null, getCandidate() {
    return H0(H0(this.global, this.scoped), this.local);
  } };
  event = { start: [], request: [], parse: [], transform: [], beforeHandle: [], afterHandle: [], mapResponse: [], afterResponse: [], trace: [], error: [], stop: [] };
  telemetry = { stack: undefined };
  router = { http: new D0, ws: new D0, dynamic: new D0, static: { http: { handlers: [], map: {}, all: "" }, ws: {} }, history: [] };
  routeTree = new Map;
  get routes() {
    return this.router.history;
  }
  getGlobalRoutes() {
    return this.router.history;
  }
  inference = { body: false, cookie: false, headers: false, query: false, set: false, server: false };
  getServer() {
    return this.server;
  }
  _promisedModules;
  get promisedModules() {
    if (!this._promisedModules)
      this._promisedModules = new V1;
    return this._promisedModules;
  }
  constructor(j) {
    if (j?.tags)
      if (!j.detail)
        j.detail = { tags: j.tags };
      else
        j.detail.tags = j.tags;
    if (this.config = {}, this.applyConfig(j ?? {}), j?.analytic && (j?.name || j?.seed !== undefined))
      this.telemetry.stack = new Error().stack;
  }
  env(j, W = Bun?.env ?? process.env) {
    if (m(j, { dynamic: true, additionalProperties: true, coerce: true }).Check(W) === false) {
      const X = new L("env", j, W);
      throw new Error(X.all.map((Z) => Z.summary).join("\n"));
    }
    return this;
  }
  wrap(j) {
    return this.extender.higherOrderFunctions.push({ checksum: I0(JSON.stringify({ name: this.config.name, seed: this.config.seed, content: j.toString() })), fn: j }), this;
  }
  applyMacro(j) {
    if (this.extender.macros.length) {
      const W = B2({ globalHook: this.event, localHook: j }), $ = { events: { global: this.event, local: j }, onParse: W("parse"), onTransform: W("transform"), onBeforeHandle: W("beforeHandle"), onAfterHandle: W("afterHandle"), mapResponse: W("mapResponse"), onAfterResponse: W("afterResponse"), onError: W("error") };
      for (let X of this.extender.macros)
        K2(X.fn($), j);
    }
  }
  applyConfig(j) {
    return this.config = { prefix: "", aot: true, strictPath: false, global: false, analytic: false, normalize: true, ...j, cookie: { path: "/", ...j?.cookie }, experimental: j?.experimental ?? {}, seed: j?.seed === undefined ? "" : j?.seed }, this;
  }
  get models() {
    const j = {};
    for (let [W, $] of Object.entries(this.definitions.type))
      j[W] = m($);
    return j;
  }
  add(j, W, $, X, { allowMeta: Z = false, skipPrefix: J = false } = { allowMeta: false, skipPrefix: false }) {
    if (X = Y2(X), W !== "" && W.charCodeAt(0) !== 47)
      W = "/" + W;
    if (this.config.prefix && !J && !this.config.scoped)
      W = this.config.prefix + W;
    if (X?.type)
      switch (X.type) {
        case "text":
          X.type = "text/plain";
          break;
        case "json":
          X.type = "application/json";
          break;
        case "formdata":
          X.type = "multipart/form-data";
          break;
        case "urlencoded":
          X.type = "application/x-www-form-urlencoded";
          break;
        case "arrayBuffer":
          X.type = "application/octet-stream";
          break;
        default:
          break;
      }
    const Q = this.definitions.type, K = !this.config.aot, Y = { ...this.validator.getCandidate() }, B = { body: X?.body ?? Y?.body, headers: X?.headers ?? Y?.headers, params: X?.params ?? Y?.params, query: X?.query ?? Y?.query, cookie: X?.cookie ?? Y?.cookie, response: X?.response ?? Y?.response }, U = () => B.cookie ? j1({ validator: B.cookie, defaultConfig: this.config.cookie, config: B.cookie?.config ?? {}, dynamic: K, models: Q }) : undefined, _ = this.config.normalize, M = this.config.precompile === true || typeof this.config.precompile === "object" && this.config.precompile.schema === true ? { body: m(B.body, { dynamic: K, models: Q, normalize: _ }), headers: m(B.headers, { dynamic: K, models: Q, additionalProperties: !this.config.normalize, coerce: true, additionalCoerce: F0() }), params: m(B.params, { dynamic: K, models: Q, coerce: true, additionalCoerce: F0() }), query: m(B.query, { dynamic: K, models: Q, normalize: _, coerce: true, additionalCoerce: F0() }), cookie: U(), response: e0(B.response, { dynamic: K, models: Q, normalize: _ }) } : { createBody() {
      if (this.body)
        return this.body;
      return this.body = m(B.body, { dynamic: K, models: Q, normalize: _ });
    }, createHeaders() {
      if (this.headers)
        return this.headers;
      return this.headers = m(B.headers, { dynamic: K, models: Q, additionalProperties: !_, coerce: true, additionalCoerce: F0() });
    }, createParams() {
      if (this.params)
        return this.params;
      return this.params = m(B.params, { dynamic: K, models: Q, coerce: true, additionalCoerce: F0() });
    }, createQuery() {
      if (this.query)
        return this.query;
      return this.query = m(B.query, { dynamic: K, models: Q, coerce: true, additionalCoerce: F0() });
    }, createCookie() {
      if (this.cookie)
        return this.cookie;
      return this.cookie = U();
    }, createResponse() {
      if (this.response)
        return this.response;
      return this.response = e0(B.response, { dynamic: K, models: Q, normalize: _ });
    } }, G = W.endsWith("/") ? W.slice(0, W.length - 1) : W + "/";
    if (X = l(X, Y), X.tags)
      if (!X.detail)
        X.detail = { tags: X.tags };
      else
        X.detail.tags = X.tags;
    if (p(this.config.detail))
      X.detail = c(Object.assign({}, this.config.detail), X.detail);
    this.applyMacro(X);
    const w = l(this.event, X);
    if (this.config.aot === false) {
      if (this.router.dynamic.add(j, W, { validator: M, hooks: w, content: X?.type, handle: $ }), this.config.strictPath === false)
        this.router.dynamic.add(j, G, { validator: M, hooks: w, content: X?.type, handle: $ });
      this.router.history.push({ method: j, path: W, composed: null, handler: $, hooks: w });
      return;
    }
    const z = this.config.precompile === true || typeof this.config.precompile === "object" && this.config.precompile.compose === true, F = u0(this.inference), P = () => M2({ app: this, path: W, method: j, localHook: l(X), hooks: w, validator: M, handler: $, allowMeta: Z, inference: F }), O = z ? P() : (H) => {
      return P()(H);
    }, V = this.router.history.length;
    if (this.routeTree.has(j + W))
      for (let H = 0;H < this.router.history.length; H++) {
        const k = this.router.history[H];
        if (k.path === W && k.method === j) {
          const b = this.router.history.splice(H, 1)[0];
          if (b && this.routeTree.has(b?.method + b?.path))
            this.routeTree.delete(b.method + b.path);
        }
      }
    else
      this.routeTree.set(j + W, V);
    this.router.history.push({ method: j, path: W, composed: O, handler: $, hooks: w });
    const C = this.router.static.http, T = { handler: z ? O : undefined, compile: P };
    if (j === "$INTERNALWS") {
      const H = this.config.strictPath ? undefined : W.endsWith("/") ? W.slice(0, W.length - 1) : W + "/";
      if (W.indexOf(":") === -1 && W.indexOf("*") === -1) {
        const k = C.handlers.length;
        if (C.handlers.push((b) => (C.handlers[k] = P())(b)), this.router.static.ws[W] = k, H)
          this.router.static.ws[H] = k;
      } else if (this.router.ws.add("ws", W, T), H)
        this.router.ws.add("ws", H, T);
      return;
    }
    if (W.indexOf(":") === -1 && W.indexOf("*") === -1) {
      const H = C.handlers.length;
      if (C.handlers.push((k) => (C.handlers[H] = P())(k)), !C.map[W])
        C.map[W] = { code: "" };
      if (j === "ALL")
        C.map[W].all = `default: return st[${H}](ctx)\n`;
      else
        C.map[W].code = `case '${j}': return st[${H}](ctx)\n${C.map[W].code}`;
      if (!this.config.strictPath) {
        if (!C.map[G])
          C.map[G] = { code: "" };
        if (j === "ALL")
          C.map[G].all = `default: return st[${H}](ctx)\n`;
        else
          C.map[G].code = `case '${j}': return st[${H}](ctx)\n${C.map[G].code}`;
      }
    } else if (this.router.http.add(j, W, T), !this.config.strictPath)
      this.router.http.add(j, W.endsWith("/") ? W.slice(0, W.length - 1) : W + "/", T);
  }
  setHeaders;
  headers(j) {
    if (!j)
      return this;
    if (!this.setHeaders)
      this.setHeaders = {};
    return this.setHeaders = c(this.setHeaders, j), this;
  }
  onStart(j) {
    return this.on("start", j), this;
  }
  onRequest(j) {
    return this.on("request", j), this;
  }
  onParse(j, W) {
    if (!W)
      return this.on("parse", j);
    return this.on(j, "parse", W);
  }
  onTransform(j, W) {
    if (!W)
      return this.on("transform", j);
    return this.on(j, "transform", W);
  }
  resolve(j, W) {
    if (!W)
      W = j, j = { as: "local" };
    const $ = { subType: "resolve", fn: W };
    return this.onBeforeHandle(j, $);
  }
  mapResolve(j, W) {
    if (!W)
      W = j, j = { as: "local" };
    const $ = { subType: "mapResolve", fn: W };
    return this.onBeforeHandle(j, $);
  }
  onBeforeHandle(j, W) {
    if (!W)
      return this.on("beforeHandle", j);
    return this.on(j, "beforeHandle", W);
  }
  onAfterHandle(j, W) {
    if (!W)
      return this.on("afterHandle", j);
    return this.on(j, "afterHandle", W);
  }
  mapResponse(j, W) {
    if (!W)
      return this.on("mapResponse", j);
    return this.on(j, "mapResponse", W);
  }
  onAfterResponse(j, W) {
    if (!W)
      return this.on("afterResponse", j);
    return this.on(j, "afterResponse", W);
  }
  trace(j, W) {
    if (!W)
      W = j, j = { as: "local" };
    if (!Array.isArray(W))
      W = [W];
    for (let $ of W)
      this.on(j, "trace", _2($));
    return this;
  }
  error(j, W) {
    switch (typeof j) {
      case "string":
        return W.prototype[N0] = j, this.definitions.error[j] = W, this;
      case "function":
        return this.definitions.error = j(this.definitions.error), this;
    }
    for (let [$, X] of Object.entries(j))
      X.prototype[N0] = $, this.definitions.error[$] = X;
    return this;
  }
  onError(j, W) {
    if (!W)
      return this.on("error", j);
    return this.on(j, "error", W);
  }
  onStop(j) {
    return this.on("stop", j), this;
  }
  on(j, W, $) {
    let X;
    switch (typeof j) {
      case "string":
        X = j, $ = W;
        break;
      case "object":
        if (X = W, !Array.isArray(W) && typeof W === "object")
          $ = W;
        break;
    }
    if (Array.isArray($))
      $ = i($);
    else if (typeof $ === "function")
      $ = [{ fn: $ }];
    else
      $ = [$];
    const Z = $;
    for (let J of Z)
      J.scope = typeof j === "string" ? "local" : j?.as ?? "local";
    if (X !== "trace")
      t0({ [X]: Z.map((J) => J.fn) }, this.inference);
    for (let J of Z) {
      const Q = G2(J, "global", { skipIfHasType: true });
      switch (X) {
        case "start":
          this.event.start.push(Q);
          break;
        case "request":
          this.event.request.push(Q);
          break;
        case "parse":
          this.event.parse.push(Q);
          break;
        case "transform":
          this.event.transform.push(Q);
          break;
        case "beforeHandle":
          this.event.beforeHandle.push(Q);
          break;
        case "afterHandle":
          this.event.afterHandle.push(Q);
          break;
        case "mapResponse":
          this.event.mapResponse.push(Q);
          break;
        case "afterResponse":
          this.event.afterResponse.push(Q);
          break;
        case "trace":
          this.event.trace.push(Q);
          break;
        case "error":
          this.event.error.push(Q);
          break;
        case "stop":
          this.event.stop.push(Q);
          break;
      }
    }
    return this;
  }
  propagate() {
    return v(this.event.parse), v(this.event.transform), v(this.event.beforeHandle), v(this.event.afterHandle), v(this.event.mapResponse), v(this.event.afterResponse), v(this.event.trace), v(this.event.error), this;
  }
  as(j) {
    const W = { plugin: "scoped", global: "global" }[j];
    if (v(this.event.parse, W), v(this.event.transform, W), v(this.event.beforeHandle, W), v(this.event.afterHandle, W), v(this.event.mapResponse, W), v(this.event.afterResponse, W), v(this.event.trace, W), v(this.event.error, W), j === "plugin")
      this.validator.scoped = H0(this.validator.scoped, this.validator.local), this.validator.local = null;
    else if (j === "global")
      this.validator.global = H0(this.validator.global, H0(this.validator.scoped, this.validator.local)), this.validator.scoped = null, this.validator.local = null;
    return this;
  }
  group(j, W, $) {
    const X = new X0({ ...this.config, prefix: "" });
    X.singleton = { ...this.singleton }, X.definitions = { ...this.definitions }, X.getServer = () => this.getServer(), X.inference = u0(this.inference), X.extender = { ...this.extender };
    const Z = typeof W === "object", J = (Z ? $ : W)(X);
    if (this.singleton = c(this.singleton, X.singleton), this.definitions = c(this.definitions, X.definitions), J.event.request.length)
      this.event.request = [...this.event.request || [], ...J.event.request || []];
    if (J.event.mapResponse.length)
      this.event.mapResponse = [...this.event.mapResponse || [], ...J.event.mapResponse || []];
    return this.model(J.definitions.type), Object.values(X.router.history).forEach(({ method: Q, path: K, handler: Y, hooks: B }) => {
      if (K = (Z ? "" : this.config.prefix) + j + K, Z) {
        const U = W, _ = B;
        this.add(Q, K, Y, l(U, { ..._ || {}, error: !_.error ? J.event.error : Array.isArray(_.error) ? [..._.error || {}, ...J.event.error || {}] : [_.error, ...J.event.error || {}] }));
      } else
        this.add(Q, K, Y, l(B, { error: J.event.error }), { skipPrefix: true });
    }), this;
  }
  guard(j, W) {
    if (!W) {
      if (typeof j === "object") {
        this.applyMacro(j);
        const Z = j.as ?? "local";
        if (this.validator[Z] = { body: j.body ?? this.validator[Z]?.body, headers: j.headers ?? this.validator[Z]?.headers, params: j.params ?? this.validator[Z]?.params, query: j.query ?? this.validator[Z]?.query, response: j.response ?? this.validator[Z]?.response, cookie: j.cookie ?? this.validator[Z]?.cookie }, j.parse)
          this.on({ as: Z }, "parse", j.parse);
        if (j.transform)
          this.on({ as: Z }, "transform", j.transform);
        if (j.beforeHandle)
          this.on({ as: Z }, "beforeHandle", j.beforeHandle);
        if (j.afterHandle)
          this.on({ as: Z }, "afterHandle", j.afterHandle);
        if (j.mapResponse)
          this.on({ as: Z }, "mapResponse", j.mapResponse);
        if (j.afterResponse)
          this.on({ as: Z }, "afterResponse", j.afterResponse);
        if (j.error)
          this.on({ as: Z }, "error", j.error);
        if (j.detail)
          if (this.config.detail)
            this.config.detail = c(Object.assign({}, this.config.detail), j.detail);
          else
            this.config.detail = j.detail;
        if (j?.tags)
          if (!this.config.detail)
            this.config.detail = { tags: j.tags };
          else
            this.config.detail.tags = j.tags;
        return this;
      }
      return this.guard({}, j);
    }
    const $ = new X0({ ...this.config, prefix: "" });
    $.singleton = { ...this.singleton }, $.definitions = { ...this.definitions }, $.inference = u0(this.inference), $.extender = { ...this.extender };
    const X = W($);
    if (this.singleton = c(this.singleton, $.singleton), this.definitions = c(this.definitions, $.definitions), X.getServer = () => this.server, X.event.request.length)
      this.event.request = [...this.event.request || [], ...X.event.request || []];
    if (X.event.mapResponse.length)
      this.event.mapResponse = [...this.event.mapResponse || [], ...X.event.mapResponse || []];
    return this.model(X.definitions.type), Object.values($.router.history).forEach(({ method: Z, path: J, handler: Q, hooks: K }) => {
      this.add(Z, J, Q, l(j, { ...K || {}, error: !K.error ? X.event.error : Array.isArray(K.error) ? [...K.error || {}, ...X.event.error || []] : [K.error, ...X.event.error || []] }));
    }), this;
  }
  use(j, W) {
    if (W?.scoped)
      return this.guard({}, ($) => $.use(j));
    if (Array.isArray(j)) {
      let $ = this;
      for (let X of j)
        $ = this.use(X);
      return $;
    }
    if (j instanceof Promise)
      return this.promisedModules.add(j.then(($) => {
        if (typeof $ === "function")
          return $(this);
        if ($ instanceof X0)
          return this._use($);
        if (typeof $.default === "function")
          return $.default(this);
        if ($.default instanceof X0)
          return this._use($.default);
        throw new Error('Invalid plugin type. Expected Elysia instance, function, or module with "default" as Elysia instance or function that returns Elysia instance.');
      }).then(($) => $.compile())), this;
    return this._use(j);
  }
  _use(j) {
    if (typeof j === "function") {
      const Z = j(this);
      if (Z instanceof Promise)
        return this.promisedModules.add(Z.then((J) => {
          if (J instanceof X0) {
            this.compile();
            for (let { method: Q, path: K, handler: Y, hooks: B } of Object.values(J.router.history))
              this.add(Q, K, Y, l(B, { error: J.event.error }));
            return J;
          }
          if (typeof J === "function")
            return J(this);
          if (typeof J.default === "function")
            return J.default(this);
          return this._use(J);
        }).then((J) => J.compile())), this;
      return Z;
    }
    if (j.promisedModules.size)
      return this.promisedModules.add(j.modules.then(() => this._use(j)).then((Z) => Z.compile())), this;
    const { name: W, seed: $ } = j.config;
    j.getServer = () => this.getServer(), j.getGlobalRoutes = () => this.getGlobalRoutes(), j.model(this.definitions.type), j.error(this.definitions.error);
    const X = j.config.scoped;
    if (X) {
      if (W) {
        if (!(W in this.dependencies))
          this.dependencies[W] = [];
        const J = $ !== undefined ? I0(W + JSON.stringify($)) : 0;
        if (this.dependencies[W].some(({ checksum: Q }) => J === Q))
          return this;
        this.dependencies[W].push(!this.config?.analytic ? { name: j.config.name, seed: j.config.seed, checksum: J, dependencies: j.dependencies } : { name: j.config.name, seed: j.config.seed, checksum: J, dependencies: j.dependencies, stack: j.telemetry.stack, routes: j.router.history, decorators: j.singleton.decorator, store: j.singleton.store, type: j.definitions.type, error: j.definitions.error, derive: j.event.transform.filter((Q) => Q.subType === "derive").map((Q) => ({ fn: Q.fn.toString(), stack: new Error().stack ?? "" })), resolve: j.event.transform.filter((Q) => Q.subType === "derive").map((Q) => ({ fn: Q.fn.toString(), stack: new Error().stack ?? "" })) });
      }
      j.extender.macros = this.extender.macros.concat(j.extender.macros);
      const Z = [];
      for (let J = 0;J < j.extender.macros.length; J++) {
        const Q = this.extender.macros[J];
        if (Z.includes(Q.checksum))
          j.extender.macros.splice(J, 1), J--;
        Z.push(Q.checksum);
      }
      if (j.onRequest((J) => {
        Object.assign(J, this.singleton.decorator), Object.assign(J.store, this.singleton.store);
      }), j.event.trace.length)
        j.event.trace.push(...j.event.trace);
      if (!j.config.prefix)
        console.warn("It's recommended to use scoped instance with a prefix to prevent collision routing with other instance.");
      if (j.event.error.length)
        j.event.error.push(...this.event.error);
      if (j.config.aot)
        j.compile();
      if (X === true && j.config.prefix) {
        this.mount(j.config.prefix + "/", j.fetch);
        for (let J of j.router.history)
          this.routeTree.set(J.method + `${j.config.prefix}${J.path}`, this.router.history.length), this.router.history.push({ ...J, path: `${j.config.prefix}${J.path}`, hooks: l(J.hooks, { error: this.event.error }) });
      } else {
        this.mount(j.fetch);
        for (let J of j.router.history)
          this.routeTree.set(J.method + `${j.config.prefix}${J.path}`, this.router.history.length), this.router.history.push({ ...J, path: `${j.config.prefix}${J.path}`, hooks: l(J.hooks, { error: this.event.error }) });
      }
      return this;
    } else {
      if (this.headers(j.setHeaders), W) {
        if (!(W in this.dependencies))
          this.dependencies[W] = [];
        const J = $ !== undefined ? I0(W + JSON.stringify($)) : 0;
        if (!this.dependencies[W].some(({ checksum: Q }) => J === Q))
          this.extender.macros = this.extender.macros.concat(j.extender.macros), this.extender.higherOrderFunctions = this.extender.higherOrderFunctions.concat(j.extender.higherOrderFunctions);
      } else
        this.extender.macros = this.extender.macros.concat(j.extender.macros), this.extender.higherOrderFunctions = this.extender.higherOrderFunctions.concat(j.extender.higherOrderFunctions);
      Z1(this.extender.macros), Z1(this.extender.higherOrderFunctions);
      const Z = [];
      for (let J = 0;J < this.extender.higherOrderFunctions.length; J++) {
        const Q = this.extender.higherOrderFunctions[J];
        if (Q.checksum) {
          if (Z.includes(Q.checksum))
            this.extender.higherOrderFunctions.splice(J, 1), J--;
          Z.push(Q.checksum);
        }
      }
      this.inference = { body: this.inference.body || j.inference.body, cookie: this.inference.cookie || j.inference.cookie, headers: this.inference.headers || j.inference.headers, query: this.inference.query || j.inference.query, set: this.inference.set || j.inference.set, server: this.inference.server || j.inference.server };
    }
    this.decorate(j.singleton.decorator), this.state(j.singleton.store), this.model(j.definitions.type), this.error(j.definitions.error), j.extender.macros = this.extender.macros.concat(j.extender.macros);
    for (let { method: Z, path: J, handler: Q, hooks: K } of Object.values(j.router.history))
      this.add(Z, J, Q, l(K, { error: j.event.error }));
    if (!X)
      if (W) {
        if (!(W in this.dependencies))
          this.dependencies[W] = [];
        const Z = $ !== undefined ? I0(W + JSON.stringify($)) : 0;
        if (this.dependencies[W].some(({ checksum: J }) => Z === J))
          return this;
        this.dependencies[W].push(!this.config?.analytic ? { name: j.config.name, seed: j.config.seed, checksum: Z, dependencies: j.dependencies } : { name: j.config.name, seed: j.config.seed, checksum: Z, dependencies: j.dependencies, stack: j.telemetry.stack, routes: j.router.history, decorators: j.singleton, store: j.singleton.store, type: j.definitions.type, error: j.definitions.error, derive: j.event.transform.filter((J) => J?.subType === "derive").map((J) => ({ fn: J.toString(), stack: new Error().stack ?? "" })), resolve: j.event.transform.filter((J) => J?.subType === "resolve").map((J) => ({ fn: J.toString(), stack: new Error().stack ?? "" })) }), this.event = N1(this.event, O1(j.event), Z);
      } else
        this.event = N1(this.event, O1(j.event));
    return this.validator.global = l(this.validator.global, { ...j.validator.global }), this.validator.local = l(this.validator.local, { ...j.validator.scoped }), this;
  }
  macro(j) {
    const W = { checksum: I0(JSON.stringify({ name: this.config.name, seed: this.config.seed, content: j.toString() })), fn: j };
    return this.extender.macros.push(W), this;
  }
  mount(j, W) {
    if (j instanceof X0 || typeof j === "function" || j.length === 0 || j === "/") {
      const Z = typeof j === "function" ? j : j instanceof X0 ? j.compile().fetch : W instanceof X0 ? W.compile().fetch : W, J = async ({ request: Q, path: K }) => Z(new Request(o0(Q.url, K || "/"), Q));
      return this.all("/*", J, { type: "none" }), this;
    }
    const $ = j.length;
    if (W instanceof X0)
      W = W.compile().fetch;
    const X = async ({ request: Z, path: J }) => W(new Request(o0(Z.url, J.slice($) || "/"), Z));
    return this.all(j, X, { type: "none" }), this.all(j + (j.endsWith("/") ? "*" : "/*"), X, { type: "none" }), this;
  }
  get(j, W, $) {
    return this.add("GET", j, W, $), this;
  }
  post(j, W, $) {
    return this.add("POST", j, W, $), this;
  }
  put(j, W, $) {
    return this.add("PUT", j, W, $), this;
  }
  patch(j, W, $) {
    return this.add("PATCH", j, W, $), this;
  }
  delete(j, W, $) {
    return this.add("DELETE", j, W, $), this;
  }
  options(j, W, $) {
    return this.add("OPTIONS", j, W, $), this;
  }
  all(j, W, $) {
    return this.add("ALL", j, W, $), this;
  }
  head(j, W, $) {
    return this.add("HEAD", j, W, $), this;
  }
  connect(j, W, $) {
    return this.add("CONNECT", j, W, $), this;
  }
  route(j, W, $, X) {
    return this.add(j.toUpperCase(), W, $, X, X?.config), this;
  }
  ws(j, W) {
    const $ = W.transformMessage ? Array.isArray(W.transformMessage) ? W.transformMessage : [W.transformMessage] : undefined;
    let X = null;
    const Z = m(W?.body, { models: this.definitions.type, normalize: this.config.normalize }), J = m(W?.response, { models: this.definitions.type, normalize: this.config.normalize }), Q = (K) => {
      if (typeof K === "string") {
        const Y = K?.charCodeAt(0);
        if (Y === 47 || Y === 123)
          try {
            K = JSON.parse(K);
          } catch {
          }
        else if ($1(K))
          K = +K;
      }
      if ($?.length)
        for (let Y = 0;Y < $.length; Y++) {
          const B = $[Y](K);
          if (B !== undefined)
            K = B;
        }
      return K;
    };
    return this.route("$INTERNALWS", j, (K) => {
      const { set: Y, path: B, qi: U, headers: _, query: M, params: G } = K;
      if (X === null)
        X = this.getServer();
      if (X?.upgrade(K.request, { headers: typeof W.upgrade === "function" ? W.upgrade(K) : W.upgrade, data: { validator: J, open(w) {
        W.open?.(new R0(w, K));
      }, message: (w, z) => {
        const F = Q(z);
        if (Z?.Check(F) === false)
          return void w.send(new L("message", Z, F).message);
        W.message?.(new R0(w, K), F);
      }, drain(w) {
        W.drain?.(new R0(w, K));
      }, close(w, z, F) {
        W.close?.(new R0(w, K), z, F);
      } } }))
        return;
      return Y.status = 400, "Expected a websocket connection";
    }, { beforeHandle: W.beforeHandle, transform: W.transform, headers: W.headers, params: W.params, query: W.query }), this;
  }
  state(j, W, $) {
    if (W === undefined)
      $ = j, j = { as: "append" }, W = "";
    else if ($ === undefined) {
      if (typeof j === "string")
        $ = W, W = j, j = { as: "append" };
      else if (typeof j === "object")
        $ = W, W = "";
    }
    const { as: X } = j;
    if (typeof W !== "string")
      return this;
    switch (typeof $) {
      case "object":
        if (W) {
          if (W in this.singleton.store)
            this.singleton.store[W] = c(this.singleton.store[W], $, { override: X === "override" });
          else
            this.singleton.store[W] = $;
          return this;
        }
        if ($ === null)
          return this;
        return this.singleton.store = c(this.singleton.store, $, { override: X === "override" }), this;
      case "function":
        if (W) {
          if (X === "override" || !(W in this.singleton.store))
            this.singleton.store[W] = $;
        } else
          this.singleton.store = $(this.singleton.store);
        return this;
      default:
        if (X === "override" || !(W in this.singleton.store))
          this.singleton.store[W] = $;
        return this;
    }
  }
  decorate(j, W, $) {
    if (W === undefined)
      $ = j, j = { as: "append" }, W = "";
    else if ($ === undefined) {
      if (typeof j === "string")
        $ = W, W = j, j = { as: "append" };
      else if (typeof j === "object")
        $ = W, W = "";
    }
    const { as: X } = j;
    if (typeof W !== "string")
      return this;
    switch (typeof $) {
      case "object":
        if (W) {
          if (W in this.singleton.decorator)
            this.singleton.decorator[W] = c(this.singleton.decorator[W], $, { override: X === "override" });
          else
            this.singleton.decorator[W] = $;
          return this;
        }
        if ($ === null)
          return this;
        return this.singleton.decorator = c(this.singleton.decorator, $, { override: X === "override" }), this;
      case "function":
        if (W) {
          if (X === "override" || !(W in this.singleton.decorator))
            this.singleton.decorator[W] = $;
        } else
          this.singleton.decorator = $(this.singleton.decorator);
        return this;
      default:
        if (X === "override" || !(W in this.singleton.decorator))
          this.singleton.decorator[W] = $;
        return this;
    }
  }
  derive(j, W) {
    if (!W)
      W = j, j = { as: "local" };
    const $ = { subType: "derive", fn: W };
    return this.onTransform(j, $);
  }
  model(j, W) {
    switch (typeof j) {
      case "object":
        return Object.entries(j).forEach(([$, X]) => {
          if (!($ in this.definitions.type))
            this.definitions.type[$] = X;
        }), this;
      case "function":
        return this.definitions.type = j(this.definitions.type), this;
    }
    return this.definitions.type[j] = W, this;
  }
  mapDerive(j, W) {
    if (!W)
      W = j, j = { as: "local" };
    const $ = { subType: "mapDerive", fn: W };
    return this.onTransform(j, $);
  }
  affix(j, W, $) {
    if ($ === "")
      return this;
    const X = ["_", "-", " "], Z = (Y) => Y[0].toUpperCase() + Y.slice(1), J = j === "prefix" ? (Y, B) => X.includes(Y.at(-1) ?? "") ? Y + B : Y + Z(B) : X.includes($.at(-1) ?? "") ? (Y, B) => B + Y : (Y, B) => B + Z(Y), Q = (Y) => {
      const B = {};
      switch (Y) {
        case "decorator":
          for (let U in this.singleton.decorator)
            B[J($, U)] = this.singleton.decorator[U];
          this.singleton.decorator = B;
          break;
        case "state":
          for (let U in this.singleton.store)
            B[J($, U)] = this.singleton.store[U];
          this.singleton.store = B;
          break;
        case "model":
          for (let U in this.definitions.type)
            B[J($, U)] = this.definitions.type[U];
          this.definitions.type = B;
          break;
        case "error":
          for (let U in this.definitions.error)
            B[J($, U)] = this.definitions.error[U];
          this.definitions.error = B;
          break;
      }
    }, K = Array.isArray(W) ? W : [W];
    for (let Y of K.some((B) => B === "all") ? ["decorator", "state", "model", "error"] : K)
      Q(Y);
    return this;
  }
  prefix(j, W) {
    return this.affix("prefix", j, W);
  }
  suffix(j, W) {
    return this.affix("suffix", j, W);
  }
  compile() {
    if (this.fetch = this.config.aot ? E1(this) : b1(this), typeof this.server?.reload === "function")
      this.server.reload({ ...this.server || {}, fetch: this.fetch });
    return this;
  }
  handle = async (j) => this.fetch(j);
  fetch = (j) => {
    return (this.fetch = this.config.aot ? E1(this) : b1(this))(j);
  };
  handleError = async (j, W) => (this.handleError = this.config.aot ? H1(this) : F2(this))(j, W);
  outerErrorHandler = (j) => new Response(j.message || j.name || "Error", { status: j?.status ?? 500 });
  listen = (j, W) => {
    if (typeof Bun === "undefined")
      throw new Error(".listen() is designed to run on Bun only. If you are running Elysia in other environment please use a dedicated plugin or export the handler via Elysia.fetch");
    if (this.compile(), typeof j === "string") {
      if (!$1(j))
        throw new Error("Port must be a numeric value");
      j = parseInt(j);
    }
    const $ = this.fetch, X = typeof j === "object" ? { development: !d0, reusePort: true, ...this.config.serve || {}, ...j || {}, websocket: { ...this.config.websocket || {}, ...S1 || {} }, fetch: $, error: this.outerErrorHandler } : { development: !d0, reusePort: true, ...this.config.serve || {}, websocket: { ...this.config.websocket || {}, ...S1 || {} }, port: j, fetch: $, error: this.outerErrorHandler };
    this.server = Bun?.serve(X);
    for (let Z = 0;Z < this.event.start.length; Z++)
      this.event.start[Z].fn(this);
    if (W)
      W(this.server);
    return process.on("beforeExit", () => {
      if (this.server) {
        this.server.stop(), this.server = null;
        for (let Z = 0;Z < this.event.stop.length; Z++)
          this.event.stop[Z].fn(this);
      }
    }), this.promisedModules.then(() => {
      Bun?.gc(false);
    }), this;
  };
  stop = async () => {
    if (!this.server)
      throw new Error("Elysia isn't running. Call `app.listen` to start the server.");
    if (this.server) {
      if (this.server.stop(), this.server = null, this.event.stop.length)
        for (let j = 0;j < this.event.stop.length; j++)
          this.event.stop[j].fn(this);
    }
  };
  get modules() {
    return Promise.all(this.promisedModules.promises);
  }
}

// src/prisma.ts
var client = __toESM(require_default2(), 1);
var prisma = new client.PrismaClient;

// src/index.ts
var app = new X0().get("/", () => {
  return "Hello, Elysia!";
}).get("/posts", async () => {
  const posts = await prisma.post.findMany();
  return posts;
}).listen(1234);
console.log(`\uD83E\uDD8A Elysia is running at ${app.server?.hostname}:${app.server?.port}`);

//# debugId=CD6341C3CAEBC79664756E2164756E21
//# sourceMappingURL=data:application/json;base64,
